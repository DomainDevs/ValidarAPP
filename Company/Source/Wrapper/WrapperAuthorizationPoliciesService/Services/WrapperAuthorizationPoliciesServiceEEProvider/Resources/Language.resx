<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CreateAgentAutho" xml:space="preserve">
    <value>The person was created as an agent</value>
  </data>
  <data name="CreateBankTransfersAutho" xml:space="preserve">
    <value>Bank transfer was created</value>
  </data>
  <data name="CreateBusinessNameAutho" xml:space="preserve">
    <value>The business name was created</value>
  </data>
  <data name="CreateCoInsuredAutho" xml:space="preserve">
    <value>The person was created as co-insurer</value>
  </data>
  <data name="CreateCompanyAuthoSuccess" xml:space="preserve">
    <value>Legal person was created</value>
  </data>
  <data name="CreateConsortiatesAutho" xml:space="preserve">
    <value>The person was created as a consortium</value>
  </data>
  <data name="CreateEmployedAutho" xml:space="preserve">
    <value>The person was created as an employee</value>
  </data>
  <data name="CreateGuaranteeAutho" xml:space="preserve">
    <value>The guarantee for the person was created</value>
  </data>
  <data name="CreateInsuredAutho" xml:space="preserve">
    <value>The person was created as insured</value>
  </data>
  <data name="CreatePaymentMethodsAutho" xml:space="preserve">
    <value>Payment method created</value>
  </data>
  <data name="CreatePersonalInformationAutho" xml:space="preserve">
    <value>The person was created as information staff</value>
  </data>
  <data name="CreatePersonAuthoSuccess" xml:space="preserve">
    <value>Natural person was created</value>
  </data>
  <data name="CreateProviderAutho" xml:space="preserve">
    <value>The person was created as a provider</value>
  </data>
  <data name="CreateQuotaAutho" xml:space="preserve">
    <value>The quota was created</value>
  </data>
  <data name="CreateReInsurerAutho" xml:space="preserve">
    <value>The person was created as reinsurer</value>
  </data>
  <data name="CreateSarlaftAuthoSuccess" xml:space="preserve">
    <value>Sarlaft was created</value>
  </data>
  <data name="CreateTaxAutho" xml:space="preserve">
    <value>The tax was created</value>
  </data>
  <data name="CreateThirdAutho" xml:space="preserve">
    <value>The person was created as a third party</value>
  </data>
  <data name="UpdateBankTransfersAutho" xml:space="preserve">
    <value>Bank transfer updated</value>
  </data>
  <data name="UpdateBusinessNameAutho" xml:space="preserve">
    <value>The business name was updated</value>
  </data>
  <data name="UpdateCoInsuredAutho" xml:space="preserve">
    <value>The person was updated as co-insurer</value>
  </data>
  <data name="UpdateCompanyAuthoSuccess" xml:space="preserve">
    <value>Legal person was updated</value>
  </data>
  <data name="UpdateConsortiatesAutho" xml:space="preserve">
    <value>The person was updated as a consortium</value>
  </data>
  <data name="UpdateEmployedAutho" xml:space="preserve">
    <value>Person updated as employee</value>
  </data>
  <data name="UpdateInsuredAutho" xml:space="preserve">
    <value>Person updated as insured</value>
  </data>
  <data name="UpdatePaymentMethodsAutho" xml:space="preserve">
    <value>The payment method was updated</value>
  </data>
  <data name="UpdatePersonalInformationAutho" xml:space="preserve">
    <value>Person updated as information staff</value>
  </data>
  <data name="UpdatePersonAuthoSuccess" xml:space="preserve">
    <value>Natural person was updated</value>
  </data>
  <data name="UpdateProviderAutho" xml:space="preserve">
    <value>Person updated as provider</value>
  </data>
  <data name="UpdateQuotaAutho" xml:space="preserve">
    <value>Quota updated</value>
  </data>
  <data name="UpdateReInsurerAutho" xml:space="preserve">
    <value>The person was updated as reinsurer</value>
  </data>
  <data name="UpdateSarlaftAuthoSuccess" xml:space="preserve">
    <value>Sarlaft was updated</value>
  </data>
  <data name="UpdateTaxAutho" xml:space="preserve">
    <value>The tax was updated</value>
  </data>
  <data name="UpdateThirdAutho" xml:space="preserve">
    <value>The person was updated as a third party</value>
  </data>
</root>