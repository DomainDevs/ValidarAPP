//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ArrayOfInt", Namespace="http://tempuri.org/", ItemName="int")]
    [System.SerializableAttribute()]
    public class ArrayOfInt : System.Collections.Generic.List<int> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ArrayOfString", Namespace="http://tempuri.org/", ItemName="string")]
    [System.SerializableAttribute()]
    public class ArrayOfString : System.Collections.Generic.List<string> {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WrapperAuthoPoliciesService.IWrapperAuthorizationPoliciesService")]
    public interface IWrapperAuthorizationPoliciesService {
        
        // CODEGEN: Se está generando un contrato de mensaje, ya que el nombre de elemento risks del espacio de nombres http://tempuri.org/ no está marcado para aceptar valores nil.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/UpdateCollectiveLoadAutho" +
            "rization", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/UpdateCollectiveLoadAutho" +
            "rizationResponse")]
        Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.UpdateCollectiveLoadAuthorizationResponse UpdateCollectiveLoadAuthorization(Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.UpdateCollectiveLoadAuthorizationRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/UpdateCollectiveLoadAutho" +
            "rization", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/UpdateCollectiveLoadAutho" +
            "rizationResponse")]
        System.Threading.Tasks.Task<Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.UpdateCollectiveLoadAuthorizationResponse> UpdateCollectiveLoadAuthorizationAsync(Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.UpdateCollectiveLoadAuthorizationRequest request);
        
        // CODEGEN: Se está generando un contrato de mensaje, ya que el nombre de elemento loadId del espacio de nombres http://tempuri.org/ no está marcado para aceptar valores nil.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CompanyUpdateMassiveLoadA" +
            "uthorization", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CompanyUpdateMassiveLoadA" +
            "uthorizationResponse")]
        Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.CompanyUpdateMassiveLoadAuthorizationResponse CompanyUpdateMassiveLoadAuthorization(Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.CompanyUpdateMassiveLoadAuthorizationRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CompanyUpdateMassiveLoadA" +
            "uthorization", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CompanyUpdateMassiveLoadA" +
            "uthorizationResponse")]
        System.Threading.Tasks.Task<Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.CompanyUpdateMassiveLoadAuthorizationResponse> CompanyUpdateMassiveLoadAuthorizationAsync(Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.CompanyUpdateMassiveLoadAuthorizationRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreatePolicyAuthorization" +
            "", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreatePolicyAuthorization" +
            "Response")]
        void CreatePolicyAuthorization(int TemporalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreatePolicyAuthorization" +
            "", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreatePolicyAuthorization" +
            "Response")]
        System.Threading.Tasks.Task CreatePolicyAuthorizationAsync(int TemporalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateClaimAuthorization", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateClaimAuthorizationR" +
            "esponse")]
        void CreateClaimAuthorization(int claimTemporalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateClaimAuthorization", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateClaimAuthorizationR" +
            "esponse")]
        System.Threading.Tasks.Task CreateClaimAuthorizationAsync(int claimTemporalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreatePaymentRequestAutho" +
            "rization", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreatePaymentRequestAutho" +
            "rizationResponse")]
        void CreatePaymentRequestAuthorization(int paymentRequestTemporalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreatePaymentRequestAutho" +
            "rization", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreatePaymentRequestAutho" +
            "rizationResponse")]
        System.Threading.Tasks.Task CreatePaymentRequestAuthorizationAsync(int paymentRequestTemporalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateChargeRequestAuthor" +
            "ization", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateChargeRequestAuthor" +
            "izationResponse")]
        void CreateChargeRequestAuthorization(int chargeRequestTemporalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateChargeRequestAuthor" +
            "ization", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateChargeRequestAuthor" +
            "izationResponse")]
        System.Threading.Tasks.Task CreateChargeRequestAuthorizationAsync(int chargeRequestTemporalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateClaimNoticeAuthoriz" +
            "ation", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateClaimNoticeAuthoriz" +
            "ationResponse")]
        void CreateClaimNoticeAuthorization(int claimNoticeTemporalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateClaimNoticeAuthoriz" +
            "ation", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateClaimNoticeAuthoriz" +
            "ationResponse")]
        System.Threading.Tasks.Task CreateClaimNoticeAuthorizationAsync(int claimNoticeTemporalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreatePersonAuthorization" +
            "", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreatePersonAuthorization" +
            "Response")]
        void CreatePersonAuthorization(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreatePersonAuthorization" +
            "", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreatePersonAuthorization" +
            "Response")]
        System.Threading.Tasks.Task CreatePersonAuthorizationAsync(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateInsuredAuthorizatio" +
            "n", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateInsuredAuthorizatio" +
            "nResponse")]
        void CreateInsuredAuthorization(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateInsuredAuthorizatio" +
            "n", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateInsuredAuthorizatio" +
            "nResponse")]
        System.Threading.Tasks.Task CreateInsuredAuthorizationAsync(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateProviderAuthorizati" +
            "on", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateProviderAuthorizati" +
            "onResponse")]
        void CreateProviderAuthorization(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateProviderAuthorizati" +
            "on", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateProviderAuthorizati" +
            "onResponse")]
        System.Threading.Tasks.Task CreateProviderAuthorizationAsync(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateAgentAuthorization", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateAgentAuthorizationR" +
            "esponse")]
        void CreateAgentAuthorization(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateAgentAuthorization", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateAgentAuthorizationR" +
            "esponse")]
        System.Threading.Tasks.Task CreateAgentAuthorizationAsync(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateReInsurerAuthorizat" +
            "ion", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateReInsurerAuthorizat" +
            "ionResponse")]
        void CreateReInsurerAuthorization(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateReInsurerAuthorizat" +
            "ion", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateReInsurerAuthorizat" +
            "ionResponse")]
        System.Threading.Tasks.Task CreateReInsurerAuthorizationAsync(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateQuotaAuthorization", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateQuotaAuthorizationR" +
            "esponse")]
        void CreateQuotaAuthorization(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateQuotaAuthorization", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateQuotaAuthorizationR" +
            "esponse")]
        System.Threading.Tasks.Task CreateQuotaAuthorizationAsync(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateTaxAuthorization", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateTaxAuthorizationRes" +
            "ponse")]
        void CreateTaxAuthorization(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateTaxAuthorization", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateTaxAuthorizationRes" +
            "ponse")]
        System.Threading.Tasks.Task CreateTaxAuthorizationAsync(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateCoInsuredAuthorizat" +
            "ion", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateCoInsuredAuthorizat" +
            "ionResponse")]
        void CreateCoInsuredAuthorization(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateCoInsuredAuthorizat" +
            "ion", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateCoInsuredAuthorizat" +
            "ionResponse")]
        System.Threading.Tasks.Task CreateCoInsuredAuthorizationAsync(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateThirdAuthorization", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateThirdAuthorizationR" +
            "esponse")]
        void CreateThirdAuthorization(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateThirdAuthorization", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateThirdAuthorizationR" +
            "esponse")]
        System.Threading.Tasks.Task CreateThirdAuthorizationAsync(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateEmployedAuthorizati" +
            "on", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateEmployedAuthorizati" +
            "onResponse")]
        void CreateEmployedAuthorization(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateEmployedAuthorizati" +
            "on", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateEmployedAuthorizati" +
            "onResponse")]
        System.Threading.Tasks.Task CreateEmployedAuthorizationAsync(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreatePersonalInformation" +
            "Authorization", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreatePersonalInformation" +
            "AuthorizationResponse")]
        void CreatePersonalInformationAuthorization(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreatePersonalInformation" +
            "Authorization", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreatePersonalInformation" +
            "AuthorizationResponse")]
        System.Threading.Tasks.Task CreatePersonalInformationAuthorizationAsync(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreatePaymentMethodsAutho" +
            "rization", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreatePaymentMethodsAutho" +
            "rizationResponse")]
        void CreatePaymentMethodsAuthorization(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreatePaymentMethodsAutho" +
            "rization", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreatePaymentMethodsAutho" +
            "rizationResponse")]
        System.Threading.Tasks.Task CreatePaymentMethodsAuthorizationAsync(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateBankTransfersAuthor" +
            "ization", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateBankTransfersAuthor" +
            "izationResponse")]
        void CreateBankTransfersAuthorization(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateBankTransfersAuthor" +
            "ization", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateBankTransfersAuthor" +
            "izationResponse")]
        System.Threading.Tasks.Task CreateBankTransfersAuthorizationAsync(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateConsortiatesAuthori" +
            "zation", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateConsortiatesAuthori" +
            "zationResponse")]
        void CreateConsortiatesAuthorization(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateConsortiatesAuthori" +
            "zation", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateConsortiatesAuthori" +
            "zationResponse")]
        System.Threading.Tasks.Task CreateConsortiatesAuthorizationAsync(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateBusinessNameAuthori" +
            "zation", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateBusinessNameAuthori" +
            "zationResponse")]
        void CreateBusinessNameAuthorization(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateBusinessNameAuthori" +
            "zation", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateBusinessNameAuthori" +
            "zationResponse")]
        System.Threading.Tasks.Task CreateBusinessNameAuthorizationAsync(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateGuaranteeAuthorizat" +
            "ion", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateGuaranteeAuthorizat" +
            "ionResponse")]
        void CreateGuaranteeAuthorization(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateGuaranteeAuthorizat" +
            "ion", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateGuaranteeAuthorizat" +
            "ionResponse")]
        System.Threading.Tasks.Task CreateGuaranteeAuthorizationAsync(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateSarlaftAuthorizatio" +
            "n", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateSarlaftAuthorizatio" +
            "nResponse")]
        void CreateSarlaftAuthorization(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateSarlaftAuthorizatio" +
            "n", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateSarlaftAuthorizatio" +
            "nResponse")]
        System.Threading.Tasks.Task CreateSarlaftAuthorizationAsync(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateBasicInfoAuthorizat" +
            "ion", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateBasicInfoAuthorizat" +
            "ionResponse")]
        void CreateBasicInfoAuthorization(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateBasicInfoAuthorizat" +
            "ion", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateBasicInfoAuthorizat" +
            "ionResponse")]
        System.Threading.Tasks.Task CreateBasicInfoAuthorizationAsync(int operationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateAutomaticQuotaAutho" +
            "rization", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateAutomaticQuotaAutho" +
            "rizationResponse")]
        void CreateAutomaticQuotaAuthorization(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateAutomaticQuotaAutho" +
            "rization", ReplyAction="http://tempuri.org/IWrapperAuthorizationPoliciesService/CreateAutomaticQuotaAutho" +
            "rizationResponse")]
        System.Threading.Tasks.Task CreateAutomaticQuotaAuthorizationAsync(int id);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UpdateCollectiveLoadAuthorizationRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="UpdateCollectiveLoadAuthorization", Namespace="http://tempuri.org/", Order=0)]
        public Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.UpdateCollectiveLoadAuthorizationRequestBody Body;
        
        public UpdateCollectiveLoadAuthorizationRequest() {
        }
        
        public UpdateCollectiveLoadAuthorizationRequest(Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.UpdateCollectiveLoadAuthorizationRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class UpdateCollectiveLoadAuthorizationRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public int loadId;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public int temporalId;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.ArrayOfInt risks;
        
        public UpdateCollectiveLoadAuthorizationRequestBody() {
        }
        
        public UpdateCollectiveLoadAuthorizationRequestBody(int loadId, int temporalId, Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.ArrayOfInt risks) {
            this.loadId = loadId;
            this.temporalId = temporalId;
            this.risks = risks;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UpdateCollectiveLoadAuthorizationResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="UpdateCollectiveLoadAuthorizationResponse", Namespace="http://tempuri.org/", Order=0)]
        public Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.UpdateCollectiveLoadAuthorizationResponseBody Body;
        
        public UpdateCollectiveLoadAuthorizationResponse() {
        }
        
        public UpdateCollectiveLoadAuthorizationResponse(Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.UpdateCollectiveLoadAuthorizationResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute()]
    public partial class UpdateCollectiveLoadAuthorizationResponseBody {
        
        public UpdateCollectiveLoadAuthorizationResponseBody() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CompanyUpdateMassiveLoadAuthorizationRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="CompanyUpdateMassiveLoadAuthorization", Namespace="http://tempuri.org/", Order=0)]
        public Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.CompanyUpdateMassiveLoadAuthorizationRequestBody Body;
        
        public CompanyUpdateMassiveLoadAuthorizationRequest() {
        }
        
        public CompanyUpdateMassiveLoadAuthorizationRequest(Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.CompanyUpdateMassiveLoadAuthorizationRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class CompanyUpdateMassiveLoadAuthorizationRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string loadId;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.ArrayOfString temporalId;
        
        public CompanyUpdateMassiveLoadAuthorizationRequestBody() {
        }
        
        public CompanyUpdateMassiveLoadAuthorizationRequestBody(string loadId, Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.ArrayOfString temporalId) {
            this.loadId = loadId;
            this.temporalId = temporalId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CompanyUpdateMassiveLoadAuthorizationResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="CompanyUpdateMassiveLoadAuthorizationResponse", Namespace="http://tempuri.org/", Order=0)]
        public Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.CompanyUpdateMassiveLoadAuthorizationResponseBody Body;
        
        public CompanyUpdateMassiveLoadAuthorizationResponse() {
        }
        
        public CompanyUpdateMassiveLoadAuthorizationResponse(Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.CompanyUpdateMassiveLoadAuthorizationResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute()]
    public partial class CompanyUpdateMassiveLoadAuthorizationResponseBody {
        
        public CompanyUpdateMassiveLoadAuthorizationResponseBody() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWrapperAuthorizationPoliciesServiceChannel : Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.IWrapperAuthorizationPoliciesService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WrapperAuthorizationPoliciesServiceClient : System.ServiceModel.ClientBase<Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.IWrapperAuthorizationPoliciesService>, Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.IWrapperAuthorizationPoliciesService {
        
        public WrapperAuthorizationPoliciesServiceClient() {
        }
        
        public WrapperAuthorizationPoliciesServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WrapperAuthorizationPoliciesServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WrapperAuthorizationPoliciesServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WrapperAuthorizationPoliciesServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.UpdateCollectiveLoadAuthorizationResponse Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.IWrapperAuthorizationPoliciesService.UpdateCollectiveLoadAuthorization(Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.UpdateCollectiveLoadAuthorizationRequest request) {
            return base.Channel.UpdateCollectiveLoadAuthorization(request);
        }
        
        public void UpdateCollectiveLoadAuthorization(int loadId, int temporalId, Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.ArrayOfInt risks) {
            Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.UpdateCollectiveLoadAuthorizationRequest inValue = new Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.UpdateCollectiveLoadAuthorizationRequest();
            inValue.Body = new Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.UpdateCollectiveLoadAuthorizationRequestBody();
            inValue.Body.loadId = loadId;
            inValue.Body.temporalId = temporalId;
            inValue.Body.risks = risks;
            Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.UpdateCollectiveLoadAuthorizationResponse retVal = ((Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.IWrapperAuthorizationPoliciesService)(this)).UpdateCollectiveLoadAuthorization(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.UpdateCollectiveLoadAuthorizationResponse> Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.IWrapperAuthorizationPoliciesService.UpdateCollectiveLoadAuthorizationAsync(Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.UpdateCollectiveLoadAuthorizationRequest request) {
            return base.Channel.UpdateCollectiveLoadAuthorizationAsync(request);
        }
        
        public System.Threading.Tasks.Task<Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.UpdateCollectiveLoadAuthorizationResponse> UpdateCollectiveLoadAuthorizationAsync(int loadId, int temporalId, Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.ArrayOfInt risks) {
            Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.UpdateCollectiveLoadAuthorizationRequest inValue = new Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.UpdateCollectiveLoadAuthorizationRequest();
            inValue.Body = new Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.UpdateCollectiveLoadAuthorizationRequestBody();
            inValue.Body.loadId = loadId;
            inValue.Body.temporalId = temporalId;
            inValue.Body.risks = risks;
            return ((Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.IWrapperAuthorizationPoliciesService)(this)).UpdateCollectiveLoadAuthorizationAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.CompanyUpdateMassiveLoadAuthorizationResponse Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.IWrapperAuthorizationPoliciesService.CompanyUpdateMassiveLoadAuthorization(Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.CompanyUpdateMassiveLoadAuthorizationRequest request) {
            return base.Channel.CompanyUpdateMassiveLoadAuthorization(request);
        }
        
        public void CompanyUpdateMassiveLoadAuthorization(string loadId, Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.ArrayOfString temporalId) {
            Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.CompanyUpdateMassiveLoadAuthorizationRequest inValue = new Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.CompanyUpdateMassiveLoadAuthorizationRequest();
            inValue.Body = new Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.CompanyUpdateMassiveLoadAuthorizationRequestBody();
            inValue.Body.loadId = loadId;
            inValue.Body.temporalId = temporalId;
            Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.CompanyUpdateMassiveLoadAuthorizationResponse retVal = ((Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.IWrapperAuthorizationPoliciesService)(this)).CompanyUpdateMassiveLoadAuthorization(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.CompanyUpdateMassiveLoadAuthorizationResponse> Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.IWrapperAuthorizationPoliciesService.CompanyUpdateMassiveLoadAuthorizationAsync(Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.CompanyUpdateMassiveLoadAuthorizationRequest request) {
            return base.Channel.CompanyUpdateMassiveLoadAuthorizationAsync(request);
        }
        
        public System.Threading.Tasks.Task<Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.CompanyUpdateMassiveLoadAuthorizationResponse> CompanyUpdateMassiveLoadAuthorizationAsync(string loadId, Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.ArrayOfString temporalId) {
            Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.CompanyUpdateMassiveLoadAuthorizationRequest inValue = new Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.CompanyUpdateMassiveLoadAuthorizationRequest();
            inValue.Body = new Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.CompanyUpdateMassiveLoadAuthorizationRequestBody();
            inValue.Body.loadId = loadId;
            inValue.Body.temporalId = temporalId;
            return ((Sistran.Company.SISE3GApi.WrapperAuthoPoliciesService.IWrapperAuthorizationPoliciesService)(this)).CompanyUpdateMassiveLoadAuthorizationAsync(inValue);
        }
        
        public void CreatePolicyAuthorization(int TemporalId) {
            base.Channel.CreatePolicyAuthorization(TemporalId);
        }
        
        public System.Threading.Tasks.Task CreatePolicyAuthorizationAsync(int TemporalId) {
            return base.Channel.CreatePolicyAuthorizationAsync(TemporalId);
        }
        
        public void CreateClaimAuthorization(int claimTemporalId) {
            base.Channel.CreateClaimAuthorization(claimTemporalId);
        }
        
        public System.Threading.Tasks.Task CreateClaimAuthorizationAsync(int claimTemporalId) {
            return base.Channel.CreateClaimAuthorizationAsync(claimTemporalId);
        }
        
        public void CreatePaymentRequestAuthorization(int paymentRequestTemporalId) {
            base.Channel.CreatePaymentRequestAuthorization(paymentRequestTemporalId);
        }
        
        public System.Threading.Tasks.Task CreatePaymentRequestAuthorizationAsync(int paymentRequestTemporalId) {
            return base.Channel.CreatePaymentRequestAuthorizationAsync(paymentRequestTemporalId);
        }
        
        public void CreateChargeRequestAuthorization(int chargeRequestTemporalId) {
            base.Channel.CreateChargeRequestAuthorization(chargeRequestTemporalId);
        }
        
        public System.Threading.Tasks.Task CreateChargeRequestAuthorizationAsync(int chargeRequestTemporalId) {
            return base.Channel.CreateChargeRequestAuthorizationAsync(chargeRequestTemporalId);
        }
        
        public void CreateClaimNoticeAuthorization(int claimNoticeTemporalId) {
            base.Channel.CreateClaimNoticeAuthorization(claimNoticeTemporalId);
        }
        
        public System.Threading.Tasks.Task CreateClaimNoticeAuthorizationAsync(int claimNoticeTemporalId) {
            return base.Channel.CreateClaimNoticeAuthorizationAsync(claimNoticeTemporalId);
        }
        
        public void CreatePersonAuthorization(int operationId) {
            base.Channel.CreatePersonAuthorization(operationId);
        }
        
        public System.Threading.Tasks.Task CreatePersonAuthorizationAsync(int operationId) {
            return base.Channel.CreatePersonAuthorizationAsync(operationId);
        }
        
        public void CreateInsuredAuthorization(int operationId) {
            base.Channel.CreateInsuredAuthorization(operationId);
        }
        
        public System.Threading.Tasks.Task CreateInsuredAuthorizationAsync(int operationId) {
            return base.Channel.CreateInsuredAuthorizationAsync(operationId);
        }
        
        public void CreateProviderAuthorization(int operationId) {
            base.Channel.CreateProviderAuthorization(operationId);
        }
        
        public System.Threading.Tasks.Task CreateProviderAuthorizationAsync(int operationId) {
            return base.Channel.CreateProviderAuthorizationAsync(operationId);
        }
        
        public void CreateAgentAuthorization(int operationId) {
            base.Channel.CreateAgentAuthorization(operationId);
        }
        
        public System.Threading.Tasks.Task CreateAgentAuthorizationAsync(int operationId) {
            return base.Channel.CreateAgentAuthorizationAsync(operationId);
        }
        
        public void CreateReInsurerAuthorization(int operationId) {
            base.Channel.CreateReInsurerAuthorization(operationId);
        }
        
        public System.Threading.Tasks.Task CreateReInsurerAuthorizationAsync(int operationId) {
            return base.Channel.CreateReInsurerAuthorizationAsync(operationId);
        }
        
        public void CreateQuotaAuthorization(int operationId) {
            base.Channel.CreateQuotaAuthorization(operationId);
        }
        
        public System.Threading.Tasks.Task CreateQuotaAuthorizationAsync(int operationId) {
            return base.Channel.CreateQuotaAuthorizationAsync(operationId);
        }
        
        public void CreateTaxAuthorization(int operationId) {
            base.Channel.CreateTaxAuthorization(operationId);
        }
        
        public System.Threading.Tasks.Task CreateTaxAuthorizationAsync(int operationId) {
            return base.Channel.CreateTaxAuthorizationAsync(operationId);
        }
        
        public void CreateCoInsuredAuthorization(int operationId) {
            base.Channel.CreateCoInsuredAuthorization(operationId);
        }
        
        public System.Threading.Tasks.Task CreateCoInsuredAuthorizationAsync(int operationId) {
            return base.Channel.CreateCoInsuredAuthorizationAsync(operationId);
        }
        
        public void CreateThirdAuthorization(int operationId) {
            base.Channel.CreateThirdAuthorization(operationId);
        }
        
        public System.Threading.Tasks.Task CreateThirdAuthorizationAsync(int operationId) {
            return base.Channel.CreateThirdAuthorizationAsync(operationId);
        }
        
        public void CreateEmployedAuthorization(int operationId) {
            base.Channel.CreateEmployedAuthorization(operationId);
        }
        
        public System.Threading.Tasks.Task CreateEmployedAuthorizationAsync(int operationId) {
            return base.Channel.CreateEmployedAuthorizationAsync(operationId);
        }
        
        public void CreatePersonalInformationAuthorization(int operationId) {
            base.Channel.CreatePersonalInformationAuthorization(operationId);
        }
        
        public System.Threading.Tasks.Task CreatePersonalInformationAuthorizationAsync(int operationId) {
            return base.Channel.CreatePersonalInformationAuthorizationAsync(operationId);
        }
        
        public void CreatePaymentMethodsAuthorization(int operationId) {
            base.Channel.CreatePaymentMethodsAuthorization(operationId);
        }
        
        public System.Threading.Tasks.Task CreatePaymentMethodsAuthorizationAsync(int operationId) {
            return base.Channel.CreatePaymentMethodsAuthorizationAsync(operationId);
        }
        
        public void CreateBankTransfersAuthorization(int operationId) {
            base.Channel.CreateBankTransfersAuthorization(operationId);
        }
        
        public System.Threading.Tasks.Task CreateBankTransfersAuthorizationAsync(int operationId) {
            return base.Channel.CreateBankTransfersAuthorizationAsync(operationId);
        }
        
        public void CreateConsortiatesAuthorization(int operationId) {
            base.Channel.CreateConsortiatesAuthorization(operationId);
        }
        
        public System.Threading.Tasks.Task CreateConsortiatesAuthorizationAsync(int operationId) {
            return base.Channel.CreateConsortiatesAuthorizationAsync(operationId);
        }
        
        public void CreateBusinessNameAuthorization(int operationId) {
            base.Channel.CreateBusinessNameAuthorization(operationId);
        }
        
        public System.Threading.Tasks.Task CreateBusinessNameAuthorizationAsync(int operationId) {
            return base.Channel.CreateBusinessNameAuthorizationAsync(operationId);
        }
        
        public void CreateGuaranteeAuthorization(int operationId) {
            base.Channel.CreateGuaranteeAuthorization(operationId);
        }
        
        public System.Threading.Tasks.Task CreateGuaranteeAuthorizationAsync(int operationId) {
            return base.Channel.CreateGuaranteeAuthorizationAsync(operationId);
        }
        
        public void CreateSarlaftAuthorization(int operationId) {
            base.Channel.CreateSarlaftAuthorization(operationId);
        }
        
        public System.Threading.Tasks.Task CreateSarlaftAuthorizationAsync(int operationId) {
            return base.Channel.CreateSarlaftAuthorizationAsync(operationId);
        }
        
        public void CreateBasicInfoAuthorization(int operationId) {
            base.Channel.CreateBasicInfoAuthorization(operationId);
        }
        
        public System.Threading.Tasks.Task CreateBasicInfoAuthorizationAsync(int operationId) {
            return base.Channel.CreateBasicInfoAuthorizationAsync(operationId);
        }
        
        public void CreateAutomaticQuotaAuthorization(int id) {
            base.Channel.CreateAutomaticQuotaAuthorization(id);
        }
        
        public System.Threading.Tasks.Task CreateAutomaticQuotaAuthorizationAsync(int id) {
            return base.Channel.CreateAutomaticQuotaAuthorizationAsync(id);
        }
    }
}
