/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.UniquePerson.AddressType.dict v1.0
 * FileSize=5653 Header=254 CRC=2688089406
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Company.Application.UniquePerson.Entities
{
    /// <summary>
    /// Definición de entidad AddressType.
    /// </summary>
    [
    PersistentClass("Sistran.Company.Application.UniquePerson.CptAddressType.dict"),
    Serializable(),
    DescriptionKey("ADDRESS_TYPE_ENTITY"),
    TableMap(TableName="ADDRESS_TYPE", Schema="UP"),
    ]
    public partial class CptAddressType :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string AddressTypeCode = "AddressTypeCode";
			public static readonly string SmallDescription = "SmallDescription";
			public static readonly string TinyDescription = "TinyDescription";
			public static readonly string IsElectronicMail = "IsElectronicMail";
		}

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="addressTypeCode">Propiedad clave AddressTypeCode.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>(int addressTypeCode)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.AddressTypeCode, addressTypeCode);

		    return new PrimaryKey<T>(keys);
	    }

		/// <summary>
		/// Crea una clave primaria para esta clase.
		/// </summary>
		/// <param name="addressTypeCode">Propiedad clave AddressTypeCode.</param>
		public static PrimaryKey CreatePrimaryKey(int addressTypeCode)
	    {
			return InternalCreatePrimaryKey<CptAddressType>(addressTypeCode);
		}
#endregion

	    //*** Object Attributes ********************************

		/// <summary>
		/// Atributo para la propiedad SmallDescription.
		/// </summary>
        private string _smallDescription = null;
		/// <summary>
		/// Atributo para la propiedad TinyDescription.
		/// </summary>
        private string _tinyDescription = null;
		/// <summary>
		/// Atributo para la propiedad IsElectronicMail.
		/// </summary>
        private bool? _isElectronicMail = null;
	    //*** Object Constructors ********************************

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="addressTypeCode">AddressTypeCode key property.</param>
	    public CptAddressType(int addressTypeCode):
			this(CptAddressType.CreatePrimaryKey(addressTypeCode), null)
	    {
	    }

		/// <summary>
		/// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
		/// </summary>
		/// <param name="key">
		/// Identificador de la instancia de la entidad.
		/// </param>
		/// <param name="initialValues">
		/// Valores para establecer el estado de la instancia.
		/// </param>
	    public CptAddressType(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad AddressTypeCode.
		/// </summary>
		/// <value>Propiedad AddressTypeCode.</value>
	    [
		DescriptionKey("ADDRESS_TYPE_CODE_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="ADDRESS_TYPE_CD", DbType=System.Data.DbType.String),
	    ]
        public int AddressTypeCode
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.AddressTypeCode];
		    }
		    set
		    {
				this._primaryKey[Properties.AddressTypeCode] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad SmallDescription.
		/// </summary>
		/// <value>Propiedad SmallDescription.</value>
	    [
		DescriptionKey("SMALL_DESCRIPTION_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="SMALL_DESCRIPTION", DbType=System.Data.DbType.String),
	    ]
        public string SmallDescription
	    {
		    get
		    {
			    return this._smallDescription;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.SmallDescription);
				}
				this._smallDescription = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad TinyDescription.
		/// </summary>
		/// <value>Propiedad TinyDescription.</value>
	    [
		DescriptionKey("TINY_DESCRIPTION_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="TINY_DESCRIPTION", DbType=System.Data.DbType.String),
	    ]
        public string TinyDescription
	    {
		    get
		    {
			    return this._tinyDescription;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.TinyDescription);
				}
				this._tinyDescription = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad IsElectronicMail.
		/// </summary>
		/// <value>Propiedad IsElectronicMail.</value>
	    [
		DescriptionKey("IS_ELECTRONIC_MAIL_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="IS_ELECTRONIC_MAIL", DbType=System.Data.DbType.String),
	    ]
        public bool? IsElectronicMail
	    {
		    get
		    {
			    return this._isElectronicMail;
		    }
		    set
		    {
				this._isElectronicMail = value;
			}
	    }

    }
}