/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Co.Colpatria.Application.Common.CptAllianceBranchSalePoint.dict v1.0
 * FileSize=5960 Header=271 CRC=2640728642
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Company.Application.UniquePerson.Entities
{
    /// <summary>
    /// Definición de entidad CptAllianceBranchSalePoint.
    /// </summary>
    [
    PersistentClass("Sistran.Company.Application.UniquePerson.CptAllianceBranchSalePoint.dict"),
    Serializable(),
    DescriptionKey("CPT_ALLIANCE_BRANCH_SALE_POINT_ENTITY"),
    TableMap(TableName = "CPT_ALLIANCE_BRANCH_SALE_POINT", Schema = "COMM"),
    ]
    public partial class CptAllianceBranchSalePoint :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string AllianceId = "AllianceId";
            public static readonly string BranchId = "BranchId";
            public static readonly string SalePointId = "SalePointId";
            public static readonly string SalePointDescription = "SalePointDescription";
        }

        //lkcardenas

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        public static new PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<CptAllianceBranchSalePoint>();
        }


        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.AllianceId, null);

            return new PrimaryKey<T>(keys);
        }


        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="allianceId">Propiedad clave AllianceId.</param>
        /// <param name="branchId">Propiedad clave BranchId.</param>
        /// <param name="salePointId">Propiedad clave SalePointId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int allianceId, int branchId, int salePointId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.AllianceId, allianceId);
            keys.Add(Properties.BranchId, branchId);
            keys.Add(Properties.SalePointId, salePointId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="allianceId">Propiedad clave AllianceId.</param>
        /// <param name="branchId">Propiedad clave BranchId.</param>
        /// <param name="salePointId">Propiedad clave SalePointId.</param>
        public static PrimaryKey CreatePrimaryKey(int allianceId, int branchId, int salePointId)
        {
            return InternalCreatePrimaryKey<CptAllianceBranchSalePoint>(allianceId, branchId, salePointId);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad SalePointDescription.
        /// </summary>
        private string _salePointDescription = null;
        //*** Object Constructors ********************************


        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves que no son autonumeradas.
        /// </summary>
        /// <returns>Primary key.</returns>
        public CptAllianceBranchSalePoint(IDictionary initialValues)
            : base(CreatePrimaryKey(), initialValues)
        { }


        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="allianceId">AllianceId key property.</param>
        /// <param name="branchId">BranchId key property.</param>
        /// <param name="salePointId">SalePointId key property.</param>
        public CptAllianceBranchSalePoint(int allianceId, int branchId, int salePointId) :
            this(CptAllianceBranchSalePoint.CreatePrimaryKey(allianceId, branchId, salePointId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public CptAllianceBranchSalePoint(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad AllianceId.
        /// </summary>
        /// <value>Propiedad AllianceId.</value>
        [
        DescriptionKey("ALLIANCE_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "ALLIANCE_ID", DbType = System.Data.DbType.String),
        ]
        public int AllianceId
        {
            get
            {
                return (int)this._primaryKey[Properties.AllianceId];
            }
            set
            {
                this._primaryKey[Properties.AllianceId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad BranchId.
        /// </summary>
        /// <value>Propiedad BranchId.</value>
        [
        DescriptionKey("BRANCH_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "BRANCH_ID", DbType = System.Data.DbType.String),
        ]
        public int BranchId
        {
            get
            {
                return (int)this._primaryKey[Properties.BranchId];
            }
            set
            {
                this._primaryKey[Properties.BranchId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad SalePointId.
        /// </summary>
        /// <value>Propiedad SalePointId.</value>
        [
        DescriptionKey("SALE_POINT_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "SALE_POINT_ID", DbType = System.Data.DbType.String),
        ]
        public int SalePointId
        {
            get
            {
                return (int)this._primaryKey[Properties.SalePointId];
            }
            set
            {
                this._primaryKey[Properties.SalePointId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad SalePointDescription.
        /// </summary>
        /// <value>Propiedad SalePointDescription.</value>
        [
        DescriptionKey("SALE_POINT_DESCRIPTION_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "SALE_POINT_DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string SalePointDescription
        {
            get
            {
                return this._salePointDescription;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.SalePointDescription);
                }
                this._salePointDescription = value;
            }
        }

    }
}