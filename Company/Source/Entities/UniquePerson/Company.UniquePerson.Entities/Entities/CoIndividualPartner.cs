/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Company.Application.UniquePerson.CoIndividualPartner.dict v1.0
 * FileSize=7366 Header=263 CRC=3693533979
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Company.Application.UniquePerson.Entities
{
    /// <summary>
    /// Definición de entidad IndividualPartner.
    /// </summary>
    [
    PersistentClass("Sistran.Company.Application.UniquePerson.CoIndividualPartner.dict"),
    Serializable(),
    DescriptionKey("CO_INDIVIDUAL_PARTNER_ENTITY"),
    TableMap(TableName="CO_INDIVIDUAL_PARTNER", Schema="UP"),
    ]
    public partial class CoIndividualPartner :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string PartnerId = "PartnerId";
			public static readonly string IdCardNo = "IdCardNo";
			public static readonly string IndividualId = "IndividualId";
			public static readonly string IdCardTypeCode = "IdCardTypeCode";
			public static readonly string Participation = "Participation";

            public static readonly string Occupation = "Occupation";
            public static readonly string IdProfileCd = "IdProfileCd";
            public static readonly string Nationality = "Nationality";
            public static readonly string SocietyHolder = "SocietyHolder";
            public static readonly string SocietyName = "SocietyName";
            public static readonly string Constitutionyear = "Constitutionyear";
            public static readonly string Address = "Address";
            public static readonly string Phone = "Phone";
            public static readonly string IdCompanyTypeCd = "IdCompanyTypeCd";

        }



        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
       /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.PartnerId, null);
            keys.Add(Properties.IndividualId, null);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey CreatePrimaryKey()
        {

            return InternalCreatePrimaryKey<CoIndividualPartner>();
        }


        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="partnerId">PartnerId key property.</param>
        /// <param name="idCardNo">IdCardNo key property.</param>
        /// <param name="individualId">IndividualId key property.</param>
        /// <param name="idCardTypeCode">IdCardTypeCode key property.</param>
        public CoIndividualPartner() :
            this(CoIndividualPartner.CreatePrimaryKey(), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public CoIndividualPartner(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }


        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad TradeName.
        /// </summary>

        private string _idCardTypeCode = null;
        private string _idCardNo = null;
        
        private string _participation = null;

        private string _occupation = null;
        private string _idProfileCd = null;
        private string _nationality = null;
        private string _societyHolder = null;
        private string _societyName = null;
        private string _constitutionyear = null;
        private string _address = null;
        private string _phone = null;
        private string _idCompanyTypeCd = null;


       

        #region
        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad PartnerId.
        /// </summary>
        /// <value>Propiedad PartnerId.</value>
        [
		DescriptionKey("PARTNER_ID_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="PARTNER_ID", DbType=System.Data.DbType.String),
	    ]
        public int PartnerId
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.PartnerId];
		    }
		    set
		    {
				this._primaryKey[Properties.PartnerId] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad IdCardNo.
		/// </summary>
		/// <value>Propiedad IdCardNo.</value>
	    [
		DescriptionKey("ID_CARD_NO_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="ID_CARD_NO", DbType=System.Data.DbType.String),
	    ]
        public string IdCardNo
	    {
		    get
		    {
				return this._idCardNo;
		    }
		    set
		    {
				this._idCardNo = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad IndividualId.
		/// </summary>
		/// <value>Propiedad IndividualId.</value>
	    [
		DescriptionKey("INDIVIDUAL_ID_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="INDIVIDUAL_ID", DbType=System.Data.DbType.String),
	    ]
        public int IndividualId
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.IndividualId];
		    }
		    set
		    {
				this._primaryKey[Properties.IndividualId] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad IdCardTypeCode.
		/// </summary>
		/// <value>Propiedad IdCardTypeCode.</value>
	    [
		DescriptionKey("ID_CARD_TYPE_CODE_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="ID_CARD_TYPE_CD", DbType=System.Data.DbType.String),
	    ]
        public int IdCardTypeCode
	    {
		    get
		    {
				return int.Parse( this._idCardTypeCode);
		    }
		    set
		    {
				this._idCardTypeCode = value.ToString();
			}
	    }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Participation.
        /// </summary>
        /// <value>Propiedad TradeName.</value>
        [
        DescriptionKey("PARTICIPATION_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName= "PARTICIPATION", DbType=System.Data.DbType.String),
	    ]
        public string Participation
        {
		    get
		    {
			    return this._participation;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.Participation);
				}
				this._participation = value;
			}
        }


        /// <summary>
        /// Devuelve o setea el valor de la propiedad Occupation
        /// </summary>
        /// <value>Propiedad TradeName.</value>
        [
        DescriptionKey("OCCUPATION_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "OCCUPATION", DbType = System.Data.DbType.String),
        ]
        public string Occupation
        {
            get
            {
                return this._occupation;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Occupation);
                }
                this._occupation = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IdProfileCd
        /// </summary>
        /// <value>Propiedad TradeName.</value>
        [
        DescriptionKey("ID_PROFILE_CD_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "ID_PROFILE_CD", DbType = System.Data.DbType.String),
        ]
        public string IdProfileCd
        {
            get
            {
                return this._idProfileCd;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.IdProfileCd);
                }
                this._idProfileCd = value;
            }
        }


        /// <summary>
        /// Devuelve o setea el valor de la propiedad Nationality
        /// </summary>
        /// <value>Propiedad TradeName.</value>
        [
        DescriptionKey("NATIONALITY_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "NATIONALITY", DbType = System.Data.DbType.String),
        ]
        public string Nationality
        {
            get
            {
                return this._nationality;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Nationality);
                }
                this._nationality = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad SocietyHolder
        /// </summary>
        /// <value>Propiedad TradeName.</value>
        [
        DescriptionKey("SOCIETY_HOLDER_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "SOCIETY_HOLDER", DbType = System.Data.DbType.String),
        ]
        public string SocietyHolder
        {
            get
            {
                return this._societyHolder;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.SocietyHolder);
                }
                this._societyHolder = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad SocietyName
        /// </summary>
        /// <value>Propiedad TradeName.</value>
        [
        DescriptionKey("SOCIETY_NANE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "SOCIETY_HOLDER", DbType = System.Data.DbType.String),
        ]
        public string SocietyName
        {
            get
            {
                return this._societyName;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.SocietyName);
                }
                this._societyName = value;
            }
        }


        /// <summary>
        /// Devuelve o setea el valor de la propiedad Constitutionyear
        /// </summary>
        /// <value>Propiedad TradeName.</value>
        [
        DescriptionKey("CONSTITUTION_YEAR_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "CONSTITUTION_YEAR", DbType = System.Data.DbType.String),
        ]
        public string Constitutionyear
        {
            get
            {
                return this._constitutionyear;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Constitutionyear);
                }
                this._constitutionyear = value;
            }
        }


        /// <summary>
        /// Devuelve o setea el valor de la propiedad Address
        /// </summary>
        /// <value>Propiedad TradeName.</value>
        [
        DescriptionKey("ADDRESS_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "ADDRESS", DbType = System.Data.DbType.String),
        ]
        public string Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Address);
                }
                this._address = value;
            }
        }


        /// <summary>
        /// Devuelve o setea el valor de la propiedad Phone
        /// </summary>
        /// <value>Propiedad TradeName.</value>
        [
        DescriptionKey("PHONE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "PHONE", DbType = System.Data.DbType.String),
        ]
        public string Phone
        {
            get
            {
                return this._phone;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Phone);
                }
                this._phone = value;
            }
        }


        /// <summary>
        /// Devuelve o setea el valor de la propiedad Phone
        /// </summary>
        /// <value>Propiedad TradeName.</value>
        [
        DescriptionKey("ID_COMPANY_TYPE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "ID_COMPANY_TYPE", DbType = System.Data.DbType.String),
        ]
        public string IdCompanyTypeCd
        {
            get
            {
                return this._idCompanyTypeCd;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.IdCompanyTypeCd);
                }
                this._idCompanyTypeCd = value;
            }
        }

        #endregion



    }
}