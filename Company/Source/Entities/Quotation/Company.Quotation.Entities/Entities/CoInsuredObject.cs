/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Company.Application.Quotation.InsuredObject.dict v1.0
 * FileSize=6955 Header=255 CRC=695569785
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Company.Application.Quotation.Entities
{
    /// <summary>
    /// Definición de entidad InsuredObject.
    /// </summary>
    [
    PersistentClass("Sistran.Company.Application.Quotation.CoInsuredObject.dict"),
    Serializable(),
    DescriptionKey("INSURED_OBJECT_ENTITY"),
    TableMap(TableName = "INSURED_OBJECT", Schema = "QUO"),
    ]
    public partial class CoInsuredObject :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string InsuredObjectId = "InsuredObjectId";
            public static readonly string Description = "Description";
            public static readonly string SmallDescription = "SmallDescription";
            public static readonly string IsDeclarative = "IsDeclarative";
            public static readonly string RequiredPeriod = "RequiredPeriod";
            public static readonly string RequiredRate = "RequiredRate";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="insuredObjectId">Propiedad clave InsuredObjectId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int insuredObjectId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.InsuredObjectId, insuredObjectId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="insuredObjectId">Propiedad clave InsuredObjectId.</param>
        public static PrimaryKey CreatePrimaryKey(int insuredObjectId)
        {
            return InternalCreatePrimaryKey<CoInsuredObject>(insuredObjectId);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad Description.
        /// </summary>
        private string _description = null;
        /// <summary>
        /// Atributo para la propiedad SmallDescription.
        /// </summary>
        private string _smallDescription = null;
        /// <summary>
        /// Atributo para la propiedad IsDeclarative.
        /// </summary>
        private bool? _isDeclarative = null;
        /// <summary>
        /// Atributo para la propiedad RequiredPeriod.
        /// </summary>
        private bool _requiredPeriod;
        /// <summary>
        /// Atributo para la propiedad RequiredRate.
        /// </summary>
        private bool _requiredRate;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="insuredObjectId">InsuredObjectId key property.</param>
        public CoInsuredObject(int insuredObjectId) :
            this(CoInsuredObject.CreatePrimaryKey(insuredObjectId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public CoInsuredObject(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad InsuredObjectId.
        /// </summary>
        /// <value>Propiedad InsuredObjectId.</value>
        [
        DescriptionKey("INSURED_OBJECT_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "INSURED_OBJECT_ID", DbType = System.Data.DbType.String),
        ]
        public int InsuredObjectId
        {
            get
            {
                return (int)this._primaryKey[Properties.InsuredObjectId];
            }
            set
            {
                this._primaryKey[Properties.InsuredObjectId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Description.
        /// </summary>
        /// <value>Propiedad Description.</value>
        [
        DescriptionKey("DESCRIPTION_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Description);
                }
                this._description = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad SmallDescription.
        /// </summary>
        /// <value>Propiedad SmallDescription.</value>
        [
        DescriptionKey("SMALL_DESCRIPTION_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "SMALL_DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string SmallDescription
        {
            get
            {
                return this._smallDescription;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.SmallDescription);
                }
                this._smallDescription = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IsDeclarative.
        /// </summary>
        /// <value>Propiedad IsDeclarative.</value>
        [
        DescriptionKey("IS_DECLARATIVE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "IS_DECLARATIVE", DbType = System.Data.DbType.String),
        ]
        public bool? IsDeclarative
        {
            get
            {
                return this._isDeclarative;
            }
            set
            {
                this._isDeclarative = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad RequiredPeriod.
        /// </summary>
        /// <value>Propiedad RequiredPeriod.</value>
        [
        DescriptionKey("REQUIRED_PERIOD_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "REQUIRED_PERIOD", DbType = System.Data.DbType.String),
        ]
        public bool RequiredPeriod
        {
            get
            {
                return this._requiredPeriod;
            }
            set
            {
                this._requiredPeriod = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad RequiredRate.
        /// </summary>
        /// <value>Propiedad RequiredRate.</value>
        [
        DescriptionKey("REQUIRED_RATE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "REQUIRED_RATE", DbType = System.Data.DbType.String),
        ]
        public bool RequiredRate
        {
            get
            {
                return this._requiredRate;
            }
            set
            {
                this._requiredRate = value;
            }
        }

    }
}