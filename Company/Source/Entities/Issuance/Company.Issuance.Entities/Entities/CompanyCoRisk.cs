/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Company.Application.Issuance.Entities.CoRisk.dict v1.0
 * FileSize=8722 Header=257 CRC=1997100891
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Company.Application.Issuance.Entities
{
    /// <summary>
    /// Definición de entidad CoRisk.
    /// </summary>
    [
    PersistentClass("Sistran.Company.Application.Issuance.CompanyCoRisk.dict"),
    Serializable(),
    DescriptionKey("CO_RISK_ENTITY"),
    TableMap(TableName = "CO_RISK", Schema = "ISS"),
    ]
    public partial class CompanyCoRisk :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string RiskId = "RiskId";
            public static readonly string LimitsRcCode = "LimitsRcCode";
            public static readonly string LimitRcSum = "LimitRcSum";
            public static readonly string Retention = "Retention";
            public static readonly string SinisterPercentage = "SinisterPercentage";
            public static readonly string HasSinister = "HasSinister";
            public static readonly string AssistanceCode = "AssistanceCode";
            public static readonly string SinisterQuantity = "SinisterQuantity";
            public static readonly string ActualDateMovement = "ActualDateMovement";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="riskId">Propiedad clave RiskId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int riskId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.RiskId, riskId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="riskId">Propiedad clave RiskId.</param>
        public static PrimaryKey CreatePrimaryKey(int riskId)
        {
            return InternalCreatePrimaryKey<CompanyCoRisk>(riskId);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad LimitsRcCode.
        /// </summary>
        private int? _limitsRcCode = null;
        /// <summary>
        /// Atributo para la propiedad LimitRcSum.
        /// </summary>
        private decimal? _limitRcSum = null;
        /// <summary>
        /// Atributo para la propiedad 100Retention.
        /// </summary>
        private bool? _Retention = null;
        /// <summary>
        /// Atributo para la propiedad SinisterPercentage.
        /// </summary>
        private decimal? _sinisterPercentage = null;
        /// <summary>
        /// Atributo para la propiedad HasSinister.
        /// </summary>
        private bool? _hasSinister = null;
        /// <summary>
        /// Atributo para la propiedad AssistanceCode.
        /// </summary>
        private int? _assistanceCode = null;
        /// <summary>
        /// Atributo para la propiedad SinisterQuantity.
        /// </summary>
        private int? _sinisterQuantity = null;
        /// <summary>
        /// Atributo para la propiedad ActualDateMovement.
        /// </summary>
        private DateTime? _actualDateMovement = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="riskId">RiskId key property.</param>
        public CompanyCoRisk(int riskId) :
            this(CompanyCoRisk.CreatePrimaryKey(riskId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public CompanyCoRisk(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad RiskId.
        /// </summary>
        /// <value>Propiedad RiskId.</value>
        [
        DescriptionKey("RISK_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "RISK_ID", DbType = System.Data.DbType.String),
        ]
        public int RiskId
        {
            get
            {
                return (int)this._primaryKey[Properties.RiskId];
            }
            set
            {
                this._primaryKey[Properties.RiskId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad LimitsRcCode.
        /// </summary>
        /// <value>Propiedad LimitsRcCode.</value>
        [
        DescriptionKey("LIMITS_RC_CODE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "LIMITS_RC_CD", DbType = System.Data.DbType.String),
        ]
        public int? LimitsRcCode
        {
            get
            {
                return this._limitsRcCode;
            }
            set
            {
                this._limitsRcCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad LimitRcSum.
        /// </summary>
        /// <value>Propiedad LimitRcSum.</value>
        [
        DescriptionKey("LIMIT_RC_SUM_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "LIMIT_RC_SUM", DbType = System.Data.DbType.Decimal),
        ]
        public decimal? LimitRcSum
        {
            get
            {
                return this._limitRcSum;
            }
            set
            {
                this._limitRcSum = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad 100Retention.
        /// </summary>
        /// <value>Propiedad 100Retention.</value>
        [
        DescriptionKey("100_RETENTION_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "100_RETENTION", DbType = System.Data.DbType.String),
        ]
        public bool? Retention
        {
            get
            {
                return this._Retention;
            }
            set
            {

                this._Retention = value;

            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad SinisterPercentage.
        /// </summary>
        /// <value>Propiedad SinisterPercentage.</value>
        [
        DescriptionKey("SINISTER_PERCENTAGE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "SINISTER_PCT", DbType = System.Data.DbType.Decimal),
        ]
        public decimal? SinisterPercentage
        {
            get
            {
                return this._sinisterPercentage;
            }
            set
            {
                this._sinisterPercentage = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad HasSinister.
        /// </summary>
        /// <value>Propiedad HasSinister.</value>
        [
        DescriptionKey("HAS_SINISTER_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "HAS_SINISTER", DbType = System.Data.DbType.String),
        ]
        public bool? HasSinister
        {
            get
            {
                return this._hasSinister;
            }
            set
            {
                this._hasSinister = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad AssistanceCode.
        /// </summary>
        /// <value>Propiedad AssistanceCode.</value>
        [
        DescriptionKey("ASSISTANCE_CODE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "ASSISTANCE_CD", DbType = System.Data.DbType.String),
        ]
        public int? AssistanceCode
        {
            get
            {
                return this._assistanceCode;
            }
            set
            {
                this._assistanceCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad SinisterQuantity.
        /// </summary>
        /// <value>Propiedad SinisterQuantity.</value>
        [
        DescriptionKey("SINISTER_QUANTITY_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "SINISTER_QTY", DbType = System.Data.DbType.String),
        ]
        public int? SinisterQuantity
        {
            get
            {
                return this._sinisterQuantity;
            }
            set
            {
                this._sinisterQuantity = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ActualDateMovement.
        /// </summary>
        /// <value>Propiedad ActualDateMovement.</value>
        [
        DescriptionKey("ACTUAL_DATE_MOVEMENT_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "ACTUAL_DATE_MOVEMENT", DbType = System.Data.DbType.String),
        ]
        public DateTime? ActualDateMovement
        {
            get
            {
                return this._actualDateMovement;
            }
            set
            {
                this._actualDateMovement = value;
            }
        }

    }
}