/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Company.Application.Common.IrregularHeightEarthquake.dict v1.0
 * FileSize=6257 Header=237 CRC=1285604265
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Company.Application.Common.Entities
{
    /// <summary>
    /// Definición de entidad IrregularHeightEarthquake.
    /// </summary>
    [
    PersistentClass("Sistran.Company.Application.Common.IrregularHeightEarthquake.dict"),
    Serializable(),
    DescriptionKey("IRREGULAR_HEIGHT_EARTHQUAKE_ENTITY"),
    TableMap(TableName="IRREGULAR_HEIGHT_EARTHQUAKE", Schema="COMM"),
    ]
    public partial class IrregularHeightEarthquake :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string IrregularHeightCode = "IrregularHeightCode";
			public static readonly string Description = "Description";
			public static readonly string IsEnabled = "IsEnabled";
			public static readonly string UserCode = "UserCode";
			public static readonly string DateModified = "DateModified";
		}

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="irregularHeightCode">Propiedad clave IrregularHeightCode.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>(decimal irregularHeightCode)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.IrregularHeightCode, irregularHeightCode);

		    return new PrimaryKey<T>(keys);
	    }

		/// <summary>
		/// Crea una clave primaria para esta clase.
		/// </summary>
		/// <param name="irregularHeightCode">Propiedad clave IrregularHeightCode.</param>
		public static PrimaryKey CreatePrimaryKey(decimal irregularHeightCode)
	    {
			return InternalCreatePrimaryKey<IrregularHeightEarthquake>(irregularHeightCode);
		}
#endregion

	    //*** Object Attributes ********************************

		/// <summary>
		/// Atributo para la propiedad Description.
		/// </summary>
        private string _description = null;
		/// <summary>
		/// Atributo para la propiedad IsEnabled.
		/// </summary>
        private bool _isEnabled;
		/// <summary>
		/// Atributo para la propiedad UserCode.
		/// </summary>
        private string _userCode = null;
		/// <summary>
		/// Atributo para la propiedad DateModified.
		/// </summary>
        private DateTime _dateModified;
	    //*** Object Constructors ********************************

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="irregularHeightCode">IrregularHeightCode key property.</param>
	    public IrregularHeightEarthquake(decimal irregularHeightCode):
			this(IrregularHeightEarthquake.CreatePrimaryKey(irregularHeightCode), null)
	    {
	    }

		/// <summary>
		/// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
		/// </summary>
		/// <param name="key">
		/// Identificador de la instancia de la entidad.
		/// </param>
		/// <param name="initialValues">
		/// Valores para establecer el estado de la instancia.
		/// </param>
	    public IrregularHeightEarthquake(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad IrregularHeightCode.
		/// </summary>
		/// <value>Propiedad IrregularHeightCode.</value>
	    [
		DescriptionKey("IRREGULAR_HEIGHT_CODE_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="IRREGULAR_HEIGHT_CD", DbType=System.Data.DbType.Decimal),
	    ]
        public decimal IrregularHeightCode
	    {
		    get
		    {
				return (decimal)this._primaryKey[Properties.IrregularHeightCode];
		    }
		    set
		    {
				this._primaryKey[Properties.IrregularHeightCode] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Description.
		/// </summary>
		/// <value>Propiedad Description.</value>
	    [
		DescriptionKey("DESCRIPTION_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="DESCRIPTION", DbType=System.Data.DbType.String),
	    ]
        public string Description
	    {
		    get
		    {
			    return this._description;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.Description);
				}
				this._description = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad IsEnabled.
		/// </summary>
		/// <value>Propiedad IsEnabled.</value>
	    [
		DescriptionKey("IS_ENABLED_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="IS_ENABLED", DbType=System.Data.DbType.String),
	    ]
        public bool IsEnabled
	    {
		    get
		    {
			    return this._isEnabled;
		    }
		    set
		    {
				this._isEnabled = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad UserCode.
		/// </summary>
		/// <value>Propiedad UserCode.</value>
	    [
		DescriptionKey("USER_CODE_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="USER_CD", DbType=System.Data.DbType.String),
	    ]
        public string UserCode
	    {
		    get
		    {
			    return this._userCode;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.UserCode);
				}
				this._userCode = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad DateModified.
		/// </summary>
		/// <value>Propiedad DateModified.</value>
	    [
		DescriptionKey("DATE_MODIFIED_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="DATE_MODIFIED", DbType=System.Data.DbType.String),
	    ]
        public DateTime DateModified
	    {
		    get
		    {
			    return this._dateModified;
		    }
		    set
		    {
				this._dateModified = value;
			}
	    }

    }
}