/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Company.Application.CommonServices.CptBranchAlliance.dict v1.0
 * FileSize=4895 Header=261 CRC=358128066
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Company.Application.Common.Entities
{
    /// <summary>
    /// Definición de entidad CptBranchAlliance.
    /// </summary>
    [
    PersistentClass("Sistran.Company.Application.Common.CptBranchAlliance.dict"),
    Serializable(),
    DescriptionKey("CPT_BRANCH_ALLIANCE_ENTITY"),
    TableMap(TableName="CPT_BRANCH_ALLIANCE", Schema="COMM"),
    ]
    public partial class CptBranchAlliance :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string BranchId = "BranchId";
            public static readonly string BranchDescription = "BranchDescription";
            public static readonly string AllianceId = "AllianceId";
            public static readonly string DivipolaID = "CityCD";
            public static readonly string CountryCD = "CountryCD";
            public static readonly string StateCD = "StateCD";
        }

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="branchId">Propiedad clave BranchId.</param>
		/// <param name="allianceId">Propiedad clave AllianceId.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>(int branchId, int allianceId)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.BranchId, branchId);
		    keys.Add(Properties.AllianceId, allianceId);

		    return new PrimaryKey<T>(keys);
	    }

		/// <summary>
		/// Crea una clave primaria para esta clase.
		/// </summary>
		/// <param name="branchId">Propiedad clave BranchId.</param>
		/// <param name="allianceId">Propiedad clave AllianceId.</param>
		public static PrimaryKey CreatePrimaryKey(int branchId, int allianceId)
	    {
			return InternalCreatePrimaryKey<CptBranchAlliance>(branchId, allianceId);
		}
        
        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<CptBranchAlliance>();
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.BranchId, null);

            return new PrimaryKey<T>(keys);
        }

#endregion

	    //*** Object Attributes ********************************

		/// <summary>
		/// Atributo para la propiedad BranchDescription.
		/// </summary>
        private string _branchDescription = null;

        /*TODO: MMTO - Control de cambios Aliados * Autor: Luis Montaño * Fecha: 2013-06-26*/
       
        /// <summary>
        /// Atributo para la propiedad CityCD.
        /// </summary>
        private int? _CityCD = null;
        
        /// <summary>
        /// Atributo para la propiedad CountryCD.
        /// </summary>
        private int? _CountryCD = null;
        
        /// <summary>
        /// Atributo para la propiedad StateCD.
        /// </summary>
        private int? _StateCD = null;
        /*FIN MMTO Autor: Luis Montaño * Fecha: 2013-06-26*/

        //*** Object Constructors ********************************

		/// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves que no son autonumeradas.
        /// </summary>
        /// <returns>Primary key.</returns>
        public CptBranchAlliance(IDictionary initialValues)
            : base(CreatePrimaryKey(), initialValues)
        { }       
        
        /// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="branchId">BranchId key property.</param>
		/// <param name="allianceId">AllianceId key property.</param>
	    public CptBranchAlliance(int branchId, int allianceId):
			this(CptBranchAlliance.CreatePrimaryKey(branchId, allianceId), null)
	    {
	    }

		/// <summary>
		/// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
		/// </summary>
		/// <param name="key">
		/// Identificador de la instancia de la entidad.
		/// </param>
		/// <param name="initialValues">
		/// Valores para establecer el estado de la instancia.
		/// </param>
	    public CptBranchAlliance(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad BranchId.
		/// </summary>
		/// <value>Propiedad BranchId.</value>
	    [
		DescriptionKey("BRANCH_ID_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="BRANCH_ID", DbType=System.Data.DbType.String),
	    ]
        public int BranchId
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.BranchId];
		    }
		    set
		    {
				this._primaryKey[Properties.BranchId] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad BranchDescription.
		/// </summary>
		/// <value>Propiedad BranchDescription.</value>
	    [
		DescriptionKey("BRANCH_DESCRIPTION_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="BRANCH_DESCRIPTION", DbType=System.Data.DbType.String),
	    ]
        public string BranchDescription
	    {
		    get
		    {
			    return this._branchDescription;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.BranchDescription);
				}
				this._branchDescription = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad AllianceId.
		/// </summary>
		/// <value>Propiedad AllianceId.</value>
	    [
		DescriptionKey("ALLIANCE_ID_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="ALLIANCE_ID", DbType=System.Data.DbType.String),
	    ]
        public int AllianceId
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.AllianceId];
		    }
		    set
		    {
				this._primaryKey[Properties.AllianceId] = value;
			}
	    }

        /*TODO: MMTO - Control de cambios Aliados * Autor: Luis Montaño * Fecha: 2013-06-26*/
        

        /// <summary>
        /// Devuelve o setea el valor de la propiedad CityCD.
        /// </summary>
        /// <value>Propiedad CityCD.</value>
        [
        DescriptionKey("CITY_CD_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "CITY_CD", DbType = System.Data.DbType.Int16)
        ]
        public int? CityCD
        {
            get
            {
                return this._CityCD;
            }
            set
            {

                this._CityCD = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad CountryCD.
        /// </summary>
        /// <value>Propiedad CountryCD.</value>
        [
        DescriptionKey("COUNTRY_CD_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "COUNTRY_CD", DbType = System.Data.DbType.Int16)
        ]
        public int? CountryCD
        {
            get
            {
                return this._CountryCD;
            }
            set
            {

                this._CountryCD = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad StateCD.
        /// </summary>
        /// <value>Propiedad StateCD.</value>
        [
        DescriptionKey("STATE_CD_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "STATE_CD", DbType = System.Data.DbType.Int16)
        ]
        public int? StateCD
        {
            get
            {
                return this._StateCD;
            }
            set
            {

                this._StateCD = value;
            }
        }


        /*FIN MMTO Autor: Luis Montaño * Fecha: 2013-06-26*/
    }
}