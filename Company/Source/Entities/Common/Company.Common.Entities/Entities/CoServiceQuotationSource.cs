/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Company.Application.CommonServices.EEProvider.CoServiceQuotationSource.dict v1.0
 * FileSize=5168 Header=259 CRC=3237574175
 ******************************************/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System.Collections;

namespace Sistran.Company.Application.Common.Entities
{
    /// <summary>
    /// Definición de entidad CoServiceQuotationSource.
    /// </summary>
    [
    PersistentClass("Sistran.Company.Application.Common.CoServiceQuotationSource.dict"),
    Serializable(),
    DescriptionKey("CO_SERVICE_QUOTATION_SOURCE_ENTITY"),
    TableMap(TableName = "CO_SERVICE_QUOTATION_SOURCE", Schema = "COMM"),
    ]
    public partial class CoServiceQuotationSource :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string SourceCode = "SourceCode";
            public static readonly string Description = "Description";
            public static readonly string Comments = "Comments";
            public static readonly string IsEnabled = "IsEnabled";
            public static readonly string DetailDescription = "DetailDescription";
            public static readonly string IsScore = "IsScore";
            public static readonly string IsFine = "IsFine";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="sourceCode">Propiedad clave SourceCode.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int sourceCode)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.SourceCode, sourceCode);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="sourceCode">Propiedad clave SourceCode.</param>
        public static PrimaryKey CreatePrimaryKey(int sourceCode)
        {
            return InternalCreatePrimaryKey<CoServiceQuotationSource>(sourceCode);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad Description.
        /// </summary>
        private string _description = null;
        /// <summary>
        /// Atributo para la propiedad Comments.
        /// </summary>
        private string _comments = null;
        /// <summary>
        /// Atributo para la propiedad IsEnabled.
        /// </summary>
        private bool _isEnabled;

        /// <summary>
        /// Atributo para la propiedad DetailDescription.
        /// </summary>
        private string _detailDescription = null;
        /// <summary>
        /// Atributo para la propiedad IsScore.
        /// </summary>
        private bool? _isScore = null;
        /// <summary>
        /// Atributo para la propiedad IsFine.
        /// </summary>
        private bool? _isFine = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="sourceCode">SourceCode key property.</param>
        public CoServiceQuotationSource(int sourceCode) :
            this(CoServiceQuotationSource.CreatePrimaryKey(sourceCode), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public CoServiceQuotationSource(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad SourceCode.
        /// </summary>
        /// <value>Propiedad SourceCode.</value>
        [
        DescriptionKey("SOURCE_CODE_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "SOURCE_CD", DbType = System.Data.DbType.String),
        ]
        public int SourceCode
        {
            get
            {
                return (int)this._primaryKey[Properties.SourceCode];
            }
            set
            {
                this._primaryKey[Properties.SourceCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Description.
        /// </summary>
        /// <value>Propiedad Description.</value>
        [
        DescriptionKey("DESCRIPTION_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Comments.
        /// </summary>
        /// <value>Propiedad Comments.</value>
        [
        DescriptionKey("COMMENTS_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "COMMENTS", DbType = System.Data.DbType.String),
        ]
        public string Comments
        {
            get
            {
                return this._comments;
            }
            set
            {
                this._comments = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IsEnabled.
        /// </summary>
        /// <value>Propiedad IsEnabled.</value>
        [
        DescriptionKey("IS_ENABLED_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "IS_ENABLED", DbType = System.Data.DbType.String),
        ]
        public bool IsEnabled
        {
            get
            {
                return this._isEnabled;
            }
            set
            {
                this._isEnabled = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad DetailDescription.
        /// </summary>
        /// <value>Propiedad DetailDescription.</value>
        [
        DescriptionKey("DETAIL_DESCRIPTION_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "DETAIL_DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string DetailDescription
        {
            get
            {
                return this._detailDescription;
            }
            set
            {
                this._detailDescription = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IsScore.
        /// </summary>
        /// <value>Propiedad IsScore.</value>
        [
        DescriptionKey("IS_SCORE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "IS_SCORE", DbType = System.Data.DbType.String),
        ]
        public bool? IsScore
        {
            get
            {
                return this._isScore;
            }
            set
            {
                this._isScore = value;
            }
        }
        /// <summary>
        /// Devuelve o setea el valor de la propiedad IsFine.
        /// </summary>
        /// <value>Propiedad IsFine.</value>
        [
        DescriptionKey("IS_FINE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "IS_FINE", DbType = System.Data.DbType.String),
        ]
        public bool? IsFine
        {
            get
            {
                return this._isFine;
            }
            set
            {
                this._isFine = value;
            }
        }

    }
}
