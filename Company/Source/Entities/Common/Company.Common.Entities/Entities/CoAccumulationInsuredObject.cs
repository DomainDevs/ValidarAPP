/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Co.Application.Products.CoAccumulationInsuredObject.dict v1.0
 * FileSize=5125 Header=264 CRC=2374366422
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Company.Application.Common.Entities
{
    /// <summary>
    /// Definición de entidad CoAccumulationInsuredObject.
    /// </summary>
    [
    PersistentClass("Sistran.Company.Application.Common.CoAccumulationInsuredObject.dict"),
    Serializable(),
    DescriptionKey("CO_ACCUMULATION_INSURED_OBJECT_ENTITY"),
    TableMap(TableName="CO_ACCUMULATION_INSURED_OBJECT", Schema="PROD"),
    ]
    public partial class CoAccumulationInsuredObject :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string ProductId = "ProductId";
			public static readonly string InsuredObjectId = "InsuredObjectId";
			public static readonly string ConceptId = "ConceptId";
            public static readonly string EntityId = "EntityId";
		}

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="productId">Propiedad clave ProductId.</param>
		/// <param name="insuredObjectId">Propiedad clave InsuredObjectId.</param>
		/// <param name="conceptId">Propiedad clave ConceptId.</param>
		/// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int productId, int insuredObjectId, int conceptId, int entityId)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.ProductId, productId);
		    keys.Add(Properties.InsuredObjectId, insuredObjectId);
		    keys.Add(Properties.ConceptId, conceptId);
            keys.Add(Properties.EntityId, entityId);
		    return new PrimaryKey<T>(keys);
	    }

		/// <summary>
		/// Crea una clave primaria para esta clase.
		/// </summary>
		/// <param name="productId">Propiedad clave ProductId.</param>
		/// <param name="insuredObjectId">Propiedad clave InsuredObjectId.</param>
		/// <param name="conceptId">Propiedad clave ConceptId.</param>
		public static PrimaryKey CreatePrimaryKey(int productId, int insuredObjectId, int conceptId, int entityId)
	    {
			return InternalCreatePrimaryKey<CoAccumulationInsuredObject>(productId, insuredObjectId, conceptId, entityId);
		}
#endregion

	    //*** Object Attributes ********************************

	    //*** Object Constructors ********************************

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="productId">ProductId key property.</param>
		/// <param name="insuredObjectId">InsuredObjectId key property.</param>
		/// <param name="conceptId">ConceptId key property.</param>
	    public CoAccumulationInsuredObject(int productId, int insuredObjectId, int conceptId, int entityId):
            this(CoAccumulationInsuredObject.CreatePrimaryKey(productId, insuredObjectId, conceptId, entityId), null)
	    {
	    }

		/// <summary>
		/// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
		/// </summary>
		/// <param name="key">
		/// Identificador de la instancia de la entidad.
		/// </param>
		/// <param name="initialValues">
		/// Valores para establecer el estado de la instancia.
		/// </param>
	    public CoAccumulationInsuredObject(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad ProductId.
		/// </summary>
		/// <value>Propiedad ProductId.</value>
	    [
		DescriptionKey("PRODUCT_ID_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="PRODUCT_ID", DbType=System.Data.DbType.String),
	    ]
        public int ProductId
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.ProductId];
		    }
		    set
		    {
				this._primaryKey[Properties.ProductId] = value;
			}
	    }



        /// <summary>
        /// Devuelve o setea el valor de la propiedad ProductId.
        /// </summary>
        /// <value>Propiedad ProductId.</value>
        [
        DescriptionKey("ENTITY_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "ENTITY_ID", DbType = System.Data.DbType.String),
        ]
        public int EntityId
        {
            get
            {
                return (int)this._primaryKey[Properties.EntityId];
            }
            set
            {
                this._primaryKey[Properties.EntityId] = value;
            }
        }



		/// <summary>
		/// Devuelve o setea el valor de la propiedad InsuredObjectId.
		/// </summary>
		/// <value>Propiedad InsuredObjectId.</value>
	    [
		DescriptionKey("INSURED_OBJECT_ID_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="INSURED_OBJECT_ID", DbType=System.Data.DbType.String),
	    ]
        public int InsuredObjectId
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.InsuredObjectId];
		    }
		    set
		    {
				this._primaryKey[Properties.InsuredObjectId] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad ConceptId.
		/// </summary>
		/// <value>Propiedad ConceptId.</value>
	    [
		DescriptionKey("CONCEPT_ID_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="CONCEPT_ID", DbType=System.Data.DbType.String),
	    ]
        public int ConceptId
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.ConceptId];
		    }
		    set
		    {
				this._primaryKey[Properties.ConceptId] = value;
			}
	    }

    }
}