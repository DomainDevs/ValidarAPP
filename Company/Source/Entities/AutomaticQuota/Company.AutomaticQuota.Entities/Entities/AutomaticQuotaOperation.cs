/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Company.Application.AutomaticQuota.AutomaticQuotaOperation.dict v1.0
 * FileSize=6491 Header=271 CRC=3008405309
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Company.Application.AutomaticQuota.Entities
{
    /// <summary>
    /// Definición de entidad AutomaticQuotaOperation.
    /// </summary>
    [
    PersistentClass("Sistran.Company.Application.AutomaticQuota.Entities.AutomaticQuotaOperation.dict"),
    Serializable(),
    DescriptionKey("AUTOMATIC_QUOTA_OPERATION_ENTITY"),
    TableMap(TableName="AUTOMATIC_QUOTA_OPERATION", Schema="AQ"),
    ]
    public partial class AutomaticQuotaOperation :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string Id = "Id";
			public static readonly string ParentId = "ParentId";
            public static readonly string AutomaticOperationType = "AutomaticOperationType";
            public static readonly string User = "User";
			public static readonly string CreationDate = "CreationDate";
			public static readonly string ModificationDate = "ModificationDate";
			public static readonly string Operation = "Operation";
		}

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="id">Propiedad clave Id.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>(int id)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.Id, id);

		    return new PrimaryKey<T>(keys);
	    }

        /// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="id">Propiedad clave Id.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.Id, null);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="id">Propiedad clave Id.</param>
        public static PrimaryKey CreatePrimaryKey(int id)
	    {
			return InternalCreatePrimaryKey<AutomaticQuotaOperation>(id);
		}

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="id">Propiedad clave Id.</param>
        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<AutomaticQuotaOperation>();
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad ParentId.
        /// </summary>
        private int? _parentId = null;
        /// <summary>
        /// Atributo para la propiedad AutomaticOperationType.
        /// </summary>
        private int? _automaticOperationType ;
        /// <summary>
		/// Atributo para la propiedad User.
		/// </summary>
        private int? _user = null;
		/// <summary>
		/// Atributo para la propiedad CreationDate.
		/// </summary>
        private DateTime _creationDate;
		/// <summary>
		/// Atributo para la propiedad ModificationDate.
		/// </summary>
        private DateTime? _modificationDate = null;
		/// <summary>
		/// Atributo para la propiedad Operation.
		/// </summary>
        private string _operation = null;
	    //*** Object Constructors ********************************

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="id">Id key property.</param>
	    public AutomaticQuotaOperation(int id):
			this(AutomaticQuotaOperation.CreatePrimaryKey(id), null)
	    {
	    }

        public AutomaticQuotaOperation() :
            this(AutomaticQuotaOperation.CreatePrimaryKey(), null)
        {
        }
        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public AutomaticQuotaOperation(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad Id.
		/// </summary>
		/// <value>Propiedad Id.</value>
	    [
		DescriptionKey("ID_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="ID", DbType=System.Data.DbType.String),
	    ]
        public int Id
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.Id];
		    }
		    set
		    {
				this._primaryKey[Properties.Id] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad ParentId.
		/// </summary>
		/// <value>Propiedad ParentId.</value>
	    [
		DescriptionKey("PARENT_ID_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="PARENT_ID", DbType=System.Data.DbType.String),
	    ]
        public int? ParentId
	    {
		    get
		    {
			    return this._parentId;
		    }
		    set
		    {
				this._parentId = value;
			}
	    }
        /// <summary>
		/// Devuelve o setea el valor de la propiedad User.
		/// </summary>
		/// <value>Propiedad User.</value>
	    [
        DescriptionKey("AUTOMATIC_OPERATION_TYPE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "AUTOMATIC_OPERATION_TYPE", DbType = System.Data.DbType.String),
        ]
        public int? AutomaticOperationType
        {
            get
            {
                return this._automaticOperationType;
            }
            set
            {
                this._automaticOperationType = value;
            }
        }
        /// <summary>
        /// Devuelve o setea el valor de la propiedad User.
        /// </summary>
        /// <value>Propiedad User.</value>
        [
		DescriptionKey("USER_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="USER", DbType=System.Data.DbType.String),
	    ]
        public int? User
	    {
		    get
		    {
			    return this._user;
		    }
		    set
		    {
				this._user = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad CreationDate.
		/// </summary>
		/// <value>Propiedad CreationDate.</value>
	    [
		DescriptionKey("CREATION_DATE_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="CREATION_DATE", DbType=System.Data.DbType.String),
	    ]
        public DateTime CreationDate
	    {
		    get
		    {
			    return this._creationDate;
		    }
		    set
		    {
				this._creationDate = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad ModificationDate.
		/// </summary>
		/// <value>Propiedad ModificationDate.</value>
	    [
		DescriptionKey("MODIFICATION_DATE_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="MODIFICATION_DATE", DbType=System.Data.DbType.String),
	    ]
        public DateTime? ModificationDate
	    {
		    get
		    {
			    return this._modificationDate;
		    }
		    set
		    {
				this._modificationDate = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Operation.
		/// </summary>
		/// <value>Propiedad Operation.</value>
	    [
		DescriptionKey("OPERATION_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="OPERATION", DbType=System.Data.DbType.String),
	    ]
        public string Operation
	    {
		    get
		    {
			    return this._operation;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.Operation);
				}
				this._operation = value;
			}
	    }

    }
}