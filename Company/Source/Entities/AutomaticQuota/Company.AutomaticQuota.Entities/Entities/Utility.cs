/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Company.Application.AutomaticQuota.Entities.Utility.dict v1.0
 * FileSize=5121 Header=263 CRC=992889084
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Company.Application.AutomaticQuota.Entities
{
    /// <summary>
    /// Definición de entidad Utility.
    /// </summary>
    [
    PersistentClass("Sistran.Company.Application.AutomaticQuota.Entities.Utility.dict"),
    Serializable(),
    DescriptionKey("UTILITY_ENTITY"),
    TableMap(TableName="UTILITY", Schema="AQ"),
    ]
    public partial class Utility :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string UtilityCode = "UtilityCode";
            public static readonly string AutomaticQuotaCode = "AutomaticQuotaCode";
            public static readonly string UtilityDetailsCode = "UtilityDetailsCode";
			public static readonly string StartValue = "StartValue";
			public static readonly string EndValue = "EndValue";
            public static readonly string AbsoluteValue = "StartValue";
            public static readonly string RelativeValue = "EndValue";
        }

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="utilityCode">Propiedad clave UtilityCode.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>(int utilityCode)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.UtilityCode, utilityCode);

		    return new PrimaryKey<T>(keys);
	    }

        /// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="utilityCode">Propiedad clave UtilityCode.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.UtilityCode, null);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="utilityCode">Propiedad clave UtilityCode.</param>
        public static PrimaryKey CreatePrimaryKey(int utilityCode)
	    {
			return InternalCreatePrimaryKey<Utility>(utilityCode);
		}

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="utilityCode">Propiedad clave UtilityCode.</param>
        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<Utility>();
        }
        #endregion

        //*** Object Attributes ********************************
        /// <summary>
        /// Atributo para la propiedad AutomaticQuotaCode.
        /// </summary>
        private int _automaticQuotaCode;
        /// <summary>
        /// Atributo para la propiedad UtilityDetailsCode.
        /// </summary>
        private int _utilityDetailsCode;
		/// <summary>
		/// Atributo para la propiedad StartValue.
		/// </summary>
        private decimal _startValue;
		/// <summary>
		/// Atributo para la propiedad EndValue.
		/// </summary>
        private decimal _endValue;
        /// <summary>
		/// Atributo para la propiedad AbsoluteValue.
		/// </summary>
        private decimal _absoluteValue;
        /// <summary>
        /// Atributo para la propiedad RelativeValue.
        /// </summary>
        private decimal _relativeValue;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="utilityCode">UtilityCode key property.</param>
        public Utility(int utilityCode):
			this(Utility.CreatePrimaryKey(utilityCode), null)
	    {
	    }

        /// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="utilityCode">UtilityCode key property.</param>
	    public Utility() :
            this(Utility.CreatePrimaryKey(), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public Utility(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad AutomaticQuotaCode.
        /// </summary>
        /// <value>Propiedad AutomaticQuotaCode.</value>
        [
        DescriptionKey("AUTOMATIC_QUOTA_CODE_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "AUTOMATIC_QUOTA_CD", DbType = System.Data.DbType.String),
        ]
        public int AutomaticQuotaCode
        {
            get
            {
                return this._automaticQuotaCode;
            }
            set
            {
                this._automaticQuotaCode = value;
            }
        }
        /// <summary>
        /// Devuelve o setea el valor de la propiedad UtilityCode.
        /// </summary>
        /// <value>Propiedad UtilityCode.</value>
        [
		DescriptionKey("UTILITY_CODE_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="UTILITY_CD", DbType=System.Data.DbType.String),
	    ]
        public int UtilityCode
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.UtilityCode];
		    }
		    set
		    {
				this._primaryKey[Properties.UtilityCode] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad UtilityDetailsCode.
		/// </summary>
		/// <value>Propiedad UtilityDetailsCode.</value>
	    [
		DescriptionKey("UTILITY_DETAILS_CODE_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="UTILITY_DETAILS_CD", DbType=System.Data.DbType.String),
	    ]
        public int UtilityDetailsCode
	    {
		    get
		    {
			    return this._utilityDetailsCode;
		    }
		    set
		    {
				this._utilityDetailsCode = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad StartValue.
		/// </summary>
		/// <value>Propiedad StartValue.</value>
	    [
		DescriptionKey("START_VALUE_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="START_VALUE", DbType=System.Data.DbType.Decimal),
	    ]
        public decimal StartValue
	    {
		    get
		    {
			    return this._startValue;
		    }
		    set
		    {
				this._startValue = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad EndValue.
		/// </summary>
		/// <value>Propiedad EndValue.</value>
	    [
		DescriptionKey("END_VALUE_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="END_VALUE", DbType=System.Data.DbType.Decimal),
	    ]
        public decimal EndValue
	    {
		    get
		    {
			    return this._endValue;
		    }
		    set
		    {
				this._endValue = value;
			}
	    }

        /// <summary>
		/// Devuelve o setea el valor de la propiedad AbsoluteValue.
		/// </summary>
		/// <value>Propiedad StartValue.</value>
	    [
        DescriptionKey("ABSOLUTE_VALUE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "ABSOLUTE_VALUE", DbType = System.Data.DbType.Decimal),
        ]
        public decimal AbsoluteValue
        {
            get
            {
                return this._absoluteValue;
            }
            set
            {
                this._absoluteValue = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad EndValue.
        /// </summary>
        /// <value>Propiedad EndValue.</value>
        [
        DescriptionKey("RELATIVE_VALUE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "RELATIVE_VALUE", DbType = System.Data.DbType.Decimal),
        ]
        public decimal RelativeValue
        {
            get
            {
                return this._relativeValue;
            }
            set
            {
                this._relativeValue = value;
            }
        }
    }
}