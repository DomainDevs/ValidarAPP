/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Company.Application.AutomaticQuota.Entities.Indicator.dict v1.0
 * FileSize=5930 Header=265 CRC=162584462
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Company.Application.AutomaticQuota.Entities
{
    /// <summary>
    /// Definición de entidad Indicator.
    /// </summary>
    [
    PersistentClass("Sistran.Company.Application.AutomaticQuota.Entities.Indicator.dict"),
    Serializable(),
    DescriptionKey("INDICATOR_ENTITY"),
    TableMap(TableName = "INDICATOR", Schema = "AQ"),
    ]
    public partial class Indicator :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string IndicatorCode = "IndicatorCode";
            public static readonly string IndicatorTypeCode = "IndicatorTypeCode";
            public static readonly string IndicatorConceptCode = "IndicatorConceptCode";
            public static readonly string AutomaticQuotaCode = "AutomaticQuotaCode";
            public static readonly string StartValue = "StartValue";
            public static readonly string EndValue = "EndValue";
            public static readonly string Observation = "Observation";

        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="indicatorCode">Propiedad clave IndicatorCode.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int indicatorCode)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.IndicatorCode, indicatorCode);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="indicatorCode">Propiedad clave IndicatorCode.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.IndicatorCode, null);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="indicatorCode">Propiedad clave IndicatorCode.</param>
        public static PrimaryKey CreatePrimaryKey(int indicatorCode)
        {
            return InternalCreatePrimaryKey<Indicator>(indicatorCode);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="indicatorCode">Propiedad clave IndicatorCode.</param>
        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<Indicator>();
        }
        #endregion

        //*** Object Attributes ********************************
        /// <summary>
        /// Atributo para la propiedad AutomaticQuotaCode.
        /// </summary>
        private int _automaticQuotaCode;
        /// <summary>
        /// Atributo para la propiedad IndicatorConceptCode.
        /// </summary>
        private int _indicatorConceptCode;
        /// <summary>
        /// Atributo para la propiedad StartValue.
        /// </summary>
        private decimal _startValue;
        /// <summary>
        /// Atributo para la propiedad EndValue.
        /// </summary>
        private decimal _endValue;
        /// <summary>
		/// Atributo para la propiedad Observation.
		/// </summary>
        private string _observation = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="indicatorCode">IndicatorCode key property.</param>
        public Indicator(int indicatorCode) :
            this(Indicator.CreatePrimaryKey(indicatorCode), null)
        {
        }

        /// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="indicatorCode">IndicatorCode key property.</param>
	    public Indicator() :
            this(Indicator.CreatePrimaryKey(), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public Indicator(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad IndicatorCode.
        /// </summary>
        /// <value>Propiedad IndicatorCode.</value>
        [
        DescriptionKey("INDICATOR_CODE_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "INDICATOR_CD", DbType = System.Data.DbType.String),
        ]
        public int IndicatorCode
        {
            get
            {
                return (int)this._primaryKey[Properties.IndicatorCode];
            }
            set
            {
                this._primaryKey[Properties.IndicatorCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IndicatorConceptCode.
        /// </summary>
        /// <value>Propiedad IndicatorConceptCode.</value>
        [
        DescriptionKey("INDICATOR_CONCEPT_CODE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "INDICATOR_CONCEPT_CD", DbType = System.Data.DbType.String),
        ]
        public int IndicatorConceptCode
        {
            get
            {
                return this._indicatorConceptCode;
            }
            set
            {
                this._indicatorConceptCode = value;
            }
        }
        /// <summary>
        /// Devuelve o setea el valor de la propiedad AutomaticQuotaCode.
        /// </summary>
        /// <value>Propiedad AutomaticQuotaCode.</value>
        [
        DescriptionKey("AUTOMATIC_QUOTA_CODE_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "AUTOMATIC_QUOTA_CD", DbType = System.Data.DbType.String),
        ]
        public int AutomaticQuotaCode
        {
            get
            {
                return this._automaticQuotaCode;
            }
            set
            {
                this._automaticQuotaCode = value;
            }
        }
        /// <summary>
        /// Devuelve o setea el valor de la propiedad StartValue.
        /// </summary>
        /// <value>Propiedad StartValue.</value>
        [
        DescriptionKey("START_VALUE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "START_VALUE", DbType = System.Data.DbType.Decimal),
        ]
        public decimal StartValue
        {
            get
            {
                return this._startValue;
            }
            set
            {
                this._startValue = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad EndValue.
        /// </summary>
        /// <value>Propiedad EndValue.</value>
        [
        DescriptionKey("END_VALUE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "END_VALUE", DbType = System.Data.DbType.Decimal),
        ]
        public decimal EndValue
        {
            get
            {
                return this._endValue;
            }
            set
            {
                this._endValue = value;
            }
        }

        /// <summary>
		/// Devuelve o setea el valor de la propiedad Observation.
		/// </summary>
		/// <value>Propiedad EndValue.</value>
	    [
        DescriptionKey("OBSERVATION_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "OBSERVATION", DbType = System.Data.DbType.String),
        ]
        public string Observation
        {
            get
            {
                return this._observation;
            }
            set
            {
                this._observation = value;
            }
        }
    }
}