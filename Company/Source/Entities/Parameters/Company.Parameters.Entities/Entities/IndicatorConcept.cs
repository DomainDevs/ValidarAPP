/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Company.Application.Parameters.IndicatorConcept.dict v1.0
 * FileSize=4770 Header=260 CRC=1355735103
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Company.Application.Parameters.Entities
{
    /// <summary>
    /// Definición de entidad IndicatorConcept.
    /// </summary>
    [
    PersistentClass("Sistran.Company.Application.Parameters.IndicatorConcept.dict"),
    Serializable(),
    DescriptionKey("INDICATOR_CONCEPT_ENTITY"),
    TableMap(TableName="INDICATOR_CONCEPT", Schema="PARAM"),
    ]
    public partial class IndicatorConcept :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string IndicatorConceptCode = "IndicatorConceptCode";
			public static readonly string Description = "Description";
			public static readonly string Enabled = "Enabled";
            public static readonly string IndicatorTypeCode = "IndicatorTypeCode";

        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="indicatorConceptCode">Propiedad clave IndicatorConceptCode.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int indicatorConceptCode)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.IndicatorConceptCode, indicatorConceptCode);

		    return new PrimaryKey<T>(keys);
	    }

        /// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="indicatorConceptCode">Propiedad clave IndicatorConceptCode.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.IndicatorConceptCode, null);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="indicatorConceptCode">Propiedad clave IndicatorConceptCode.</param>
        public static PrimaryKey CreatePrimaryKey(int indicatorConceptCode)
	    {
			return InternalCreatePrimaryKey<IndicatorConcept>(indicatorConceptCode);
		}

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="indicatorConceptCode">Propiedad clave IndicatorConceptCode.</param>
        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<IndicatorConcept>();
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad IndicatorTypeCode.
        /// </summary>
        private int _indicatorTypeCode;
        /// <summary>
        /// Atributo para la propiedad Description.
        /// </summary>
        private string _description = null;
		/// <summary>
		/// Atributo para la propiedad Enabled.
		/// </summary>
        private bool _enabled;
        
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="indicatorConceptCode">IndicatorConceptCode key property.</param>
        public IndicatorConcept(int indicatorConceptCode):
			this(IndicatorConcept.CreatePrimaryKey(indicatorConceptCode), null)
	    {
	    }

        /// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="indicatorConceptCode">IndicatorConceptCode key property.</param>
	    public IndicatorConcept() :
            this(IndicatorConcept.CreatePrimaryKey(), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public IndicatorConcept(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad IndicatorConceptCode.
		/// </summary>
		/// <value>Propiedad IndicatorConceptCode.</value>
	    [
		DescriptionKey("INDICATOR_CONCEPT_CODE_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="INDICATOR_CONCEPT_CD", DbType=System.Data.DbType.String),
	    ]
        public int IndicatorConceptCode
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.IndicatorConceptCode];
		    }
		    set
		    {
				this._primaryKey[Properties.IndicatorConceptCode] = value;
			}
	    }

        /// <summary>
		/// Devuelve o setea el valor de la propiedad IndicatorTypeCode.
		/// </summary>
		/// <value>Propiedad IndicatorTypeCode.</value>
	    [
        DescriptionKey("INDICATOR_TYPE_CODE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "INDICATOR_TYPE_CD", DbType = System.Data.DbType.String),
        ]
        public int IndicatorTypeCode
        {
            get
            {
                return this._indicatorTypeCode;
            }
            set
            {
                this._indicatorTypeCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Description.
        /// </summary>
        /// <value>Propiedad Description.</value>
        [
		DescriptionKey("DESCRIPTION_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="DESCRIPTION", DbType=System.Data.DbType.String),
	    ]
        public string Description
	    {
		    get
		    {
			    return this._description;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.Description);
				}
				this._description = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Enabled.
		/// </summary>
		/// <value>Propiedad Enabled.</value>
	    [
		DescriptionKey("ENABLED_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="ENABLED", DbType=System.Data.DbType.String),
	    ]
        public bool Enabled
	    {
		    get
		    {
			    return this._enabled;
		    }
		    set
		    {
				this._enabled = value;
			}
	    }
    }
}