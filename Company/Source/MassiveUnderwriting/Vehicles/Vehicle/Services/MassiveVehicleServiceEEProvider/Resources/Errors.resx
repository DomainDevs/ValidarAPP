<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Accesories" xml:space="preserve">
    <value>Accesories</value>
  </data>
  <data name="AdditionalBeneficiaries" xml:space="preserve">
    <value>Additional Beneficiaries </value>
  </data>
  <data name="Authorization" xml:space="preserve">
    <value>Authorization</value>
  </data>
  <data name="BeneficiaryInactive" xml:space="preserve">
    <value>Inactive beneficiary in the system</value>
  </data>
  <data name="ClauseCoverageNotPresentOnRisk" xml:space="preserve">
    <value>The risk does not cotain any coverage associated to the clause {0}</value>
  </data>
  <data name="ClauseError" xml:space="preserve">
    <value>Clause code is a mandatory field</value>
  </data>
  <data name="ClauseErrorLevel" xml:space="preserve">
    <value>Level code is a mandatory field</value>
  </data>
  <data name="ClauseNotRelatedToCoverage" xml:space="preserve">
    <value>The clause {0} was not found at coverage level</value>
  </data>
  <data name="Clauses" xml:space="preserve">
    <value>Clauses</value>
  </data>
  <data name="CompanyRequestNotRenewed" xml:space="preserve">
    <value>The request is not renewed</value>
  </data>
  <data name="Deductible" xml:space="preserve">
    <value>Deductible</value>
  </data>
  <data name="EmissionAutos" xml:space="preserve">
    <value>Emission Autos</value>
  </data>
  <data name="ErrorAccesoriesDuplicated" xml:space="preserve">
    <value>Error Accesories Duplicated</value>
  </data>
  <data name="ErrorAccesoryIdNotFound" xml:space="preserve">
    <value>Error Accesory Id Not Found</value>
  </data>
  <data name="ErrorAccesoryValue" xml:space="preserve">
    <value>Field {0} is required</value>
  </data>
  <data name="ErrorAssistanceIdNotFound" xml:space="preserve">
    <value>Error AssistanceId Not Found</value>
  </data>
  <data name="ErrorBeneficiariesAdditionalDuplicated" xml:space="preserve">
    <value>Error Beneficiaries Additional Duplicated</value>
  </data>
  <data name="ErrorBeneficiaryParticipation" xml:space="preserve">
    <value>Error Beneficiary Participation</value>
  </data>
  <data name="ErrorBodyNotFound" xml:space="preserve">
    <value>Error Body Not Found</value>
  </data>
  <data name="ErrorBodyWithOutBody" xml:space="preserve">
    <value>Error, WithOut Body</value>
  </data>
  <data name="ErrorClauseNotFound" xml:space="preserve">
    <value>The clause {0} does not exists or is not related at indicated level</value>
  </data>
  <data name="ErrorCompanyRequestNotExist" xml:space="preserve">
    <value>Error Company Request Does Not Exist</value>
  </data>
  <data name="ErrorCoverageCode" xml:space="preserve">
    <value>Coverage code for deduct is required</value>
  </data>
  <data name="ErrorCoverangeDuplicated" xml:space="preserve">
    <value>Coverage Duplicated:</value>
  </data>
  <data name="ErrorCreateMassiveEmission" xml:space="preserve">
    <value>Error Create Massive Emission</value>
  </data>
  <data name="ErrorCreateMassiveLoad" xml:space="preserve">
    <value>Error creating the massive load </value>
  </data>
  <data name="ErrorCreateMassiveRenewal" xml:space="preserve">
    <value>Error Create Massive Renewal</value>
  </data>
  <data name="ErrorCreateRisk" xml:space="preserve">
    <value>Error Create Risk</value>
  </data>
  <data name="ErrorCreatingModels" xml:space="preserve">
    <value>Error while creating models</value>
  </data>
  <data name="ErrorDeductCode" xml:space="preserve">
    <value>Deduct code is required</value>
  </data>
  <data name="ErrorDuplicatePolicies" xml:space="preserve">
    <value>Duplicate Policies</value>
  </data>
  <data name="ErrorFasecoldaNotFound" xml:space="preserve">
    <value>Error Fasecolda Not Found</value>
  </data>
  <data name="ErrorFasecoldaVehicleType" xml:space="preserve">
    <value>The type of vehicle does not correspond to the fasecolda code</value>
  </data>
  <data name="ErrorFieldNotMatch" xml:space="preserve">
    <value>{0} Field Of {1} Template Not Match</value>
  </data>
  <data name="ErrorFieldNotMatchRegex" xml:space="preserve">
    <value>.* Field Of .* Template Not Match</value>
  </data>
  <data name="ErrorFieldsNotMatch" xml:space="preserve">
    <value>Some fields of loaded file does not match the parametrization : {0}</value>
  </data>
  <data name="ErrorFileParametrizationNotFound" xml:space="preserve">
    <value>File Parametrization Not Found</value>
  </data>
  <data name="ErrorGenerateFile" xml:space="preserve">
    <value>Error Generate File</value>
  </data>
  <data name="ErrorGenerateReportToMassiveLoad" xml:space="preserve">
    <value>Error Generate Report To MassiveLoad</value>
  </data>
  <data name="ErrorGenerateReportToMassiveRenewal" xml:space="preserve">
    <value>Error generating report for massive renewal</value>
  </data>
  <data name="ErrorGetExtendListByVehiclePlateCollection" xml:space="preserve">
    <value>Error Get Extend List By Vehicle Plate Collection</value>
  </data>
  <data name="ErrorGetExternalServices" xml:space="preserve">
    <value>Error Get External Services</value>
  </data>
  <data name="ErrorInTemplate" xml:space="preserve">
    <value>Error In Template {0}: {1}</value>
  </data>
  <data name="ErrorInvalidCorrelativePolicy" xml:space="preserve">
    <value>Error Invalid Correlative Policy</value>
  </data>
  <data name="ErrorIssuing" xml:space="preserve">
    <value>Error Issuing: {0}</value>
  </data>
  <data name="ErrorMandatoryTemplates" xml:space="preserve">
    <value>The next mandatory sheets are not in the file  : {0}</value>
  </data>
  <data name="ErrorMaxDaysRenewPolicy" xml:space="preserve">
    <value>The maximum period of validity for the policy exceeds {0} days.</value>
  </data>
  <data name="ErrorModelNotFound" xml:space="preserve">
    <value>There is no model for Fasecolda</value>
  </data>
  <data name="ErrorParticipationBeneficiary" xml:space="preserve">
    <value>Error Participation Beneficiary</value>
  </data>
  <data name="ErrorPremiumZero" xml:space="preserve">
    <value>Error Premium Zero</value>
  </data>
  <data name="ErrorProductIsFlateRate" xml:space="preserve">
    <value>Error Product  Flate Rate.</value>
  </data>
  <data name="ErrorQuotateMassiveLoad" xml:space="preserve">
    <value>Error Quotate Massive Load</value>
  </data>
  <data name="ErrorRecordsNotFoundToIssue" xml:space="preserve">
    <value>Records Not Found To Issue</value>
  </data>
  <data name="ErrorResponseHistoricPoliciesService" xml:space="preserve">
    <value>Error Response Historic Policies Service</value>
  </data>
  <data name="ErrorResponseHistoricSinestersService" xml:space="preserve">
    <value>Error Response Historic Sinesters Service</value>
  </data>
  <data name="ErrorResponseScoreService" xml:space="preserve">
    <value>Error Response Score Service</value>
  </data>
  <data name="ErrorResponseSimitService" xml:space="preserve">
    <value>Error Response Simit Service</value>
  </data>
  <data name="ErrorRisksNotFound" xml:space="preserve">
    <value>Error, Risks not found</value>
  </data>
  <data name="ErrorTariffing" xml:space="preserve">
    <value>Error Tariffing: {0}</value>
  </data>
  <data name="ErrorTemplateAccesories" xml:space="preserve">
    <value>Error Template Accesories</value>
  </data>
  <data name="ErrorTemplateIsMandatory" xml:space="preserve">
    <value>{0} Template Is Mandatory</value>
  </data>
  <data name="ErrorTemplateIsMandatoryRegex" xml:space="preserve">
    <value>.* Template Is Mandatory</value>
  </data>
  <data name="ErrorTemporalNotFound" xml:space="preserve">
    <value>Temporal Not Found</value>
  </data>
  <data name="ErrorThePolicyPresentsDataProblems" xml:space="preserve">
    <value>Error The Policy Presents Data Problems</value>
  </data>
  <data name="ErrorValidatingFile" xml:space="preserve">
    <value>Error Validating File: {0}</value>
  </data>
  <data name="FasecoldaCodeWithCharacters" xml:space="preserve">
    <value>Fasecolda code only accept numbers</value>
  </data>
  <data name="InactiveTaker" xml:space="preserve">
    <value>Inactive Taker</value>
  </data>
  <data name="MainInsuredInactive" xml:space="preserve">
    <value>Main insured inactive.</value>
  </data>
  <data name="MessageCurrentFromDateExceedsRequest" xml:space="preserve">
    <value>Current From Date Exceeds Request</value>
  </data>
  <data name="MessageRequestPrefixDoesNotMatch" xml:space="preserve">
    <value>Request Prefix Does Not Match Massive Load Prefix</value>
  </data>
  <data name="Notification" xml:space="preserve">
    <value>Notification</value>
  </data>
  <data name="PoliciesRestrictive" xml:space="preserve">
    <value>Restrictive policy: {0}</value>
  </data>
  <data name="PolicyHasEvents" xml:space="preserve">
    <value>Policy Has Events</value>
  </data>
  <data name="Restrictive" xml:space="preserve">
    <value>Restrictive</value>
  </data>
  <data name="TemplateRenewal" xml:space="preserve">
    <value>Renewal</value>
  </data>
  <data name="TemplateScript" xml:space="preserve">
    <value>Scripts</value>
  </data>
  <data name="TemplateScriptRequired" xml:space="preserve">
    <value>Sheet {0} is mandatory for product code {1}</value>
  </data>
  <data name="TheVehicleHasNoInsuredValueForTheModel" xml:space="preserve">
    <value>The Vehicle Has No Insured Value For The Model</value>
  </data>
  <data name="ValidateErrorAcessory" xml:space="preserve">
    <value>Accessory code can not go empty</value>
  </data>
  <data name="ValidateSarlaftExists" xml:space="preserve">
    <value>The policyholder has not signed the SARLAFT form</value>
  </data>
  <data name="ValidateSarlaftExistsInsured" xml:space="preserve">
    <value>The insured has not signed the SARLAFT form</value>
  </data>
  <data name="ValidateSarlaftExpired" xml:space="preserve">
    <value>The SARLAFT form for the policyholder is already expired. Should diligence a new one</value>
  </data>
  <data name="ValidateSarlaftExpiredInsured" xml:space="preserve">
    <value>The SARLAFT form for the insured is already expired. Should diligence a new one</value>
  </data>
  <data name="ValidateSarlaftOvercome" xml:space="preserve">
    <value>The SARLAFT form for the policyholder is about to expire. Should diligence a new one</value>
  </data>
  <data name="ValidateSarlaftOvercomeInsured" xml:space="preserve">
    <value>The SARLAFT form for the insured is about to expire. Should diligence a new one</value>
  </data>
  <data name="ValidateSarlaftPending" xml:space="preserve">
    <value>The SARLAFT form for the policyHolder is pending authorization</value>
  </data>
  <data name="ValidateSarlaftPendingInsured" xml:space="preserve">
    <value>The SARLAFT form for the insured is pending authorization</value>
  </data>
</root>