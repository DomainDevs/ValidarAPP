<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AdditionalBeneficiaries" xml:space="preserve">
    <value>Additional Beneficiaries </value>
  </data>
  <data name="ClauseCoverageNotPresentOnRisk" xml:space="preserve">
    <value>The risk does not cotain any coverage associated to the clause {0}</value>
  </data>
  <data name="ClauseError" xml:space="preserve">
    <value>Clause code is a mandatory field</value>
  </data>
  <data name="ClauseErrorLevel" xml:space="preserve">
    <value>Level code is a mandatory field</value>
  </data>
  <data name="ClauseNotRelatedToCoverage" xml:space="preserve">
    <value>The clause {0} was not found at coverage level</value>
  </data>
  <data name="ErrorAccessoryAmount" xml:space="preserve">
    <value>The value of accessory must be greater than 0, additional row {0}</value>
  </data>
  <data name="ErrorAgent" xml:space="preserve">
    <value>Agent doesn't exist</value>
  </data>
  <data name="ErrorBeneficiariesAdditionalDuplicated" xml:space="preserve">
    <value>Error Beneficiaries Additional Duplicated</value>
  </data>
  <data name="ErrorBodyNotFound" xml:space="preserve">
    <value>Error Body Not Found</value>
  </data>
  <data name="ErrorBodyWithOutBody" xml:space="preserve">
    <value>Error, WithOut Body</value>
  </data>
  <data name="ErrorClauseNotFound" xml:space="preserve">
    <value>The clause {0} does not exists or is not related at indicated level</value>
  </data>
  <data name="ErrorCoverAccessory" xml:space="preserve">
    <value>You can not include accessories in the coverages group</value>
  </data>
  <data name="ErrorCoverageCode" xml:space="preserve">
    <value>Coverage code for deduct is required</value>
  </data>
  <data name="ErrorCoverageDuplicate" xml:space="preserve">
    <value>Error Coverage Duplicate</value>
  </data>
  <data name="ErrorCoveragesNotFound" xml:space="preserve">
    <value>Error Coverages No tFound</value>
  </data>
  <data name="ErrorCreateMassiveLoad" xml:space="preserve">
    <value>Error creating the massive load </value>
  </data>
  <data name="ErrorCreateRisk" xml:space="preserve">
    <value>Error Create Risk</value>
  </data>
  <data name="ErrorCreatingLoad" xml:space="preserve">
    <value>Error creating collective load</value>
  </data>
  <data name="ErrorDeductCode" xml:space="preserve">
    <value>Deduct code is required</value>
  </data>
  <data name="ErrorFasecoldaNotFound" xml:space="preserve">
    <value>Error Fasecolda Not Found</value>
  </data>
  <data name="ErrorFasecoldaVehicleType" xml:space="preserve">
    <value>The type of vehicle does not correspond to the fasecolda code</value>
  </data>
  <data name="ErrorFileNotExist" xml:space="preserve">
    <value>Error File Not Exist</value>
  </data>
  <data name="ErrorFileParametrizationNotFound" xml:space="preserve">
    <value>Error File Parametrization Not Found</value>
  </data>
  <data name="ErrorGeneratingReport" xml:space="preserve">
    <value>Error generating the report</value>
  </data>
  <data name="ErrorInQuotateCollectiveLoad" xml:space="preserve">
    <value>Error tariffing: {0}</value>
  </data>
  <data name="ErrorInTemplate" xml:space="preserve">
    <value>Error In Template {0}: {1}</value>
  </data>
  <data name="ErrorIssuing" xml:space="preserve">
    <value>Error issuing</value>
  </data>
  <data name="ErrorIssuingPreviousRisk" xml:space="preserve">
    <value>Error issuing previous risk</value>
  </data>
  <data name="ErrorIssuingVehiclePolicies" xml:space="preserve">
    <value>Error issuing vehicle collective policy</value>
  </data>
  <data name="ErrorModelNotFound" xml:space="preserve">
    <value>There is no model for Fasecolda</value>
  </data>
  <data name="ErrorParticipationBeneficiary" xml:space="preserve">
    <value>Error Participation Beneficiary</value>
  </data>
  <data name="ErrorPolicyEndorsementTypeIsNull" xml:space="preserve">
    <value>Policy endorsement type is null</value>
  </data>
  <data name="ErrorPremiumZero" xml:space="preserve">
    <value>Error Premium Zero</value>
  </data>
  <data name="ErrorProductIsFlateRate" xml:space="preserve">
    <value>Error Product  Flate Rate</value>
  </data>
  <data name="ErrorProductIsNotCollective" xml:space="preserve">
    <value>Error Product Is Not Collective</value>
  </data>
  <data name="ErrorProductType" xml:space="preserve">
    <value>The product is not parameterized for massive loads</value>
  </data>
  <data name="ErrorRecordsNotFoundToIssue" xml:space="preserve">
    <value>Records Not Found To Issue</value>
  </data>
  <data name="ErrorRiskCurrentFromDateOutOfPolicyRange" xml:space="preserve">
    <value>The FROM date of the risk is outside the validity of the policy</value>
  </data>
  <data name="ErrorRisksNotFound" xml:space="preserve">
    <value>The risks related to the policy to be issued has not been found</value>
  </data>
  <data name="ErrorTemporalNotFound" xml:space="preserve">
    <value>Error temporal not found</value>
  </data>
  <data name="ErrorToDatePolicy" xml:space="preserve">
    <value>The date TO couldn't be greater to date FROM</value>
  </data>
  <data name="ErrorValidatingFile" xml:space="preserve">
    <value>Error Validating File</value>
  </data>
  <data name="FasecoldaCodeWithCharacters" xml:space="preserve">
    <value>Fasecolda code only accept numbers</value>
  </data>
  <data name="PoliciesRestrictive" xml:space="preserve">
    <value>Restrictive policy: {0}</value>
  </data>
  <data name="PolicyHasEvents" xml:space="preserve">
    <value>The Policy Has Events</value>
  </data>
  <data name="RiskDetail" xml:space="preserve">
    <value>Risk Detail</value>
  </data>
  <data name="TemplateScript" xml:space="preserve">
    <value>Scripts</value>
  </data>
  <data name="TemplateScriptRequired" xml:space="preserve">
    <value>Sheet {0} is mandatory for product code {1}</value>
  </data>
  <data name="ValidateErrorAccessory" xml:space="preserve">
    <value>Accessory code can not go empty</value>
  </data>
  <data name="ValidatePercentajeRate" xml:space="preserve">
    <value>The risk rate must be between 0 and 100</value>
  </data>
  <data name="ValidatePolicyAmounts" xml:space="preserve">
    <value>Validate Policy Amounts</value>
  </data>
  <data name="ValidateSarlaftExists" xml:space="preserve">
    <value>The holder has not signed the SARLAFT form</value>
  </data>
  <data name="ValidateSarlaftExpired" xml:space="preserve">
    <value>The SARLAFT form for the Policyholder is already expired. Should diligence a new one</value>
  </data>
  <data name="ValidateSarlaftOvercome" xml:space="preserve">
    <value>The SARLAFT form for the Policyholder is about to expire. Should diligence a new one</value>
  </data>
  <data name="ValidateSarlaftPending" xml:space="preserve">
    <value>The SARLAFT form for the holder is pending authorization</value>
  </data>
</root>