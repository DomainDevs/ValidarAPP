<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AgentNotFound" xml:space="preserve">
    <value>Agent Not Found</value>
  </data>
  <data name="AgentTypeNotValid" xml:space="preserve">
    <value>Agent Type Not Valid</value>
  </data>
  <data name="ErrorAddValidations" xml:space="preserve">
    <value>Error Add Validations</value>
  </data>
  <data name="ErrorBeneficiaryNotExistTemplateBeneficiary" xml:space="preserve">
    <value>Error Additional Beneficiary: The Beneficiary doesn't exist</value>
  </data>
  <data name="ErrorBeneficiaryNotExistTemplateEmission" xml:space="preserve">
    <value>Error Emision: The beneficiary doesn't exist</value>
  </data>
  <data name="ErrorCoinsuranceAcceptedTemplateMandatory" xml:space="preserve">
    <value>The Coinsurance Accepted Template Is Mandatory</value>
  </data>
  <data name="ErrorCoinsuranceAssignedTemplateMandatory" xml:space="preserve">
    <value>The Coinsurance Assigned Template Is Mandatory</value>
  </data>
  <data name="ErrorExcludeRows" xml:space="preserve">
    <value>Error Exclude Rows</value>
  </data>
  <data name="ErrorGetCoverages" xml:space="preserve">
    <value>Error Get Coverages</value>
  </data>
  <data name="ErrorHolderNotExist" xml:space="preserve">
    <value>Holderdon´t exist</value>
  </data>
  <data name="ErrorInsuredNotExist" xml:space="preserve">
    <value>Insured don´t exist</value>
  </data>
  <data name="ErrorInTemplate" xml:space="preserve">
    <value>Error In Template {0}: {1}</value>
  </data>
  <data name="ErrorIntermediaryNotExist" xml:space="preserve">
    <value>The intermediary not exists code:</value>
  </data>
  <data name="ErrorInterPartCoinsuranceAcceptedTemplateMandatory" xml:space="preserve">
    <value>The Inter Part Coinsurance Accepted Template Is Mandatory</value>
  </data>
  <data name="ErrorIssueEndorsement" xml:space="preserve">
    <value>Error Issue Endorsement</value>
  </data>
  <data name="ErrorIssuePolicy" xml:space="preserve">
    <value>Error Issue Policy</value>
  </data>
  <data name="ErrorMaxAgentCoinsuranceAccepted" xml:space="preserve">
    <value>Number of Intermediaries Allowed for Coinsurance Accepted Exceeded: {0}</value>
  </data>
  <data name="ErrorPaymentMethodNotParameterizedHolder" xml:space="preserve">
    <value>The payment method {0} is not parameterized for the holder</value>
  </data>
  <data name="ErrorPaymentPlanNotParameterized" xml:space="preserve">
    <value>The payment plan {0} is not parameterized in the product</value>
  </data>
  <data name="ErrorPrintMassiveLoad" xml:space="preserve">
    <value>Error Print Massive Load</value>
  </data>
  <data name="ErrorRepeatedAgentCode" xml:space="preserve">
    <value>Repeated Agent Code</value>
  </data>
  <data name="ErrorSetGroupCoverageData" xml:space="preserve">
    <value>Error Set Group Coverage Data</value>
  </data>
  <data name="ErrorSetLimitRcData" xml:space="preserve">
    <value>Error Set Limit Rc Data</value>
  </data>
  <data name="ErrorSetPolicyData" xml:space="preserve">
    <value>Error Set Policy Data</value>
  </data>
  <data name="ErrorSetRatingZoneData" xml:space="preserve">
    <value>Error Set Rating Zone Data</value>
  </data>
  <data name="ErrorTypeAndDocumentNumberAreRequired" xml:space="preserve">
    <value>Fields {0} and {1} are mandatory</value>
  </data>
  <data name="ErrorValidateCoInsuranceAcceptedAgents" xml:space="preserve">
    <value>Coinsurance Accepted Agents are required</value>
  </data>
  <data name="InsuredData" xml:space="preserve">
    <value>Insured not exists</value>
  </data>
  <data name="MessageAgentsParticipationPercentageExceeds" xml:space="preserve">
    <value>The percentage of participation of additional intermediaries must be less than 100%</value>
  </data>
  <data name="MessageClauseNotExists" xml:space="preserve">
    <value>Clause {0} not exists</value>
  </data>
  <data name="MessageCoinsuranceAcceptedAllowOnlyOne" xml:space="preserve">
    <value>Coinsurance Accepted Allow Only One</value>
  </data>
  <data name="MessageCoinsuranceAcceptedTemplateNotFound" xml:space="preserve">
    <value>Coinsurance Accepted Template Not Found</value>
  </data>
  <data name="MessageCoinsuranceAssignedTemplateNotFound" xml:space="preserve">
    <value>Coinsurance Assigned Template Not Found</value>
  </data>
  <data name="MessageCoInsuranceDuplicate" xml:space="preserve">
    <value>CoInsurances Duplicates</value>
  </data>
  <data name="MessageCoInsuranceParticipationPercentageExceeds" xml:space="preserve">
    <value>Coinsurance Participation Percentage Exceeds 100%</value>
  </data>
  <data name="MessageCoInsuranceParticipationPercentageIsLess" xml:space="preserve">
    <value>Coinsurance Participation Percentage Is Less Than 100%</value>
  </data>
  <data name="MessageCoinsurancePercentageExceeds" xml:space="preserve">
    <value>Coinsurance Percentage Exceeds 100%</value>
  </data>
  <data name="MessageCoInsurancePercentageExpensesExceeds" xml:space="preserve">
    <value>Coinsurance Percentage Expenses Exceeds 100%</value>
  </data>
  <data name="MessageCoInsurancePercentageExpensesIsLess" xml:space="preserve">
    <value>CoInsurance Percentage Expenses Is Less Than 100%</value>
  </data>
  <data name="ValidateTypeIndividualRequeried" xml:space="preserve">
    <value>The field A-Type of individual is a mandatory field</value>
  </data>
</root>