/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.MassiveUnderwritingService3GProvider.MassiveLoadFieldsMap.dict v1.0
 * FileSize=5621 Header=287 CRC=3195862575
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Company.Application.UploadFileServices.EEProvider.Entities
{
    /// <summary>
    /// Definición de entidad MassiveLoadFieldsMap.
    /// </summary>
    [
    PersistentClass("Sistran.Company.Application.UploadFileServices.EEProvider.MassiveLoadFieldsMap.dict"),
    Serializable(),
    DescriptionKey("MASSIVE_LOAD_FIELDS_MAP_ENTITY"),
    ]
    public class MassiveLoadFieldsMap :
        BusinessObject
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string FieldSetId = "FieldSetId";
            public static readonly string MassiveFieldId = "MassiveFieldId";
            public static readonly string FieldOrder = "FieldOrder";
            public static readonly string FieldMandatory = "FieldMandatory";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="fieldSetId">Propiedad clave FieldSetId.</param>
        /// <param name="massiveFieldId">Propiedad clave MassiveFieldId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int fieldSetId, int massiveFieldId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.FieldSetId, fieldSetId);
            keys.Add(Properties.MassiveFieldId, massiveFieldId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="fieldSetId">Propiedad clave FieldSetId.</param>
        /// <param name="massiveFieldId">Propiedad clave MassiveFieldId.</param>
        public static PrimaryKey CreatePrimaryKey(int fieldSetId, int massiveFieldId)
        {
            return InternalCreatePrimaryKey<MassiveLoadFieldsMap>(fieldSetId, massiveFieldId);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad FieldOrder.
        /// </summary>
        private int? _fieldOrder = null;
        /// <summary>
        /// Atributo para la propiedad FieldMandatory.
        /// </summary>
        private bool? _fieldMandatory = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="fieldSetId">FieldSetId key property.</param>
        /// <param name="massiveFieldId">MassiveFieldId key property.</param>
        public MassiveLoadFieldsMap(int fieldSetId, int massiveFieldId) :
            this(MassiveLoadFieldsMap.CreatePrimaryKey(fieldSetId, massiveFieldId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public MassiveLoadFieldsMap(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad FieldSetId.
        /// </summary>
        /// <value>Propiedad FieldSetId.</value>
        [
        DescriptionKey("FIELD_SET_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "FIELD_SET_ID", DbType = System.Data.DbType.String),
        ]
        public int FieldSetId
        {
            get
            {
                return (int)this._primaryKey[Properties.FieldSetId];
            }
            set
            {
                this._primaryKey[Properties.FieldSetId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad MassiveFieldId.
        /// </summary>
        /// <value>Propiedad MassiveFieldId.</value>
        [
        DescriptionKey("MASSIVE_FIELD_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "MASSIVE_FIELD_ID", DbType = System.Data.DbType.String),
        ]
        public int MassiveFieldId
        {
            get
            {
                return (int)this._primaryKey[Properties.MassiveFieldId];
            }
            set
            {
                this._primaryKey[Properties.MassiveFieldId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad FieldOrder.
        /// </summary>
        /// <value>Propiedad FieldOrder.</value>
        [
        DescriptionKey("FIELD_ORDER_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "FIELD_ORDER", DbType = System.Data.DbType.String),
        ]
        public int? FieldOrder
        {
            get
            {
                return this._fieldOrder;
            }
            set
            {
                this._fieldOrder = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad FieldMandatory.
        /// </summary>
        /// <value>Propiedad FieldMandatory.</value>
        [
        DescriptionKey("FIELD_MANDATORY_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "FIELD_MANDATORY", DbType = System.Data.DbType.String),
        ]
        public bool? FieldMandatory
        {
            get
            {
                return this._fieldMandatory;
            }
            set
            {
                this._fieldMandatory = value;
            }
        }

    }
}
