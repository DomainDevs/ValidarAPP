/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.MassiveUnderwritingService3GProvider.MassiveCollectiveRelation.dict v1.0
 * FileSize=7210 Header=292 CRC=3100272907
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Company.Application.UploadFileServices.EEProvider.Entities
{
    /// <summary>
    /// Definición de entidad MassiveCollectiveRelation.
    /// </summary>
    [
    PersistentClass("Sistran.Company.Services.CollectiveUnderwritingServices.EEProvider.MassiveCollectiveRelation.dict"),
    Serializable(),
    DescriptionKey("MASSIVE_COLLECTIVE_RELATION_ENTITY")
    ]
    public class MassiveCollectiveRelation : BusinessObject
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string TempId = "TempId";
            public static readonly string IdMassive = "IdMassive";
            public static readonly string ProcessId = "ProcessId";
            public static readonly string StateId = "StateId";
            public static readonly string IsEvent = "IsEvent";
            public static readonly string UserId = "UserId";
            public static readonly string ToIssue = "ToIssue";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="tempId">Propiedad clave TempId.</param>
        /// <param name="idMassive">Propiedad clave IdMassive.</param>
        /// <param name="processId">Propiedad clave ProcessId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int tempId, int idMassive, int processId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.TempId, tempId);
            keys.Add(Properties.IdMassive, idMassive);
            keys.Add(Properties.ProcessId, processId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="tempId">Propiedad clave TempId.</param>
        /// <param name="idMassive">Propiedad clave IdMassive.</param>
        /// <param name="processId">Propiedad clave ProcessId.</param>
        public static PrimaryKey CreatePrimaryKey(int tempId, int idMassive, int processId)
        {
            return InternalCreatePrimaryKey<MassiveCollectiveRelation>(tempId, idMassive, processId);
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.TempId, 0);
            keys.Add(Properties.IdMassive, 0);
            keys.Add(Properties.ProcessId, 0);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<MassiveCollectiveRelation>();
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad StateId.
        /// </summary>
        private int _stateId;
        /// <summary>
        /// Atributo para la propiedad IsEvent.
        /// </summary>
        private bool? _isEvent = null;
        /// <summary>
        /// Atributo para la propiedad UserId.
        /// </summary>
        private int _userId;
        /// <summary>
        /// Atributo para la propiedad ToIssue.
        /// </summary>
        private bool? _toIssue = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="tempId">TempId key property.</param>
        /// <param name="idMassive">IdMassive key property.</param>
        /// <param name="processId">ProcessId key property.</param>
        public MassiveCollectiveRelation(int tempId, int idMassive, int processId) :
            this(MassiveCollectiveRelation.CreatePrimaryKey(tempId, idMassive, processId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        public MassiveCollectiveRelation()
            : this(MassiveCollectiveRelation.CreatePrimaryKey(), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public MassiveCollectiveRelation(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad TempId.
        /// </summary>
        /// <value>Propiedad TempId.</value>
        [
        DescriptionKey("TEMP_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "TEMP_ID", DbType = System.Data.DbType.String),
        ]
        public int TempId
        {
            get
            {
                return (int)this._primaryKey[Properties.TempId];
            }
            set
            {
                this._primaryKey[Properties.TempId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IdMassive.
        /// </summary>
        /// <value>Propiedad IdMassive.</value>
        [
        DescriptionKey("ID_MASSIVE_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "ID_MASSIVE", DbType = System.Data.DbType.String),
        ]
        public int IdMassive
        {
            get
            {
                return (int)this._primaryKey[Properties.IdMassive];
            }
            set
            {
                this._primaryKey[Properties.IdMassive] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ProcessId.
        /// </summary>
        /// <value>Propiedad ProcessId.</value>
        [
        DescriptionKey("PROCESS_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "PROCESS_ID", DbType = System.Data.DbType.String),
        ]
        public int ProcessId
        {
            get
            {
                return (int)this._primaryKey[Properties.ProcessId];
            }
            set
            {
                this._primaryKey[Properties.ProcessId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad StateId.
        /// </summary>
        /// <value>Propiedad StateId.</value>
        [
        DescriptionKey("STATE_ID_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "STATE_ID", DbType = System.Data.DbType.String),
        ]
        public int StateId
        {
            get
            {
                return this._stateId;
            }
            set
            {
                this._stateId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IsEvent.
        /// </summary>
        /// <value>Propiedad IsEvent.</value>
        [
        DescriptionKey("IS_EVENT_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "IS_EVENT", DbType = System.Data.DbType.String),
        ]
        public bool? IsEvent
        {
            get
            {
                return this._isEvent;
            }
            set
            {
                this._isEvent = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad UserId.
        /// </summary>
        /// <value>Propiedad UserId.</value>
        [
        DescriptionKey("USER_ID_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "USER_ID", DbType = System.Data.DbType.String),
        ]
        public int UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                this._userId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ToIssue.
        /// </summary>
        /// <value>Propiedad ToIssue.</value>
        [
        DescriptionKey("TO_ISSUE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "TO_ISSUE", DbType = System.Data.DbType.String),
        ]
        public bool? ToIssue
        {
            get
            {
                return this._toIssue;
            }
            set
            {
                this._toIssue = value;
            }
        }

    }
}
