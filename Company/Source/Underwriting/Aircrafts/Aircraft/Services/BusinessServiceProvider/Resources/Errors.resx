<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErorrUpdateCompanyAircraftTemporal" xml:space="preserve">
    <value>Error to update company Aircraft temporal</value>
  </data>
  <data name="ErrorConsultPolicyholder" xml:space="preserve">
    <value>Error consultando poliza del tomador</value>
  </data>
  <data name="ErrorCoverages" xml:space="preserve">
    <value>Error Coverages</value>
  </data>
  <data name="ErrorCreateCompanyAircraftTemporal" xml:space="preserve">
    <value>Error Create Company Aircraft Temporal</value>
  </data>
  <data name="ErrorCreateCompanyClauses" xml:space="preserve">
    <value>Error create company clauses</value>
  </data>
  <data name="ErrorCreateCompanyText" xml:space="preserve">
    <value>Error create company text</value>
  </data>
  <data name="ErrorCreateEndorsement" xml:space="preserve">
    <value>Error Create Endorsement</value>
  </data>
  <data name="ErrorCreatePolicy" xml:space="preserve">
    <value>Error creando poliza</value>
  </data>
  <data name="ErrorCreateTemporalCompanyAircraft" xml:space="preserve">
    <value>Error Create Temporal Company Aircraft</value>
  </data>
  <data name="ErrorDeleteCompanyAircraftTemporal" xml:space="preserve">
    <value>Error to delete company Aircraft Temporal</value>
  </data>
  <data name="ErrorDeleteRisk" xml:space="preserve">
    <value>Error Delete Risk</value>
  </data>
  <data name="ErrorEndorsementTypeIdEmpty" xml:space="preserve">
    <value>Error Endoso por tino vacio</value>
  </data>
  <data name="ErrorExcludeCompanyAircraft" xml:space="preserve">
    <value>Error to exclude company Aircraft</value>
  </data>
  <data name="ErrorExcludeCompanyCoverage" xml:space="preserve">
    <value>Error to exclude company coverage</value>
  </data>
  <data name="ErrorGetCompanyAircraftByRiskId" xml:space="preserve">
    <value>Error Get Aircraft By RiskId</value>
  </data>
  <data name="ErrorGetCompanyAircraftsByEndorsementId" xml:space="preserve">
    <value>Error getting aircraft risks by endorsement Id</value>
  </data>
  <data name="ErrorGetCompanyAircraftsByPolicyId" xml:space="preserve">
    <value>Error get Aircrafts by policy Id</value>
  </data>
  <data name="ErrorGetCompanyAircraftsByPolicyIdEndorsementId" xml:space="preserve">
    <value>Error Get Company Aircrafts By Policy By Endorsement</value>
  </data>
  <data name="ErrorGetCompanyAircraftsByTemporalId" xml:space="preserve">
    <value>Error to get company Aircrafts by temporal id</value>
  </data>
  <data name="ErrorGetCompanyCoveragesByInsuredObjectId" xml:space="preserve">
    <value>Error getting company coverages by insured object id</value>
  </data>
  <data name="ErrorGetCompanyCoveragesByInsuredObjectIdGroupCoverageIdProductId" xml:space="preserve">
    <value>Error Get Coverages By Insured Object IdGroup Coverage IdProductId</value>
  </data>
  <data name="ErrorGetCompanyCoveragesByInsuredObjectIdsGroupCoverageIdProductId" xml:space="preserve">
    <value>Error Get Coverages By Insured ObjectIds Group Coverage Id ProductId</value>
  </data>
  <data name="ErrorGetCompanyDeductiblesByCoverageId" xml:space="preserve">
    <value>Error getting deductibles by coverageId</value>
  </data>
  <data name="ErrorGetCompanyEndorsement" xml:space="preserve">
    <value>Error Get Company Endorsement </value>
  </data>
  <data name="ErrorGetMakes" xml:space="preserve">
    <value>Error obtaining makes</value>
  </data>
  <data name="ErrorGetModelsByMakeId" xml:space="preserve">
    <value>Error obtaining models by make</value>
  </data>
  <data name="ErrorGetOperators" xml:space="preserve">
    <value>Error obtaining operators</value>
  </data>
  <data name="ErrorGetPolicyTypeByPrefixIdPolicyTypeCode" xml:space="preserve">
    <value>Error getting policy type by prefix id an policy code type</value>
  </data>
  <data name="ErrorGetPolicyTypesByPrefixIdById" xml:space="preserve">
    <value>Error GetPolicyTypes By PrefixId By Id</value>
  </data>
  <data name="ErrorGetRegisters" xml:space="preserve">
    <value>Error obtaining registers</value>
  </data>
  <data name="ErrorGetUsesByPrefixId" xml:space="preserve">
    <value>Error obtaining user by prefix by id</value>
  </data>
  <data name="ErrorHolderNoInsuredRole" xml:space="preserve">
    <value>Error tomador no tiene rol de asegurado</value>
  </data>
  <data name="ErrorInsuredMain" xml:space="preserve">
    <value>Errores asegurados principal</value>
  </data>
  <data name="ErrorInsuredNoInsuredRole" xml:space="preserve">
    <value>Error asegurado no enrolado</value>
  </data>
  <data name="ErrorNoExistCoverageRisk" xml:space="preserve">
    <value>Error no exist coverage risk</value>
  </data>
  <data name="ErrorNoExistRisk" xml:space="preserve">
    <value>Error not exist risk</value>
  </data>
  <data name="ErrorPolicyholderDefaultPaymentPlan" xml:space="preserve">
    <value>Error metodo de pago por defecto de la poliza</value>
  </data>
  <data name="ErrorPolicyholderDisabled" xml:space="preserve">
    <value>Error de la poliza del tomador no habilitado</value>
  </data>
  <data name="ErrorPolicyOrRisksEmpty" xml:space="preserve">
    <value>Policy Or Risks Empty</value>
  </data>
  <data name="ErrorQuotateCompanyAircraft" xml:space="preserve">
    <value>Error Quotate Company Aircrafts</value>
  </data>
  <data name="ErrorQuotateCompanyCoverage" xml:space="preserve">
    <value>Error Quotate Company Coverage</value>
  </data>
  <data name="ErrorQuotateInsuredObject" xml:space="preserve">
    <value>Error Quotate Insured Object</value>
  </data>
  <data name="ErrorRiskEmpty" xml:space="preserve">
    <value>Error Riesgo vacio</value>
  </data>
  <data name="ErrorRunRulesRisk" xml:space="preserve">
    <value>Error to run rules risk</value>
  </data>
  <data name="ErrorSearchRisk" xml:space="preserve">
    <value>Error Search Risk</value>
  </data>
  <data name="ErrorTemporalNotFound" xml:space="preserve">
    <value>Error temporal not found</value>
  </data>
  <data name="ErrorTempPremiumZero" xml:space="preserve">
    <value>Error Temp Premium Zero</value>
  </data>
  <data name="NoExistRisk" xml:space="preserve">
    <value>No Exist Risk</value>
  </data>
  <data name="PolicyNumber" xml:space="preserve">
    <value>Error Policy Number</value>
  </data>
  <data name="QuotationNumber" xml:space="preserve">
    <value>Quotation Number</value>
  </data>
</root>