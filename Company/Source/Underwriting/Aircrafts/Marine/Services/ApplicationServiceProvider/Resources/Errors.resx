<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Cancelled" xml:space="preserve">
    <value>Cancelled</value>
  </data>
  <data name="ErrorCreateCompanyMarineTemporal" xml:space="preserve">
    <value>Error to creating temporal Marine</value>
  </data>
  <data name="ErrorExcludeCoverage" xml:space="preserve">
    <value>Error to exclude coverage</value>
  </data>
  <data name="ErrorExcludeMarine" xml:space="preserve">
    <value>Error to exclude Marine</value>
  </data>
  <data name="ErrorGetAdjustPeriodTypes" xml:space="preserve">
    <value>Error create adjust period types</value>
  </data>
  <data name="ErrorGetBeneficiaryTypes" xml:space="preserve">
    <value>Error getting beneficiary types</value>
  </data>
  <data name="ErrorGetBillingPeriods" xml:space="preserve">
    <value>Error getting adjustment periods</value>
  </data>
  <data name="ErrorGetCalculationTypes" xml:space="preserve">
    <value>Error get calculation types</value>
  </data>
  <data name="ErrorGetCargoTypes" xml:space="preserve">
    <value>Error get cargo types</value>
  </data>
  <data name="ErrorGetCitiesByContryIdStateId" xml:space="preserve">
    <value>Error getting cities by country and state</value>
  </data>
  <data name="ErrorGetCompanyMarineByRiskId" xml:space="preserve">
    <value>Error getting company Marine by riskId</value>
  </data>
  <data name="ErrorGetCompanyMarinesByPolicErrorGetErrorCompanyMarinesByPolicyId" xml:space="preserve">
    <value>Error get Marines by policy Id</value>
  </data>
  <data name="ErrorGetCountries" xml:space="preserve">
    <value>Error getting list of countries</value>
  </data>
  <data name="ErrorGetCoverageGroupsByPrefixIdProductId" xml:space="preserve">
    <value>Error get coverage groups by prefix id product id</value>
  </data>
  <data name="ErrorGetCoveragesByInsuredObjectId" xml:space="preserve">
    <value>Error get coverages by InsuredObject Id</value>
  </data>
  <data name="ErrorGetCoveragesByInsuredObjectId1" xml:space="preserve">
    <value>Error get coverages by InsuredObject Id</value>
  </data>
  <data name="ErrorGetCoveragesByInsuredObjectIdGroupCoverageIdProductId" xml:space="preserve">
    <value>Error to get coverages by insured object id group coverage id and product Id</value>
  </data>
  <data name="ErrorGetCoveragesByInsuredObjectIdsGroupCoverageIdProductId" xml:space="preserve">
    <value>Error to get coverages by insured object ids, group coverage id and product Id</value>
  </data>
  <data name="ErrorGetCoveragesByProductIdGroupCoverageId" xml:space="preserve">
    <value>Error getting coverages by productid an group coverageid</value>
  </data>
  <data name="ErrorGetCoveragesByProductIdGroupCoverageIdPrefixId" xml:space="preserve">
    <value>Error get coverages by product, prefix and group coverage id</value>
  </data>
  <data name="ErrorGetDeclarationPeriods" xml:space="preserve">
    <value>Error get declaration period types</value>
  </data>
  <data name="ErrorGetDeductiblesByCoverageId" xml:space="preserve">
    <value>Error getting dedubtibles by coverageId</value>
  </data>
  <data name="ErrorGetInsuredObjectsByProductIdGroupCoverageId" xml:space="preserve">
    <value>Error get insured objects by product id group coverage id</value>
  </data>
  <data name="ErrorGetInsuredsByDescriptionInsuredSearchTypeCustomerType" xml:space="preserve">
    <value>Error getting insureds by description</value>
  </data>
  <data name="ErrorGetMarineByEndorsement" xml:space="preserve">
    <value>Error Get Marine By Endorsement</value>
  </data>
  <data name="ErrorGetMarinesByPolicyId" xml:space="preserve">
    <value>Error to get Marines by policy id</value>
  </data>
  <data name="ErrorGetMarinesByTemporalId" xml:space="preserve">
    <value>Error get Marines by temporal id</value>
  </data>
  <data name="ErrorGetMarineTypes" xml:space="preserve">
    <value>Error get Marine types</value>
  </data>
  <data name="ErrorGetNotificationInfoByIndividualId" xml:space="preserve">
    <value>Error getting information from the individual</value>
  </data>
  <data name="ErrorGetPackagingTypes" xml:space="preserve">
    <value>Error create packaging types</value>
  </data>
  <data name="ErrorGetPolicyTypeByPrefixIdPolicyTypeCode" xml:space="preserve">
    <value>Error getting policy bype by prefix id and policy code</value>
  </data>
  <data name="ErrorGetRateTypes" xml:space="preserve">
    <value>Error get rate types</value>
  </data>
  <data name="ErrorGetStatesByCountryId" xml:space="preserve">
    <value>Error getting states by country</value>
  </data>
  <data name="ErrorGetUsesByPrefixId" xml:space="preserve">
    <value>Error Get Uses By PrefixId</value>
  </data>
  <data name="ErrorGetViaTypes" xml:space="preserve">
    <value>Error create via types</value>
  </data>
  <data name="ErrorQuotateCompanyMarine" xml:space="preserve">
    <value>Error quotate Marine</value>
  </data>
  <data name="ErrorQuotateCoverage" xml:space="preserve">
    <value>Error quoatate coverage</value>
  </data>
  <data name="ErrorQuotateInsuredObject" xml:space="preserve">
    <value>Error quoatate insured object</value>
  </data>
  <data name="ErrorRunRules" xml:space="preserve">
    <value>Error Run Rules</value>
  </data>
  <data name="ErrorSaveClauses" xml:space="preserve">
    <value>Error create clauses</value>
  </data>
  <data name="ErrorSaveCompanyBeneficiary" xml:space="preserve">
    <value>Error to save company beneficiary</value>
  </data>
  <data name="ErrorSaveCoverages" xml:space="preserve">
    <value>Error to save coverages</value>
  </data>
  <data name="ErrorSaveText" xml:space="preserve">
    <value>Error create text</value>
  </data>
  <data name="Excluded" xml:space="preserve">
    <value>Excluded</value>
  </data>
  <data name="GetCoveragesByInsuredObjectId" xml:space="preserve">
    <value>Error get coverage by Insured Object Id</value>
  </data>
  <data name="Included" xml:space="preserve">
    <value>Included</value>
  </data>
  <data name="ListDirect" xml:space="preserve">
    <value>Direct</value>
  </data>
  <data name="ListFixedValue" xml:space="preserve">
    <value>FixedValue</value>
  </data>
  <data name="ListPercentage" xml:space="preserve">
    <value>Percentage</value>
  </data>
  <data name="ListPermilage" xml:space="preserve">
    <value>Permilage</value>
  </data>
  <data name="ListProrate" xml:space="preserve">
    <value>Prorate</value>
  </data>
  <data name="ListShortTerm" xml:space="preserve">
    <value>ShortTerm</value>
  </data>
  <data name="Modified" xml:space="preserve">
    <value>Modified</value>
  </data>
  <data name="NotModified" xml:space="preserve">
    <value>Not modified</value>
  </data>
  <data name="Original" xml:space="preserve">
    <value>Original</value>
  </data>
  <data name="Rehabilitated" xml:space="preserve">
    <value>Rehabilitated</value>
  </data>
</root>