/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.VehicleService.CoVehicleVersionFasecolda.dict v1.0
 * FileSize=7193 Header=270 CRC=2251924017
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Company.Application.Vehicles.VehicleServices.EEProvider.Entities
{
    /// <summary>
    /// Definición de entidad CoVehicleVersionFasecolda.
    /// </summary>
    [
    PersistentClass("Sistran.Company.Application.Vehicles.VehicleServices.EEProvider.CoVehicle2G.dict"),
    Serializable(),
    DescriptionKey("CO_VEHICLE2G_ENTITY"),
    TableMap(TableName = "CO_VEHICLE2G", Schema = "QUO"),
    ]
    public partial class CoVehicle2G :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string LicensePlate = "LicensePlate";
            public static readonly string EngineSerNo = "EngineSerNo";
            public static readonly string ChassisSerNo = "ChassisSerNo";
            public static readonly string Enabled = "Enabled";
            public static readonly string PolicyNumber = "PolicyNumber";
            public static readonly string BranchCode = "BranchCode";
            public static readonly string PrefixCode = "PrefixCode";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="licensePlate">Propiedad clave LicensePlate.</param>
        /// <param name="engineSerNo">Propiedad clave EngineSerNo.</param>
        /// <param name="chassisSerNo">Propiedad clave ChassisSerNo.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(string licensePlate, string engineSerNo, string chassisSerNo)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.LicensePlate, licensePlate);
            keys.Add(Properties.EngineSerNo, engineSerNo);
            keys.Add(Properties.ChassisSerNo, chassisSerNo);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="licensePlate">Propiedad clave LicensePlate.</param>
        /// <param name="engineSerNo">Propiedad clave EngineSerNo.</param>
        /// <param name="chassisSerNo">Propiedad clave ChassisSerNo.</param>
        public static PrimaryKey CreatePrimaryKey(string licensePlate, string engineSerNo, string chassisSerNo)
        {
            return InternalCreatePrimaryKey<CoVehicle2G>(licensePlate, engineSerNo, chassisSerNo);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad Enabled.
        /// </summary>
        private bool? _enabled = null;
        /// <summary>
        /// Atributo para la propiedad PolicyNumber.
        /// </summary>
        private int? _policyNumber = null;
        /// <summary>
        /// Atributo para la propiedad BranchCode.
        /// </summary>
        private int? _branchCode = null;
        /// <summary>
        /// Atributo para la propiedad PrefixCode.
        /// </summary>
        private int? _prefixCode = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="licensePlate">Propiedad clave LicensePlate.</param>
        /// <param name="engineSerNo">Propiedad clave EngineSerNo.</param>
        /// <param name="chassisSerNo">Propiedad clave ChassisSerNo.</param>
        public CoVehicle2G(string licensePlate, string engineSerNo, string chassisSerNo) :
            this(CoVehicle2G.CreatePrimaryKey(licensePlate, engineSerNo, chassisSerNo), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public CoVehicle2G(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad LicensePlate.
        /// </summary>
        /// <value>Propiedad LicensePlate.</value>
        [
        DescriptionKey("LICENSE_PLATE_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "LICENSE_PLATE", DbType = System.Data.DbType.String),
        ]
        public string LicensePlate
        {
            get
            {
                return (string)this._primaryKey[Properties.LicensePlate];
            }
            set
            {
                this._primaryKey[Properties.LicensePlate] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad EngineSerNo.
        /// </summary>
        /// <value>Propiedad EngineSerNo.</value>
        [
        DescriptionKey("ENGINE_SER_NO_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "ENGINE_SER_NO", DbType = System.Data.DbType.String),
        ]
        public string EngineSerNo
        {
            get
            {
                return (string)this._primaryKey[Properties.EngineSerNo];
            }
            set
            {
                this._primaryKey[Properties.EngineSerNo] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ChassisSerNo.
        /// </summary>
        /// <value>Propiedad ChassisSerNo.</value>
        [
        DescriptionKey("CHASSIS_SER_NO_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "CHASSIS_SER_NO", DbType = System.Data.DbType.String),
        ]
        public string ChassisSerNo
        {
            get
            {
                return (string)this._primaryKey[Properties.ChassisSerNo];
            }
            set
            {
                this._primaryKey[Properties.ChassisSerNo] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Enabled.
        /// </summary>
        /// <value>Propiedad Enabled.</value>
        [
        DescriptionKey("ENABLED_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "ENABLED", DbType = System.Data.DbType.String),
        ]
        public bool? Enabled
        {
            get
            {
                return this._enabled;
            }
            set
            {
                this._enabled = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad PolicyNumber.
        /// </summary>
        /// <value>Propiedad PolicyNumber.</value>
        [
        DescriptionKey("POLICY_NUMBER_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "POLICY_NUMBER", DbType = System.Data.DbType.String),
        ]
        public int? PolicyNumber
        {
            get
            {
                return this._policyNumber;
            }
            set
            {
                this._policyNumber = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad BranchCode.
        /// </summary>
        /// <value>Propiedad BranchCode.</value>
        [
        DescriptionKey("BRANCH_CD_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "BRANCH_CD", DbType = System.Data.DbType.String),
        ]
        public int? BranchCode
        {
            get
            {
                return this._branchCode;
            }
            set
            {
                this._branchCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad PrefixCode.
        /// </summary>
        /// <value>Propiedad BranchCode.</value>
        [
        DescriptionKey("PREFIX_CD_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "PREFIX_CD", DbType = System.Data.DbType.String),
        ]
        public int? PrefixCode
        {
            get
            {
                return this._prefixCode;
            }
            set
            {
                this._prefixCode = value;
            }
        }
    }
}