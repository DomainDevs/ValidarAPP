<div class="row">
    <div class="uif-col-12" id="main">
    </div>
</div>

<div class="uif-modal" id="modalDialogListPerson">
    <div class="uif-modalbody">
        @Html.Partial("~/Areas/Person/Views/Person/DialogList.cshtml")
    </div>
</div>

<div class="uif-modal" id="modalDialogListAgentExecutive">
    <div class="uif-modalbody">
        @Html.Partial("~/Areas/Person/Views/Person/DialogListAgentExecutive.cshtml")
    </div>
</div>

@section Title
{
    <div class="row main-title">
        <div class="column">
        </div>
    </div>
}

@section breadcrumb
{
    <div id="breadcrumb"></div>
}

@section Toolbar
{
    <footer></footer>
}

@section Scripts
{
    @Scripts.Render("~/bundle/js/Underwriting");
    @Scripts.Render("~/bundle/js/EventsMain");
    @Scripts.Render("~/bundle/js/Temporal");
    @Scripts.Render("~/bundle/js/UniqueUser");
    @Scripts.Render("~/bundle/js/Risk");
    @Scripts.Render("~/bundle/js/Vehicle");
    @Scripts.Render("~/bundle/js/Fidelity");
    @Scripts.Render("~/bundle/js/Liability");
    @Scripts.Render("~/bundle/js/Property");
    @Scripts.Render("~/bundle/js/Coverage");
    @Scripts.Render("~/bundle/js/ContractObject");
    @Scripts.Render("~/bundle/js/Module");
    @Scripts.Render("~/bundle/js/SubModule");
    @Scripts.Render("~/bundle/js/Profile");
    @Scripts.Render("~/bundle/js/Access");
    @Scripts.Render("~/bundle/js/Person");
    @Scripts.Render("~/bundle/js/Printer");
    @Scripts.Render("~/bundle/js/Common");
    @Scripts.Render("~/bundle/js/StrongPassword")
    @Scripts.Render("~/bundle/js/AuthorizationPolicies");
    @Scripts.Render("~/bundle/js/Rules");
    @Scripts.Render("~/bundle/js/DecisionTable");
    @Scripts.Render("~/bundle/js/Prefix");
    @Scripts.Render("~/bundle/js/Massive");
    @Scripts.Render("~/bundle/js/MassiveProcess");
    @Scripts.Render("~/bundle/js/RequestGrouping");
    @Scripts.Render("~/bundle/js/RenewalRequestGrouping");
    @Scripts.Render("~/bundle/js/RenewalMassive");
    @Scripts.Render("~/bundle/js/Guarantees");
    @Scripts.Render("~/bundle/js/PaymentPlanParametrization");
    @Scripts.Render("~/bundle/js/Variable");
    @Scripts.Render("~/bundle/js/ProtectionParametrization");
    @Scripts.Render("~/bundle/js/DeductibleParametrization");
    @Scripts.Render("~/bundle/js/Surcharge");
    @Scripts.Render("~/bundle/js/Discount");
    @Scripts.Render("~/bundle/js/DetailParametrization");
    @Scripts.Render("~/bundle/js/SubLineBusiness");
    @Scripts.Render("~/bundle/js/Branch");
    @Scripts.Render("~/bundle/js/SalePoint");
    @Scripts.Render("~/bundle/js/InsurancesObjects");
    @Scripts.Render("~/bundle/js/CoverageGroupParametrization");
    @Scripts.Render("~/bundle/js/CoverageParametrization");
    @Scripts.Render("~/bundle/js/ClauseParametrization");
    @Scripts.Render("~/bundle/js/Expense");
    @Scripts.Render("~/bundle/js/PaymentMethod");
    @Scripts.Render("~/bundle/js/AssistanceType");
    @Scripts.Render("~/bundle/js/Product2G");
    @Scripts.Render("~/bundle/js/VehicleModel");
    @Scripts.Render("~/bundle/js/Surety");
    @Scripts.Render("~/bundle/js/CoverageSurety");
    @Scripts.Render("~/bundle/js/Transport");
    @Scripts.Render("~/bundle/js/CreditNote");
    @Scripts.Render("~/bundle/js/Adjustment");
    @Scripts.Render("~/bundle/js/Declaration");
    @Scripts.Render("~/bundle/js/ThirdPartyLiability");



    @Scripts.Render("~/bundle/js/Parametrization");
    @Scripts.Render("~/bundle/js/QuotationNumerationParametrization");
    @Scripts.Render("~/bundle/js/PolicyNumerationParametrization");
    @Scripts.Render("~/bundle/js/LineBusinessParametrization");
    @Scripts.Render("~/bundle/js/RatingZoneParametrization");
    @Scripts.Render("~/bundle/js/Concepts");
    @Scripts.Render("~/bundle/js/VehicleVersionParametrization");

    @Scripts.Render("~/bundle/js/FinancialPlan");
    @Scripts.Render("~/bundle/js/LimitRc");
    @Scripts.Render("~/bundle/js/VehicleVersionYear");
    @Scripts.Render("~/bundle/js/ReportRenovation");
    @Scripts.Render("~/bundle/js/ConsultPolice");
    @Scripts.Render("~/bundle/js/GroundsRejection");
    @Scripts.Render("~/bundle/js/DelegationParametrization");
    @Scripts.Render("~/bundle/js/Incentive");
    @Scripts.Render("~/bundle/js/Tax");
    @Scripts.Render("~/bundle/js/Wallet");
    @*@Scripts.Render("~/bundle/js/Fasecolda");*@
    @*@Scripts.Render("~/bundle/js/ReportQuotation");
        @Scripts.Render("~/bundle/js/ScoreCredit");*@
    @Scripts.Render("~/bundle/js/GroupPolicies");
    @Scripts.Render("~/bundle/js/ReportAuthorizationPolicies");
    @Scripts.Render("~/bundle/js/ReassignPolicies");
    @Scripts.Render("~/bundle/js/Quotation");
    @*@Scripts.Render("~/bundle/js/Product");*@
    @Scripts.Render("~/bundle/js/TextPrecatalogued");
    @Scripts.Render("~/bundle/js/ValidationPlate");
    @Scripts.Render("~/bundle/js/DocumentTypeRange");
    @Scripts.Render("~/bundle/js/AllyCoverage");
    @* CLAIMS *@
    @Scripts.Render("~/bundle/js/CauseCoverage");
    @Scripts.Render("~/bundle/js/EstimationTypeStatus");
    @Scripts.Render("~/bundle/js/EstimationTypePrefix");
    @Scripts.Render("~/bundle/js/ConfigurationPanels");
    @Scripts.Render("~/bundle/js/Notice");
    @Scripts.Render("~/bundle/js/NoticeVehicle");
    @Scripts.Render("~/bundle/js/NoticeLocation");
    @Scripts.Render("~/bundle/js/NoticeSurety");
    @Scripts.Render("~/bundle/js/NoticeTransport");
    @Scripts.Render("~/bundle/js/NoticeAirCraft");
    @Scripts.Render("~/bundle/js/NoticeFidelity");
    @Scripts.Render("~/bundle/js/Claim");
    @Scripts.Render("~/bundle/js/ClaimVehicle");
    @Scripts.Render("~/bundle/js/ClaimSurety");
    @Scripts.Render("~/bundle/js/ClaimLocation");
    @Scripts.Render("~/bundle/js/ClaimTransport");
    @Scripts.Render("~/bundle/js/ClaimAirCraft");
    @Scripts.Render("~/bundle/js/ClaimFidelity");
    @Scripts.Render("~/bundle/js/Salvage");
    @Scripts.Render("~/bundle/js/Recovery");
    @Scripts.Render("~/bundle/js/Payment");
    @Scripts.Render("~/bundle/js/Charge");
    @Scripts.Render("~/bundle/js/ClaimSearch");
    @Scripts.Render("~/bundle/js/RequestCancellation");
    @Scripts.Render("~/bundle/js/SetClaimReserve");
    @Scripts.Render("~/bundle/js/ClaimsSubCause");
    @Scripts.Render("~/bundle/js/ClaimsLackPeriod");
    @Scripts.Render("~/bundle/js/ClaimsAssociation");
    @Scripts.Render("~/bundle/js/ClaimsPersonCompany");
    @Scripts.Render("~/bundle/js/ClaimsDocument");
    @Scripts.Render("~/bundle/js/AutomaticSalaryUpdate");
    @* CLAIMS *@
    @*AutomaticQuota*@
    @Scripts.Render("~/bundle/js/AutomaticQuota");
    @*AutomaticQuota*@
    @* Vista de ABM de ciudades*@
    @Scripts.Render("~/bundle/js/City");
    @Scripts.Render("~/bundle/js/MinPremiunRelation");

    @* Vista de ABM de pesos de coberturas cocoverage*@
    @Scripts.Render("~/bundle/js/CoverageValue");
    @Scripts.Render("~/bundle/js/BillingPeriod");
    @Scripts.Render("~/bundle/js/BusinessTypes");
    <script src="~/build/static/js/dynamic-form-1.1.2.3.js"></script>

    @Scripts.Render("~/bundle/js/TechnicalPlan");
    @Scripts.Render("~/bundle/js/Cexper");
    @Scripts.Render("~/bundle/js/Sup");
    @Scripts.Render("~/bundle/js/Sisa");
    @Scripts.Render("~/bundle/js/ProductionReport");
    @Scripts.Render("~/bundle/js/Sarlaft");
    @Scripts.Render("~/bundle/js/ListRisk")
    @Scripts.Render("~/bundle/js/EventSarlaf");
    @Scripts.Render("~/bundle/js/QuotaOperation");
    @Scripts.Render("~/bundle/js/ConditionText");
    @Scripts.Render("~/bundle/js/JudicialSurety");
    @Scripts.Render("~/bundle/js/SubscriptionSearch");
    @Scripts.Render("~/bundle/js/Marine");
    @Scripts.Render("~/bundle/js/Aircraft");
    @Scripts.Render("~/bundle/js/MassiveVehicleFasecolda");

    @*Vistas de cache*@
    @Scripts.Render("~/bundle/js/RuleSetCache");
    @Scripts.Render("~/bundle/js/GuaranteeStatusRoute");


    @Scripts.Render("~/bundle/js/TaxConceptsExpenses");

    @*ProductArticle*@
    @Scripts.Render("~/bundle/js/ProductArticle");
    @*ArticleLine*@
    @Scripts.Render("~/bundle/js/ArticleLine");
    @*CourtType*@
    @Scripts.Render("~/bundle/js/CourtType");

    <script type="text/javascript">
        var dynamicForm = []; fillDForm(dynamicForm, 200);
        var cont = 0;
        function fillDForm(fact, num) {
            fact[cont++] = num++;

            if (num > 259 )
            {
                return fact;
            }else {
                fillDForm(fact, num == 211 ? ++num : num);
            }
        }

        var isAuthorize = {
            '0095': @(Sistran.Core.Framework.UIF.Web.Helpers.SessionHelper.IsAuthorize("0095")?1:0),
            '0150': @(Sistran.Core.Framework.UIF.Web.Helpers.SessionHelper.IsAuthorize("0150") ?1:0),
            '0153': @(Sistran.Core.Framework.UIF.Web.Helpers.SessionHelper.IsAuthorize("0153") ?1:0),
            '0156': @(Sistran.Core.Framework.UIF.Web.Helpers.SessionHelper.IsAuthorize("0156") ?1:0)
        }

        var glbPersonOnline = null;
        var glbPolicy = null;
        var glbEndorsementTexts = [];
        var glbRisk = null;
        var glbCoverage = null;
        var glbUser = null;
        var glbPersonIndividualId = null;
        var gblProspectData = null;
	var glClaimOption = null;
        var glNoticeOption = null;
        var router = uif2.router({ container: "#main" });
        var ObjectCoverageRiskThirdPartyLiability;
        var ObjectRiskPropertyInsured;
        var AppResources;
        var resourceManager = uif2.resourceManager({ path: rootPath + "Layout/GetResources" });
        resourceManager.getResources().then(function (resources) {
            AppResources = resources;

        });


        var afterCallTemporal = function (params, error) {
            new UnderwritingTemporal();
            afterCallUnderwriting();
        }

        var afterCallQuotation = function (params, error) {
            new UnderwritingQuotation();
            new QuotationAdvancedSearch();
            afterCallUnderwriting();
        }

        var afterCallUnderwriting = function (params, error) {
            new Underwriting();
            new UnderwritingAdditionalData();
            new CommonAgent();
            new UnderwritingAgent();
            new UnderwritingClauses();
            new UnderwritingText();
            new UnderwritingCoInsurance();
            new UnderwritingBeneficiaries();
            new UnderwritingPaymentPlan();
            new TemporalAdvancedSearch();
            //new UnderwritingTableExpreses();
            //new UnderwritingSurcharge();
            //new UnderwritingTaxes();
            //new UnderwritingDiscounts();
            new UnderwritingPromissory();

        };
        var afterCallRiskProperty = function (params, error) {
            if (glbPolicy != null && glbPolicy.Id > 0) {
                new Property();
                new RiskBeneficiary();
                new RiskClause();
                new RiskText();
                new RiskPropertyAdditionalData();


            } else {
                ExecuteUnderwriting();
            }
        };
        var afterCallInsuredObjectRiskProperty = function (params, error) {
            if (glbRisk != null && glbRisk.Id > 0) {
                new RiskPropertyInsuredObject();
                ObjectRiskPropertyInsured = RiskPropertyInsuredObject;
                new TextsCoverage();
                new ClausesCoverage();
                new DeductiblesCoverage();
            } else {
                ExecuteUnderwriting();
            }
        };
        var afterCallRiskLiability = function (params, error) {

            if (glbPolicy != null && glbPolicy.Id > 0) {
                new RiskLiability();
                new RiskBeneficiary();
                new RiskClause();
                new RiskText();

            } else {
                ExecuteUnderwriting();
            }
        };

        var afterCallCoverageRiskLiability = function (params, error) {
            if (glbRisk != null && glbRisk.Id > 0) {
                new RiskLiabilityCoverage();
                new TextsCoverage();
                new ClausesCoverage();
                new DeductiblesCoverage();
            } else {
                ExecuteUnderwriting();
            }
        }

        var afterCallRiskThirdPartyLiability = function (params, error) {

            if (glbPolicy != null && glbPolicy.Id > 0) {
                new RiskThirdPartyLiability();
                new RiskBeneficiary();
                new RiskClause();
                new RiskText();
                new RiskTPLAdditionalData();

            } else {
                ExecuteUnderwriting();
            }
        };

        var afterCallCoverageRiskThirdPartyLiability = function (params, error) {
            if (glbRisk != null && glbRisk.Id > 0) {
                new RiskThirdPartyLiabilityCoverage();
                new TextsCoverage();
                new ClausesCoverage();
                new DeductiblesCoverage();
            } else {
                ExecuteUnderwriting();
            }
        };

        var afterCallRiskVehicle = function (params, error) {

            if (glbPolicy != null && glbPolicy.Id > 0) {
                new RiskVehicle();
                new RiskSuretyCrossGuarantees();
                new RiskVehicleAdditionalData();
                new RiskVehicleAccessories();
                new RiskBeneficiary();
                new RiskClause();
                new RiskText();

            } else {
                ExecuteUnderwriting();
            }
        }
        var afterCallRiskMarine = function (params, error) {
            if (glbPolicy != null && glbPolicy.Id > 0) {
                new RiskMarine();
            } else {
                ExecuteUnderwriting();
            }
        }
        router.add("prtRiskmarine", rootPath + "Underwriting/RiskMarine/Marine", afterCallRiskMarine);


        var afterCallRiskMarinesCoverage = function (params, error) {
            if (glbPolicy != null && glbRisk.Id > 0) {
                new RiskMarineCoverage();
                new TextsCoverage();
                new ClausesCoverage();
                //new ConceptsCoverage();
            } else {
                ExecuteUnderwriting();
            }
        }
        router.add("prtRiskmarineCoverage", rootPath + "Underwriting/RiskMarine/RiskMarineCoverage", afterCallRiskMarinesCoverage);

        var afterCallRiskAircraft = function (params, error) {
            if (glbPolicy != null && glbPolicy.Id > 0) {
                new RiskAircraft();
            } else {
                ExecuteUnderwriting();
            }
        }
        router.add("prtRiskaircraft", rootPath + "Underwriting/RiskAircraft/Aircraft", afterCallRiskAircraft);


        var afterCallRiskAircraftCoverage = function (params, error) {
            if (glbRisk != null && glbRisk.Id > 0) {
                new RiskAircraftCoverage();
                new TextsCoverage();
                new ClausesCoverage();
                //new ConceptsCoverage();

            } else {
                ExecuteUnderwriting();
            }
        }
        router.add("prtRiskaircraftCoverage", rootPath + "Underwriting/RiskAircraft/RiskAircraftCoverage", afterCallRiskAircraftCoverage);

        var afterCallRiskSurety = function (params, error) {

            if (glbPolicy != null && glbPolicy.Id > 0) {
                new RiskSurety();
                new RiskSuretyCrossGuarantees();
                new RiskSuretyContract();
                new OperationQuotaCumulus();
                //new RiskSuretyCrossGuaranteesRequest();
                //new RiskVehicleAdditionalData();
                //new RiskVehicleAccessories();
                new RiskBeneficiary();
                new RiskClause();
                new RiskText();

            } else {
                ExecuteUnderwriting();
            }
        }



        var afterCallCoverageRiskVehicle = function (params, error) {
            if (glbRisk != null && glbRisk.Id > 0) {
                new RiskVehicleCoverage();
                new TextsCoverage();
                new ClausesCoverage();
            } else {
                ExecuteUnderwriting();
            }
        }

        var afterCallCoverageRiskSurety = function (params, error) {
            if (glbRisk != null && glbRisk.Id > 0) {
                new RiskSuretyCoverage();
                new TextsCoverage();
                new ClausesCoverage();
            } else {
                ExecuteUnderwriting();
            }
        }

        var afterCallLegalRepresentative = function (params, error) {
            new LegalRepresentative();
        }

        var afterCallGuarantee = function (params, error) {
            new Guarantee();
            new GuaranteeRequest();
            objBindPolicy.bindEvents();
            objBinnacle.bindEvents();
            objDocumentationReceived.bindEvents();
            objFixedTermDeposit.bindEvents();
            objGuarantors.bindEvents();
            objActions.bindEvents();
            objMortage.bindEvents();
            objOther.bindEvents();
            objPledge.bindEvents();
            objPrefixAssocieted.bindEvents();
            objPromissoryNote.bindEvents();
        }
        var afterCallGuarantees = function (params, error) {
            new Guarantee();
            new GuaranteeRequest();
            new SearchInsured();
            objBindPolicy.bindEvents();
            objBinnacle.bindEvents();
            objDocumentationReceived.bindEvents();
            objFixedTermDeposit.bindEvents();
            objGuarantors.bindEvents();
            objActions.bindEvents();
            objMortage.bindEvents();
            objOther.bindEvents();
            objPledge.bindEvents();

            objPrefixAssocieted.bindEvents();
            objPromissoryNote.bindEvents();

        }
        var afterCallSearchInsured = function (params, error) {
            new SearchInsured();
        };
        var afterCallUniqueUser = function (params, error) {
            new UniqueUser();
            //new UserProduct();
            new PersonOnline();
            new Branch();
            new UserAgent();
            new Hierarchy();
            new UserAdvSearch();
            new AlliedSalePoints();
            new UserGroup();
            new UserPermissions();
        }

        var afterCallModule = function (params, error) {
            new Module();
        }
        var afterCallSubModule = function (params, error) {
            new SubModule();
        }
        var afterCallProfile = function (params, error) {
            new Profile();
            new AccessProfile();
            new ProfileContextPermissions();
            new CopyProfile();
            new ProfileAdvSearch();
            new GuaranteeStatus();
        }
        var afterCallAccess = function (params, error) {
            new Access();
            new AccessAdvSearch();
        }
        var afterCallChangePassword = function (params, error) {
            new ChangePassword();
            if (GetQueryParameter('cause') == "expired") {
                $.UifNotify('show',
                    { 'type': 'danger', 'message': Resources.Language.PasswordExpired, 'autoclose': true });
            }
        }

        var afterCallAuthorize = function (params, error) {
            new AuthorizationPolicies();
        }

        var afterCallWorkFlowPolicies = function (params, error) {
            new WorkFlowPolicies();
            new WorkFlowPoliciesRequest();
        }

        var afterCallPolicies = function (params, error) {
            new PoliciesAut();
            new AdvancedSearchPolicy();
        }

        var afterCallPoliciesRules = function (params, error) {
            new PoliciesRules();
            new ModalRule();
            new ModalConditionRule();
            new ModalActionRule();
        }

        var afterCallRulesSet = function (params, error) {
            new RulesSet();
            new ModalRuleSet();
            new ModalRule();
            new ModalConditionRule();
            new ModalActionRule();
            new AdvancedSearchRules();
        }
        var afterCallRulesSetCache = function (params, error) {
            new RulesSetCache();
        }
        var afterTaxConceptsExpenses = function (params, error) {
            new TaxConceptsExpenses();
            new TaxConceptsExpensesRequests();
        }
        var afterCallDecisionTable = function (params, error) {
            new DecisionTable(GetQueryParameter('IsEvent'));
        }

        var afterCallDecisionTableHeader = function (params, error) {
            new DecisionTableHeader();
        }

        var afterCallDecisionTableData = function (params, error) {
            new DecisionTableBody();
        }

        var afterCallDecisionTableFile = function (params, error) {
            new DecisionTableFile();
        }

        var afterCallParametrizationPrefix = function (params, error) {
            new ParametrizationPrefix();
            new AdvancedSearchBusiness();
            new AditionalInformation();
        }
        var afterCallMassive = function (params, error) {
            new MassiveIssuance();
            //new AdvancedSearchMassive();
        }
        var afterCallMassiveProcess = function (params, error) {
            new MassiveProcess();
        }

        var afterCallRequestGrouping = function (params, error) {
            new RequestGrouping();
            new MassiveAgent();
            new MassiveCoInsurance();
            objRequestGroup.bindEvents();
            objBillingGroup.bindEvents();
        }

        var afterCallRenewalRequestGrouping = function (params, error) {
            new RenewalRequestGrouping();
            new RenewalAgent();
            new RenewalAdvancedSearch();
        }
        var afterCallPreRenewal = function (params, error) {
            new MassiveRenewal();
        }
        var afterCallIssueWithEvent = function (params, error) {
            new IssueWithEvent();
        }

        var afterCallDeductibleParametrization = function (params, error) {
            new DeductibleParametrization();
            new AdvancedSearchParametrization();
        }

        var afterCallLineBusinessParametrization = function (params, error) {
            new LineBusinessParametrization();
        }

        var afterCallPaymetPlanParametrization = function (params, error) {
            new PaymentPlanParametrization();
            new DistributionQuotaParametrization();
            new PaymentPlanParametrizationAdv();
        }

        var afterCallRatingZoneParametrization = function () {
            new RatingZone();
        };

        var afterCallVariable = function (params, error) {
            new Variable();
        }

        var afterCallProtectionParametrization = function (params, error) {
            new ProtectionParametrization();
            new ProtectionAdvancedSearch();
        }

        var afterCallQuotationNumerationParametrization = function (params, error) {
            new QuotationNumerationParametrization();
        }

        var afterCallSubLineBusinessParametrization = function (params, error) {
            new SubLineBusinessParametrization();
            new SubLineBusinessAdvancedSearch();
            new SubLineBusinessRequest();
        }

        var afterCallClauseParametrization = function (params, error) {
            new ClauseDetail();
            new ClauseParametrization();
            new ClauseParametrizationRequest();
        }

        var afterCallSurcharge = function (params, error) {
            new SurchargeParametrization();
        }

        var afterCallDiscount = function (params, error) {
            new DiscountParametrization();
        }

        var afterCallDetailParametrization = function (params, error) {
            new DetailParametrization();
        }

        var afterCallBranchParametrization = function (params, error) {
            new BranchParametrization();
            new BranchAdvancedSearch();
        }

        var afterCallSalePointParametrization = function (params, error) {
            new SalePointParametrization();
            new SalePointAdvancedSearch();
        }

        var afterCallInsurancesObjects = function (params, error) {
            new InsuredObject();
            new InsuredObjectAdvancedSearch();
        }

        var afterCallCoverageGroupParametrization = function (params, error) {
            new CoverageGroupParametrization();
        }

        var afterCallCoverageParametrization = function (params, error) {
            new CoverageParametrization();
            new ClausesParametrization();
            new DeductiblesParametrization();
            new DetailTypesParametrization();
            new CoverageParametrizationAdvanced();
            new Coverage2GParametrization();
            new PrintCoveragesParametrization();
        }

        var afterCallParametrizationAssistanceType = function (params, error) {
            new ParametrizationAssistanceType();
            new AssistanceAdvancedSearch();
            new AsistenceText();
        }

        var afterCallParametrizationProduct2G = function (params, error) {
            new Product2G();
        }

        var afterCallPaymentMethod = function (params, error) {
            new PaymentMethodParametrization();
        }

        var afterCallDynamicParametrization = function (params, error) {
            var dynamicForm = new DynamicForm({
                formId: GetQueryParameter('id'),
                element: document.getElementById('app'),
                endpoint: "@Url.Content("~/api/DynamicForms")"
                @*endpoint: '@System.Configuration.ConfigurationManager.AppSettings["formulariosdinamicos"]'*@
            });
        }

        var afterCallFasecoldaParametrization = function (params, error) {
            new Fasecolda();
            new AdvancedSearchFasecolda();
        }

        var afterCallVehicleModel = function (params, error) {
            new ModelParametrization();
            new VehiculeModelParametrization();
        }

        var afterCallPolicyNumerationParametrization = function (params, error) {
            new PolicyNumerationParametrization();
        }

        var afterCallVehiculeVersionParametrization = function (params, error) {
            new VehiculeVersionParametrization();
            new VehiculeVersionSearchParametrization();
        }

        var afterCallListEntity = function (params, error) {
            new ConceptListEntity();
            new ConceptListEntityAdvanced();
        }

        var afterCallLimitRc = function (params, error) {
            new LimitRc();
        }

        var afterCallRangeEntity = function (params, error) {
            new ConceptRangeEntity();
            new ConceptRangeEntityAdvanced();
        }

        var afterCallFinancialPlan = function (params, error) {
            new FinancialPlanParametrization();
            new FinancialPlanParametrizationRequest();
        }

        var afterCallExpenseParametrization = function (params, error) {
            new Expense();
            new asynchronousProcess();
        }

        var afterCallVehicleVersionYearParametrization = function (params, error) {
            new VehicleVersionYearParametrization();
            new VehicleVersionYearParametrizationAdv();
        }

        var afterCallTechnicalPlanParametrization = function (params, error) {
            new TechnicalPlan();
            new TechnicalPlanCoverages();
            new TechnicalPlanAllyCoverages();
            new TechnicalPlanSearch();
        }

        var afterCallReportFasecolda = function (params, error) {
            new ReportFasecolda();
        }

        var afterCallReportRenovation = function (params, error) {
            new ReportRenovation();
        }

        var afterCallReportConsultPolice = function (params, error) {
            new ReportConsultPolice();
        }

        var afterCallReportLogFaseColda = function (params, error) {
            new LogFasecolda();
        }

        var afterCallGroundsRejection = function (params, error) {
            new AdvancedSearchGroundsRejection();
            new GroundsRejectionCause();
        }

        var afterCallDelegationParametrization = function (params, error) {
            new DelegationParametrization();
            new DelegationParametrizationRequest();
        }

        var afterCallReportSearchCexper = function (params, error) {
            new ReportCexper();
        }

        var afterCallReportSearchIncentive = function (params, error) {
            new ReportIncentive();
        }

        var afterCallTax = function (params, error) {
            new TaxRequests();
            new ParametrizationTax();
        }
        var afterCallCategoryTax = function (params, error) {
            new CategoryTax();
            new CategoryTaxRequests();
        }

        var afterCallConditionTax = function (params, error) {
            new ConditionTax();
            new ConditionTaxRequests();
        }

        var afterCallRateTax = function (params, error) {
            new RateTax();
            new RateTaxRequests();
            new RateTaxAdvancedSearch();
        }

        var afterCallWallet = function (params, error) {
            new Wallet();
        }

        var afterCallScoreCredit = function (params, error) {
            new ReportScoreCredit();
        }

        var afterCallReportVehicleIndicators = function (params, error) {
            new VehicleIndic
            ators();
        }

        var afterCallPersonBasicInformation = function (params, error) {
            new PersonBasicInformation();
            new PersonBasicInformationAdvancedSearch();
        }
        var afterCallGroupPolicies = function (params, error) {
            new GroupPolicies();
            new AdvancedSearchGroupPolicies();
            }
        var afterCallAllyCoverage = function (params, error) {
            new AllyCoverage();
            new AllyCoverageAdvancedSearch();
        }
        var afterCallReportAuthorizationPolices = function (params, error) {
            new ReportAuthorizationPolicies();
        }

        var afterCallReassignPolicies = function (params, error) {
            new ReassignPolicies();
        }

        var afterCallPersonNatural = function (params, error) {
            new PersonNatural();
        }

        var afterCallProspectusNatural = function (params, error) {
            new ProspectusNatural();
        }

        var afterCallProspectusLegal = function (params, error) {
            new ProspectusLegal();
        }

        var afterCallPersonLegal = function (params, error) {
            new PersonLegal();
        }

        var afterCallPerson = function (params, error) {
            new Persons();
        }
        var afterCallProduct = function (params, error) {

        }

        var afterTextPrecatalogued = function (params, error) {
            new TextPrecataloguedDetail();
            new TextPrecataloguedParametrization();
            new TextPrecataloguedParametrizationRequest();
        }
        var afterValidationPlate = function (params, error) {
            //new ValidationVehicleDetail();
            new ValidationPlateParametrization();
            new ValidationPlateParametrizationRequest();
        }
        //Transports
        var afterDeclaration = function () {
            new Declaration();
            new DeclarationRequest();

        }
        var afterAdjustment = function (params, error) {
            new Adjustment();
            new AdjustmentRequest();

        }
        var afterCreditNote = function (params, error) {
            new CreditNote();
            new CreditNoteRequest();

        }
        var afterCallRiskTransport = function (params, error) {
            if (glbPolicy != null && glbPolicy.Id > 0) {
                new RiskTransport();
                new RiskBeneficiary();
                new RiskClause();
                new RiskText();
            } else {
                ExecuteUnderwriting();
            }
        }

        var afterCallRiskTransportCoverage = function (params, error) {
            if (glbRisk != null && glbRisk.Id > 0) {
                new RiskTransportCoverage();
                new TextsCoverage();
                new ClausesCoverage();
                new DeductiblesCoverage();
            } else {
                ExecuteUnderwriting();
            }
        }
        var afterConcessionaire = function (params, error) {
            new Concessionaire();
        }

        var afterDocumentTypeRange = function (params, error)
        {
            new DocumentTypeRangeParametrization();
        }
        var afterCallCity = function (params, error) {
            new CityParametrization();
            new CitySearchAdv();
        }

        var afterCallMinPremiunRelation = function (params, error) {
            new MinPremiunRelation();
        }
        var afterCallConditionText = function (params, error) {
            new ConditionText();
                        }
        var afterCallSUP = function (params, error) {
            new Sup({
                UserLogin: GetQueryParameter('UserLogin'),//'GOMEZGAN',
                SUPKey: GetQueryParameter('SUPKey'),//'AaxrekysdgxzonwdBvrd',
                IdApp: GetQueryParameter('IdApp'),
                divFrame: document.getElementById("appSup"),
                endpoint:'@System.Configuration.ConfigurationManager.AppSettings["supEndpoint"]'
            });
        }

            var afterCallCexper = function (params, error) {
                new Cexper();
            }

            var afterCallFasecoldaSISA = function (params, error) {
                new FasecoldaSISA();
            }

            var afterCallProductionReport = function (params, error) {
                new ProductionReport();
            }

            var aftercallBillingPeriod = function (params, error) {
                new ParametrizationBillingPeriod();
                new BillingPeriodControls();
                new BillingPeriod();
            }
            var afterCallBusinessTypes = function (params, error) {
                new ParametrizationBusinessType();
                new BusinessTypeControls();
                new BusinessType();
            }
            var afterCallCoverageValue = function (params, error) {
            new ParametrizationCoverageValue();
            new CoCoverageValueSearchAdv();
        }

        var aftercallBillingPeriod = function (params, error) {
            new ParametrizationBillingPeriod();
            new BillingPeriodControls();
            new BillingPeriod();
        }
        var afterCallBusinessTypes = function (params, error) {
            new ParametrizationBusinessType();
            new BusinessTypeControls();
            new BusinessType();
        }
        var afterCallSarlaft = function (params, error) {
            new InternationalOperations();
            new LegalRepresentative();
            new Links();
            new Exempt();
            new FinalBeneficiary();
            new Peps();
            new PartnersParam();
            new SarlaftParam();
            new SarlaftRequest();

        }

        var afterCallListRiskPreson = function (params, error) {
            new ListRiskPerson();
            new ListRiskPersonRequest();
        }

        var afterCallQuotaOperational = function (params, error) {
            new QuotaOperationalScripts();
        }
        var afterCallListRiskFile = function (params, error) {
            new ListRiskFile();
            new ListRiskFileRequest();
        }

        var afterCallMatchingProcess = function (params, error) {
            new MatchingProcess();
            new MatchingProcessRequest();
        }

        var afterCallSubscriptionSearch = function (params, error) {
            new SubscriptionSearch();
            new SubscriptionSearchRequest();
            new QuotationSearch();
            new QuotationSearchRequest();
            new TemporalSearch();
            new TemporalSearchRequest();
            new PolicySearch();
            new PolicySearchRequest();
        }
        var afterCallAuthorizationSarlaftOperation = function (params, error) {
            new AuthorizationSarlaftOperation();
            new AuthorizationSarlaftOperationRequest();
        }
        var afterCallAuthorizationPersonRiskList = function (params, error) {
            new AuthorizationPersonRiskList();
            new AuthorizationPersonRiskListRequest();
        }

	/* Claims */

	    var afterCallCauseCoverage = function (params, error) {
                new CauseCoverage();
        };

        var afterCallClaimsAssociation = function (params, error) {
            new ClaimsAssociation();
        };

        var afterCallClaimsSubCause = function (params, error) {
            new ClaimsSubCause();
        };

        var afterCallClaimsDocument = function (params, error) {
            new ClaimsDocument();
        };

        var afterCallClaimsPersonCompany = function (params, error) {
            new ClaimsPersonCompany();
        };

        var afterCallClaimsLackPeriod = function (params, error) {
            new ClaimsLackPeriod();
        };

	        var afterCallEstimationTypeStatus = function (params, error) {
                new EstimationTypeStatus();
            };

            var afterCallEstimationTypePrefix = function (params, error) {
                new EstimationTypePrefix();
                new EstimationTypePrefixRequest();
            };

            var afterCallNotice = function (params, error) {
                new Notice();
                new NoticeRequest();
            };

            var afterCallSalvage = function (params, error) {
                new Salvage();
                new SalvageRequest();
            };

            var afterCallPaymentRequest = function (params, error) {
                new Payment();
                new ClaimsPaymentRequest();
            };

            var afterCallCharge = function (params, error) {
                new Charge();
                new ChargeRequest();
            };

            var afterCallClaimVehicle = function (params, error) {
                glClaimOption = 1;
                new Claim();
                new ClaimEstimation();
                new ClaimEstimationRequest();
                new ClaimVehicle();
                new ClaimVehicleRequest();
            };

            var afterCallClaimLocation = function (params, error) {
                glClaimOption = 2;
                new Claim();
                new ClaimEstimation();
                new ClaimEstimationRequest();
                new ClaimLocation();
                new ClaimLocationRequest();
            };

            var afterCallClaimSurety = function (params, error) {
                glClaimOption = 3;
                new Claim();
                new ClaimEstimation();
                new ClaimEstimationRequest();
                new ClaimSurety();
                new ClaimSuretyRequest();
            };

            var afterCallClaimTransport = function (params, error) {
                glClaimOption = 4;
                new Claim();
                new ClaimEstimation();
                new ClaimEstimationRequest();
                new ClaimTransport();
                new ClaimTransportRequest();
            };

            var afterCallClaimAirCraft = function (params, error) {
                glClaimOption = 5;
                new Claim();
                new ClaimEstimation();
                new ClaimEstimationRequest();
                new ClaimAirCraft();
                new ClaimAirCraftRequest();
            };

            var afterCallClaimFidelity = function (params, error) {
                glClaimOption = 6;
                new Claim();
                new ClaimEstimation();
                new ClaimEstimationRequest();
                new ClaimFidelity();
                new ClaimFidelityRequest();
            };

            var afterCallRequestCancellation = function (params, error) {
                new RequestCancellation();
                new RequestCancellationRequest();
                new ClaimsPaymentRequest();
            };

            var afterCallRecovery = function (params, error) {
                new Recovery();
                new RecoveryRequest();
            };

            var afterCallNoticeVehicle = function (params, error) {
                glNoticeOption = 1;
                new Notice();
                new NoticeRequest();
                new NoticeVehicle();
                new NoticeVehicleRequest();
            };

            var afterCallNoticeLocation = function (params, error) {
                glNoticeOption = 2;
                new Notice();
                new NoticeRequest();
                new NoticeLocation();
                new NoticeLocationRequest();
            };

            var afterCallNoticeSurety = function (params, error) {
                glNoticeOption = 3;
                new Notice();
                new NoticeRequest();
                new NoticeSurety();
                new NoticeSuretyRequest();
            };

            var afterCallNoticeTransport = function (params, error) {
                glNoticeOption = 4;
                new Notice();
                new NoticeRequest();
                new NoticeTransport();
                new NoticeTransportRequest();
            };

            var afterCallNoticeAirCraft = function (params, error) {
                glNoticeOption = 5;
                new Notice();
                new NoticeRequest();
                new NoticeAirCraft();
                new NoticeAirCraftRequest();
            };

            var afterCallNoticeFidelity = function (params, error) {
                glNoticeOption = 6;
                new Notice();
                new NoticeRequest();
                new NoticeFidelity();
                new NoticeFidelityRequest();
            };

            var afterCallConfigurationPanels = function (params, error) {
                new ConfigurationPanels();
                new ConfigurationPanelsRequest();
            };

            var afterSearch = function (params, error) {
                new ClaimSearch();
                new ClaimSearchRequest();
            };

            var afterSetClaimReserve = function (params, error) {
                new SetClaimReserve();
                new SetClaimReserveRequest();
            };

            var afterCallAutomaticSalaryUpdate = function (params, error) {
                new AutomaticSalaryUpdate();
                new AutomaticSalaryUpdateRequest();
            };

	/* Claims */

        /*AutomaticQuota*/
        var afterCallAutomaticQuota = function (params, error) {
            new AutomaticQuota();
            new AdvancedSearchAutomaticQuota();
            new AutomaticQuotaRequest();
        };
        /*AutomaticQuota*/
        var afterCallRiskJudicialSurety = function (params, error) {
            if (glbPolicy != null && glbPolicy.Id > 0) {
                new RiskJudicialSurety();
                new RiskBeneficiary();
                new RiskClause();
                new RiskText();
                new ObjectCrossGuaranteesRiskJudicialSurety();
                new ObjectAdditionalDataRiskJudicialSurety();
            } else {
                ExecuteUnderwriting();
            }
        }
        router.add("prtRiskJudicialSurety", rootPath + "Underwriting/RiskJudicialSurety/JudicialSurety", afterCallRiskJudicialSurety);

        var afterCallCoverageRiskJudicialSurety = function (params, error) {
            if (glbPolicy != null && glbRisk.Id > 0) {
                new CoverageJudicialSurety();
                new TextsCoverage();
                new ClausesCoverage();
                //new ConceptsCoverage();
            } else {
                ExecuteUnderwriting();
            }
        }

        router.add("prtCoverageRiskJudicialSurety", rootPath + "Underwriting/RiskJudicialSurety/CoverageJudicialSurety", afterCallCoverageRiskJudicialSurety);

        var afterCallRiskFidelity = function (params, error) {
            if (glbPolicy != null && glbPolicy.Id > 0) {
                new RiskFidelity();
                new RiskBeneficiary();
                new RiskClause();
                new RiskText();
                //new RiskConcepts();
            }
        }
        var afterCallRiskFidelityCoverage = function (params, error) {
            if (glbPolicy != null && glbRisk.Id > 0) {
                new RiskFidelityCoverage();
                new TextsCoverage();
                new ClausesCoverage();
                new ConceptsCoverage();
            } else {
                ExecuteUnderwriting();
            }
        }
        router.add("prtCoverageRiskFidelity", rootPath + "Underwriting/RiskFidelity/Coverage", afterCallRiskFidelityCoverage);
        var afterCallMassiveVehicleFasecolda = function (params, error) {
            new MassiveVehicleFasecolda();
            new MassiveVehicleFasecoldaRequest();
        }

        var afterCallEventsSarlaft = function (params, error) {
            new EventsSarlaft();
            new EventsSarlaftRequest();
            new EventsSarlaftAdvanceSearch();
        }

        var afterCallEconomicGroup = function(params, error){
            new EconomicGroup();
            new EconomicGroupRequest();
            new AdvancedSearchGroup();
            new AdvancedSearchGroupRequest();
        }

        var afterCallGuaranteeStatusRoute = function (params, error) {
            new GuaranteeStatusRoute();
            new GuaranteeStatusRouteRequest();
        }

	    var afterCallEditBasicInfo = function (params, error) {
                new EditBasicInfo();
        }
        var afterCallContractObject = function (params, error) {
            new ContractObject();
            new ContractObjectRequest();
        }

        var afterCallProductArticle = function (params, error) {
            new ProductArticle();
            new ProductArticleRequest();
            new ProductArticleSearch();
        }
        var afterCallArticleLine = function (params, error) {
            new ArticleLine();
            new ArticleLineRequest();
            new ArticleLineSearch();
        }
        var afterCallCourtType = function (params, error) {
            new CourtType();
            new CourtTypeRequest();
            new CourtTypeSearch();
        }

        //TODO Crear función que genera las instancias de las clases JS
        router.add("prtEconomicGroup", rootPath + "Person/EconomicGroup/EconomicGroup", afterCallEconomicGroup);
        router.add("prtTemporal", rootPath + "Underwriting/Underwriting/Temporal", afterCallTemporal);
        router.add("prtQuotation", rootPath + "Underwriting/Underwriting/Quotation", afterCallQuotation);
        router.add("prtRiskVehicle", rootPath + "Underwriting/RiskVehicle/Vehicle", afterCallRiskVehicle);
        router.add("prtRiskFidelity", rootPath + "Underwriting/RiskFidelity/Fidelity", afterCallRiskFidelity);
	    router.add("prtRiskLiability", rootPath + "Underwriting/RiskLiability/Liability", afterCallRiskLiability);
        router.add("prtRiskThirdPartyLiability", rootPath + "Underwriting/RiskThirdPartyLiability/ThirdPartyLiability", afterCallRiskThirdPartyLiability);
        router.add("prtRiskProperty", rootPath + "Underwriting/RiskProperty/Property", afterCallRiskProperty);
	//transports
        router.add("prtRisktransport", rootPath + "Underwriting/RiskTransport/Transport", afterCallRiskTransport);
        router.add("prtRisktransportCoverage", rootPath + "Underwriting/RiskTransport/RiskTransportCoverage", afterCallRiskTransportCoverage);
        router.add("prtDeclaration", rootPath + "Endorsement/Declaration/Declaration", afterDeclaration);
        router.add("prtAdjustment", rootPath + "Endorsement/Adjustment/Adjustment", afterAdjustment);
        router.add("prtCreditNote", rootPath + "Endorsement/CreditNote/CreditNote", afterCreditNote);


        router.add("prtInsuredObjectRiskProperty", rootPath + "Underwriting/RiskProperty/InsuredObject", afterCallInsuredObjectRiskProperty);
        router.add("prtCoverageRiskThirdPartyLiability", rootPath + "Underwriting/RiskThirdPartyLiability/Coverage", afterCallCoverageRiskThirdPartyLiability);
        router.add("prtCoverageRiskLiability", rootPath + "Underwriting/RiskLiability/Coverage", afterCallCoverageRiskLiability);
        router.add("prtRiskSurety", rootPath + "Underwriting/RiskSurety/Surety", afterCallRiskSurety);//
        //router.add("prtRiskGuarantee", rootPath + "Guarantees/Guarantees/Guarantees", afterCallRiskSurety);
        router.add("prtCoverageRiskVehicle", rootPath + "Underwriting/RiskVehicle/Coverage", afterCallCoverageRiskVehicle);
        router.add("prtCoverageRiskSurety", rootPath + "Underwriting/RiskSurety/Coverage", afterCallCoverageRiskSurety);
        router.add("prtUniqueUser", rootPath + "UniqueUser/UniqueUser/UniqueUser", afterCallUniqueUser);
        router.add("prtModule", rootPath + "UniqueUser/Module/Module", afterCallModule);
        router.add("prtSubModule", rootPath + "UniqueUser/SubModule/SubModule", afterCallSubModule);
        router.add("prtProfile", rootPath + "UniqueUser/Profile/Profile", afterCallProfile);
        router.add("prtAccess", rootPath + "UniqueUser/Access/Access", afterCallAccess);
        router.add("prtChangePassword", rootPath + "Account/ChangePassword", afterCallChangePassword);
        router.add("prtAuthorize", rootPath + "AuthorizationPolicies/Authorize/Index", afterCallAuthorize);
        router.add("prtPolicies", rootPath + "AuthorizationPolicies/Policies/Index", afterCallPolicies);
        router.add("prtPoliciesRules", rootPath + "AuthorizationPolicies/Policies/Rules", afterCallPoliciesRules);
        router.add("prtRulesSet", rootPath + "RulesAndScripts/RuleSet/Index", afterCallRulesSet);
        router.add("prtRulesSetCache", rootPath + "RulesAndScripts/RuleSetCache/SearchRecords", afterCallRulesSetCache);
        router.add("prtDecisionTable", rootPath + "RulesAndScripts/DecisionTable/Index", afterCallDecisionTable);
        router.add("prtDecisionTableHeader", rootPath + "RulesAndScripts/DecisionTable/Header", afterCallDecisionTableHeader);
        router.add("prtDecisionTableData", rootPath + "RulesAndScripts/DecisionTable/Data", afterCallDecisionTableData);
        router.add("prtDecisionTableFile", rootPath + "RulesAndScripts/DecisionTable/LoadFromFile", afterCallDecisionTableFile);
        router.add("prtParametrizationPrefix", rootPath + "Parametrization/Prefix/Prefix", afterCallParametrizationPrefix);
        router.add("prtMassive", rootPath + "Massive/Massive/Massive", afterCallMassive);
        router.add("prtMassiveProcess", rootPath + "Massive/MassiveProcess/MassiveProcess", afterCallMassiveProcess);
        router.add("prtRequestGrouping", rootPath + "Massive/RequestGrouping/RequestGrouping", afterCallRequestGrouping);
        router.add("prtRenewalRequestGrouping", rootPath + "Massive/RenewalRequestGrouping/RenewalRequestGrouping", afterCallRenewalRequestGrouping);
        router.add("prtPreRenewal", rootPath + "Massive/Renewal/Renewal", afterCallPreRenewal);
        //router.add("prtGuarantee", rootPath + "Person/Guarantee/Guarantee", afterCallGuarantee);
        router.add("prtGuaranteeE", rootPath + "Guarantees/Guarantees/Guarantees", afterCallGuarantee);
        router.add("prtGuarantees", rootPath + "Guarantees/Guarantees/SearchInsured", afterCallSearchInsured);
        router.add("prtIssueWithEvent", rootPath + "Underwriting/Underwriting/IssueWithEvent", afterCallIssueWithEvent);
        router.add("prtPaymetPlanParametrization", rootPath + "Parametrization/PaymentPlan/PaymentPlan", afterCallPaymetPlanParametrization);
        router.add("prtVariable", rootPath + "Parametrization/Variable/Variable", afterCallVariable);
        router.add("prtClauseParametrization", rootPath + "Parametrization/Clauses/Clause", afterCallClauseParametrization);
        router.add("prtPerilParametrization", rootPath + "Parametrization/Protection/Protection", afterCallProtectionParametrization);
        router.add("prtSurcharge", rootPath + "Parametrization/Surcharge/Surcharge", afterCallSurcharge);
        router.add("prtDiscount", rootPath + "Parametrization/Discount/Discount", afterCallDiscount);
        router.add("prtDetailParametrization", rootPath + "Parametrization/Detail/Detail", afterCallDetailParametrization);
        router.add("prtSubLineBusinessParametrization", rootPath + "Parametrization/SubLineBusiness/SubLineBusiness", afterCallSubLineBusinessParametrization);
        router.add("prtLineBusinessParametrization", rootPath + "Parametrization/LineBusiness/LineBusiness", afterCallLineBusinessParametrization);
        router.add("prtBranchParametrization", rootPath + "Parametrization/Branch/Branch", afterCallBranchParametrization);
        router.add("prtSalePointParametrization", rootPath + "Parametrization/SalePoint/SalePoint", afterCallSalePointParametrization);
        router.add("prtInsuredObject", rootPath + "Parametrization/InsuredObject/InsuredObject", afterCallInsurancesObjects);
        router.add("prtCoverageGroupParametrization", rootPath + "Parametrization/CoverageGroup/CoverageGroup", afterCallCoverageGroupParametrization);
        router.add("prtCoverageParametrization", rootPath + "Parametrization/Coverage/Coverage", afterCallCoverageParametrization);
        router.add("prtParametrizationAssistanceType", rootPath + "Parametrization/AssistanceType/AssistanceType", afterCallParametrizationAssistanceType);
        router.add("prtProduct2G", rootPath + "Parametrization/Product2G/Product2G", afterCallParametrizationProduct2G);
        router.add("prtQuotationNumerationParametrization", rootPath + "Parametrization/QuotationNumeration/QuotationNumeration", afterCallQuotationNumerationParametrization);
        router.add("prtFasecoldaParametrization", rootPath + "Parametrization/Vehicle/Fasecolda", afterCallFasecoldaParametrization);
        router.add("prtPolicyNumerationParametrization", rootPath + "Parametrization/PolicyNumeration/PolicyNumeration", afterCallPolicyNumerationParametrization);
        router.add("prtTechnicalPlan", rootPath + "Parametrization/TechnicalPlan/TechnicalPlan", afterCallTechnicalPlanParametrization);
        router.add("prtVehicleVersionParametrization", rootPath + "Parametrization/VehicleVersion/VehicleVersion", afterCallVehiculeVersionParametrization);
        router.add("prtDeductibleParametrization", rootPath + "Parametrization/Deductible/Deductible", afterCallDeductibleParametrization);
        router.add("prtExpenseParametrization", rootPath + "Parametrization/Expense/Expense", afterCallExpenseParametrization);
        router.add("prtVehicleModel", rootPath + "Parametrization/VehicleModel/VehicleModel", afterCallVehicleModel);
        router.add("prtPaymentMethodParametrization", rootPath + "Parametrization/PaymentMethod/PaymentMethod", afterCallPaymentMethod);
        router.add("prtDinamicParametrization", rootPath + "Parametrization/Dynamic/Dynamic", afterCallDynamicParametrization);
        router.add("prtRatingZoneParametrization", rootPath + "Parametrization/RatingZone/RatingZone", afterCallRatingZoneParametrization);
        router.add("prtListEntity", rootPath + "RulesScripts/Concepts/ListEntity", afterCallListEntity);
        router.add("prtRangeEntity", rootPath + "RulesScripts/Concepts/RangeEntity", afterCallRangeEntity);
        router.add("prtFinancialPlan", rootPath + "Parametrization/FinancialPlan/FinancialPlan", afterCallFinancialPlan);
        router.add("prtLimitRc", rootPath + "Parametrization/LimitRc/LimitRc", afterCallLimitRc);
        router.add("prtVehicleVersionYear", rootPath + "Parametrization/VehicleVersionYear/Index", afterCallVehicleVersionYearParametrization);
        router.add("prtReportConsultPolice", rootPath + "Reports/ConsultPolicies/ConsultPolice", afterCallReportConsultPolice);
        router.add("prtReportFasecolda", rootPath + "ReportsFasecolda/Fasecolda/SearchSisa", afterCallReportFasecolda);
        router.add("prtReportRenovation", rootPath + "Reports/ReportRenovation/ReportRenovation", afterCallReportRenovation);
        router.add("prtReportLogFaseColda", rootPath + "ReportsFasecolda/Fasecolda/LogFaseColda", afterCallReportLogFaseColda);
        //router.add("prtReportCexper", rootPath + "ReportsFasecolda/Cexper/SearchCexper", afterCallReportSearchCexper);
        router.add("prtGroundsRejection", rootPath + "ParamAuthorizationPolicies/GroundsRejection/GroundsRejection", afterCallGroundsRejection);
        router.add("prtDelegationParametrization", rootPath + "ParamAuthorizationPolicies/Delegation/Delegation", afterCallDelegationParametrization);
        router.add("prtReportIncentive", rootPath + "Reports/Incentive/SearchIncentive", afterCallReportSearchIncentive);
        router.add("prtTax", rootPath + "Parametrization/Tax/Tax", afterCallTax);
        router.add("prtCategoryTax", rootPath + "Parametrization/Tax/CategoryTax", afterCallCategoryTax);
        router.add("prtConditionTax", rootPath + "Parametrization/Tax/ConditionTax", afterCallConditionTax);
        router.add("prtRateTax", rootPath + "Parametrization/Tax/RateTax", afterCallRateTax);
        router.add("prtWallet", rootPath + "Reports/Wallet/Wallet", afterCallWallet);
        router.add("prtReportVehicleIndicators", rootPath + "Reports/Quotation/VehicleIndicators", afterCallReportVehicleIndicators);
        router.add("prtBasicInformation", rootPath + "Person/Person/BasicInformation", afterCallPersonBasicInformation);
        router.add("prtReportScoreCredit", rootPath + "Reports/ScoreCredit/ScoreCredit", afterCallScoreCredit);
        router.add("prtGroupPolicies", rootPath + "AuthorizationPolicies/GroupPolicies/GroupPolicies", afterCallGroupPolicies);
        router.add("prtAllyCoverage", rootPath + "Parametrization/AllyCoverage/AllyCoverage", afterCallAllyCoverage);
        router.add("prtReportAuthorizationPolicies", rootPath + "AuthorizationPolicies/ReportAuthorizationPolicies/ReportAuthorizationPolicies", afterCallReportAuthorizationPolices);
        router.add("prtReassignPolicies", rootPath + "AuthorizationPolicies/ReassignPolicies/ReassignPolicies", afterCallReassignPolicies);
        router.add("prtPerson", rootPath + "Person/Person/Persons", afterCallPerson);
        router.add("prtPersonNatural", rootPath + "Person/Person/PersonNatural", afterCallPersonNatural);
        router.add("prtPersonLegal", rootPath + "Person/Person/PersonLegal", afterCallPersonLegal);
        router.add("prtProspectusNatural", rootPath + "Person/Person/ProspectusNatural", afterCallProspectusNatural);
        router.add("prtProspectusLegal", rootPath + "Person/Person/ProspectusLegal", afterCallProspectusLegal);
        router.add("prtTradeProduc", rootPath + "Product/Product/Product", afterCallProduct);
        router.add("prtParametrizationCity", rootPath + "Parametrization/City/City", afterCallCity);
        router.add("prtMinPremiunRelation", rootPath + "Parametrization/MinPremiunRelation/MinPremiunRelation", afterCallMinPremiunRelation);
        router.add("prtConditionText", rootPath + "Parametrization/ConditionText/ConditionText", afterCallConditionText);
        router.add("prtSUP", rootPath + "Sup/Sup/Sup", afterCallSUP);
        router.add("prtParametrizationCoverageValue", rootPath + "Parametrization/CoverageValue/CoverageValue", afterCallCoverageValue);
        router.add("prtReportCexper", rootPath + "Externals/Cexper/Cexper", afterCallCexper);
        router.add("prtBillingPeriod", rootPath + "Parametrization/BillingPeriod/BillingPeriod", aftercallBillingPeriod);
        router.add("prtBusinessTypes", rootPath + "Parametrization/BusinessType/BusinessType", afterCallBusinessTypes);
        router.add("prtLegalRepresentative", rootPath + "Sarlaft/Sarlaft", afterCallLegalRepresentative);
        router.add("prtReportFasecoldaSISA", rootPath + "Externals/FasecoldaSisa/FasecoldaSisa", afterCallFasecoldaSISA);
        router.add("prtProductionReport", rootPath + "Underwriting/ProductionReport/ProductionReport", afterCallProductionReport);
        router.add("prtSarlaft", rootPath + "Sarlaft/Sarlaft/Sarlaft", afterCallSarlaft);
        router.add("prtListRiskPreson", rootPath + "ListRiskPerson/ListRiskPerson/ListRiskPerson", afterCallListRiskPreson);
        router.add("prtQuotaOperational", rootPath + "QuotaOperational/QuotaOperational/QuotaOperational", afterCallQuotaOperational);
        router.add("prtListRiskFile", rootPath + "ListRiskPerson/ListRiskFile/ListRiskFile", afterCallListRiskFile);
        router.add("prtMatchingProcess", rootPath + "ListRiskPerson/MatchingProcess/MatchingProcess", afterCallMatchingProcess);
        router.add("prtWorkFlowPolicies", rootPath + "AuthorizationPolicies/WorkFlowPolicies/WorkFlowPolicies", afterCallWorkFlowPolicies);
        //router.add("prtProspectNatural", rootPath + "Prospect/Prospect/ProspectusNatural", afterCallProspectNatural);
        router.add("prtSubscriptionSearch", rootPath + "Underwriting/SearchUnderwriting/SubscriptionSearch", afterCallSubscriptionSearch);
        router.add("prtAuthorizationSarlaftOperation", rootPath + "AuthorizationPolicies/AuthorizationSarlaftOperation/AuthorizationSarlaftOperation", afterCallAuthorizationSarlaftOperation);
        router.add("prtAuthorizationPersonRiskList", rootPath + "AuthorizationPolicies/AuthorizationPersonRiskList/AuthorizationPersonRiskList", afterCallAuthorizationPersonRiskList);
        router.add("prtVehicleFasecolda", rootPath + "MassiveVehicleFasecolda/MassiveVehicleFasecolda/MassiveVehicleFasecolda", afterCallMassiveVehicleFasecolda);
        router.add("prtEventsSarlaft", rootPath + "EventsSarlaft/EventsSarlaft/EventsSarlaft", afterCallEventsSarlaft);
        router.add("prtTextPrecatalogued", rootPath + "Parametrization/TextPrecatalogued/TextPrecatalogued", afterTextPrecatalogued);
        router.add("prtEditBasicInfo", rootPath + "Person/Person/EditBasicInfo", afterCallEditBasicInfo);
        router.add("prtContractObject", rootPath + "Underwriting/ContractObject/ContractObject", afterCallContractObject);

	    /*Claims*/
        router.add("prtClaimsAssociation", rootPath + "Parametrization/ClaimsAssociation/ClaimsAssociation", afterCallClaimsAssociation);
        router.add("prtClaimsLackPeriod", rootPath + "Parametrization/ClaimsLackPeriod/ClaimsLackPeriod", afterCallClaimsLackPeriod);
        router.add("prtClaimsSubCause", rootPath + "Parametrization/ClaimsSubCause/ClaimsSubCause", afterCallClaimsSubCause);
        router.add("prtClaimsPersonCompany", rootPath + "Parametrization/ClaimsPersonCompany/ClaimsPersonCompany", afterCallClaimsPersonCompany);
        router.add("prtClaimsDocument", rootPath + "Parametrization/ClaimsDocument/ClaimsDocument", afterCallClaimsDocument);
        router.add("prtCauseCoverage", rootPath + "Parametrization/CauseCoverage/CauseCoverage", afterCallCauseCoverage);
        router.add("prtEstimationTypePrefix", rootPath + "Parametrization/EstimationTypePrefix/EstimationTypePrefix", afterCallEstimationTypePrefix);
        router.add("prtEstimationTypeStatus", rootPath + "Parametrization/EstimationTypeStatus/EstimationTypeStatus", afterCallEstimationTypeStatus);
        //router.add("prtNotice", rootPath + "Claims/Notice/Notice", afterCallNotice);
	    router.add("prtSalvage", rootPath + "Claims/Salvage/Salvage", afterCallSalvage);
        router.add("prtPaymentRequest", rootPath + "Claims/PaymentRequest/PaymentRequest", afterCallPaymentRequest);
        router.add("prtCharge", rootPath + "Claims/Charge/Charge", afterCallCharge);
        router.add("prtClaimSurety", rootPath + "Claims/Claim/MasterClaim", afterCallClaimSurety);
        router.add("prtClaimVehicle", rootPath + "Claims/Claim/MasterClaim", afterCallClaimVehicle);
        router.add("prtClaimLocation", rootPath + "Claims/Claim/MasterClaim", afterCallClaimLocation);
        router.add("prtClaimTransport", rootPath + "Claims/Claim/MasterClaim", afterCallClaimTransport);
        router.add("prtClaimAirCraft", rootPath + "Claims/Claim/MasterClaim", afterCallClaimAirCraft);
        router.add("prtClaimFidelity", rootPath + "Claims/Claim/MasterClaim", afterCallClaimFidelity);
        router.add("prtNoticeVehicle", rootPath + "Claims/Notice/MasterNotice/1", afterCallNoticeVehicle);
        router.add("prtNoticeLocation", rootPath + "Claims/Notice/MasterNotice/2", afterCallNoticeLocation);
        router.add("prtNoticeSurety", rootPath + "Claims/Notice/MasterNotice/3", afterCallNoticeSurety);
        router.add("prtNoticeTransport", rootPath + "Claims/Notice/MasterNotice/4", afterCallNoticeTransport);
        router.add("prtNoticeAirCraft", rootPath + "Claims/Notice/MasterNotice/5", afterCallNoticeAirCraft);
        router.add("prtNoticeFidelity", rootPath + "Claims/Notice/MasterNotice/6", afterCallNoticeFidelity);
        router.add("prtSetClaimReseve", rootPath + "Claims/SetClaimReserve/SetClaimReserve", afterSetClaimReserve);
        router.add("prtRequestCancellation", rootPath + "Claims/RequestCancellation/RequestCancellation", afterCallRequestCancellation);
        router.add("prtRecovery", rootPath + "Claims/Recovery/Recovery", afterCallRecovery);
        router.add("prtConfigurationPanels", rootPath + "Parametrization/ConfigurationPanels/ConfigurationPanels", afterCallConfigurationPanels);
        router.add("prtSearch", rootPath + "Claims/ClaimSearch/Search", afterSearch);
        router.add("prtAutomaticSalaryUpdate", rootPath + "Claims/AutomaticSalaryUpdate/AutomaticSalaryUpdate", afterCallAutomaticSalaryUpdate);
        router.add("prtAutomaticQuota", rootPath + "AutomaticQuota/AutomaticQuota/Index", afterCallAutomaticQuota);

        router.add("prtGuaranteeStatusRoute", rootPath + "Parametrization/GuaranteeStatusRoute/GuaranteeStatusRoute", afterCallGuaranteeStatusRoute);
        router.add("prtTaxConceptsExpenses", rootPath + "Parametrization/TaxConceptsExpenses/TaxConceptsExpenses", afterTaxConceptsExpenses);

        router.add("prtProductArticle", rootPath + "Parametrization/JudicialSurety/ArticleProduct", afterCallProductArticle);
        router.add("prtArticleLine", rootPath + "Parametrization/JudicialSurety/ArticleLine", afterCallArticleLine);
        router.add("prtCourtType", rootPath + "Parametrization/JudicialSurety/CourtType", afterCallCourtType);

        /*Claims*/
	    //router.add("prtRiskMarine", rootPath + "Underwriting/RiskMarine/Marine", afterCallRiskMarine);
        //router.add("prtRiskAircraft", rootPath + "Underwriting/RiskAircraft/Aircraft", afterCallRiskAircraft);

        var GetQueryParameter = function (parameterName) {
            var queryParameters = window.location.search.substring(1);
            var parameters = queryParameters.split("&");
            for (var i = 0; i < parameters.length; i++) {
                var parameter = parameters[i].split("=");
                if (parameter[0] == parameterName) {
                    return parameter[1];
                }
            }
        }

        var ExecuteUnderwriting = function () {

            if (GetQueryParameter('type') == 1) {
                router.run("prtQuotation");
            }
            else if (GetQueryParameter('type') == 2) {
                router.run("prtTemporal");
            }
            else if (GetQueryParameter('type') == 3) {
                router.run("prtUniqueUser");
            }
            else if (GetQueryParameter('type') == 4) {
                router.run("prtModule");
            }
            else if (GetQueryParameter('type') == 5) {
                router.run("prtSubModule");
            }
            else if (GetQueryParameter('type') == 6) {
                router.run("prtProfile");
            }
            else if (GetQueryParameter('type') == 7) {
                //new AdvancedSearch();
                if (GetQueryParameter('typeGuarantee') == 1) {
                    router.run("prtPersonNatural");
                }
                else if (GetQueryParameter('typeGuarantee') == 2) {
                    router.run("prtPersonLegal");
                }
                else {
                    MainRequest.GetParameters().done(function (data) {
                        if (data.success) {
                            var parametersType = data.result.find(GetParameterType, ['PersonType']);
                            var personType = parametersType.Value;
                            switch (personType) {
                                case TypePerson.PersonNatural:
                                    router.run("prtPersonNatural");
                                    break;
                                case TypePerson.PersonLegal:
                                    router.run("prtPersonLegal");
                                    break;
                                case TypePerson.ProspectNatural:
                                    router.run("prtProspectusNatural");
                                    break;
                                case TypePerson.ProspectLegal:
                                    router.run("prtProspectusLegal");
                                    break;
                                default:
                                    break;
                            }
                        }
                    });
                }
            }
            else if (GetQueryParameter('type') == 8) {
                router.run("prtAccess");
            }
            else if (GetQueryParameter('type') == 9) {
                router.run("prtChangePassword");
            }
            else if (GetQueryParameter('type') == 11) {
                router.run("prtAuthorize");
            }
            else if (GetQueryParameter('type') == 12) {
                router.run("prtPolicies");
            }
            else if (GetQueryParameter('type') == 13) {
                router.run("prtRulesSet");
            }
            else if (GetQueryParameter('type') == 14) {
                router.run("prtDecisionTable");
            }
            else if (GetQueryParameter('type') == 15) {
                router.run("prtParametrizationPrefix");
            }
            else if (GetQueryParameter('type') == 16) {
                router.run("prtMassive");
            }
            else if (GetQueryParameter('type') == 17) {
                router.run("prtRequestGrouping");
            }
            else if (GetQueryParameter('type') == 18) {
                router.run("prtRenewalRequestGrouping");
            }
            else if (GetQueryParameter('type') == 19) {
                router.run("prtPreRenewal");
            }
            else if (GetQueryParameter('type') == 20) {
                router.run("prtIssueWithEvent");
            }
            else if (GetQueryParameter('type') == 21) {
                router.run("prtPaymetPlanParametrization");
            }
            else if (GetQueryParameter('type') == 22) {
                router.run("prtDeductibleParametrization");
            }
            else if (GetQueryParameter('type') == 23) {
                router.run("prtVariable");
            }
            else if (GetQueryParameter('type') == 24) {
                router.run("prtProduct2G");
            }
            else if (GetQueryParameter('type') == 25) {
                router.run("prtDiscount");
            }
            else if (GetQueryParameter('type') == 26) {
                router.run("prtSurcharge");
            }
            else if (GetQueryParameter('type') == 27) {
                router.run("prtInsuredObject");
            }
            else if (GetQueryParameter('type') == 28) {
                router.run("prtParametrizationAssistanceType");
            }
            else if (GetQueryParameter('type') == 29) {
                router.run("prtLineBusinessParametrization");
            }
            else if (GetQueryParameter('type') == 30) {
                router.run("prtBranchParametrization");
            }
            else if (GetQueryParameter('type') == 31) {
                router.run("prtPerilParametrization");
            }
            else if (GetQueryParameter('type') == 32) {
                router.run("prtDetailParametrization");
            }
            else if (GetQueryParameter('type') == 80) {
                router.run("prtLimitRc");
            }
            else if (GetQueryParameter('type') == 82) {
                router.run("prtListEntity");
            }
            else if (GetQueryParameter('type') == 83) {
                router.run("prtRangeEntity");
            }
            else if (GetQueryParameter('type') == 37) {
                router.run("prtSubLineBusinessParametrization");
            }
            else if (GetQueryParameter('type') == 39) {
                router.run("prtSalePointParametrization");
            }
            else if (GetQueryParameter('type') == 33) {
                router.run("prtCoverageGroupParametrization");
            }
            else if (GetQueryParameter('type') == 40) {
                router.run("prtCoverageParametrization");
            }
            else if (GetQueryParameter('type') == 74) {
                router.run("prtExpenseParametrization");
            }
            else if (GetQueryParameter('type') == 76) {
                router.run("prtPaymentMethodParametrization");
            }
            else if (GetQueryParameter('type') == 41) {
                router.run("prtClauseParametrization");
            }
            else if (GetQueryParameter('type') == 77) {
                router.run("prtVehicleModel");
            }
            else if (GetQueryParameter('type') == 81) {
                router.run("prtFasecoldaParametrization");
            }
            else if (GetQueryParameter('type') == 34) {
                router.run("prtPolicyNumerationParametrization");
            }
            else if (GetQueryParameter('type') == 35) {
                router.run("prtQuotationNumerationParametrization");
            }
            else if (GetQueryParameter('type') == 78) {
                router.run("prtVehicleVersionParametrization");
            }
            else if (GetQueryParameter('type') == 36) {
                router.run("prtRatingZoneParametrization");
            }
            else if (GetQueryParameter('type') == 38) {
                router.run("prtFinancialPlan");
            }
            else if (GetQueryParameter('type') == 79) {
                router.run("prtVehicleVersionYear");
            }
            else if (GetQueryParameter('type') == 75) {
                router.run("prtTechnicalPlan");
            }
            else if (GetQueryParameter('type') == 21) {
                router.run("prtReportFasecolda")
            }
            else if (GetQueryParameter('type') == 24) {
                router.run("prtReportRenovation")
            }
            else if (GetQueryParameter('type') == 22) {
                router.run("prtReportLogFaseColda")
            }
            else if (GetQueryParameter('type') == 23) {
                router.run("prtReportConsultPolice")
            }
            //else if (GetQueryParameter('type') == 25) {
            //    router.run("prtReportCexper")
            //}
            else if (GetQueryParameter('type') == 26) {
                router.run("prtReportVehicleIndicators")
            }
            else if (GetQueryParameter('type') == 84) {
                router.run("prtDelegationParametrization");
            }
            else if (GetQueryParameter('type') == 85) {
                router.run("prtGroundsRejection")
            }
            else if (GetQueryParameter('type') == 86) {
                router.run("prtReportIncentive")
            }
            else if (GetQueryParameter('type') == 42) {
                router.run("prtTax")
            }
            else if (GetQueryParameter('type') == 88) {
                router.run("prtGroupPolicies")
            }
            else if (GetQueryParameter('type') == 30) {
                router.run("prtWallet")
            }
            else if (GetQueryParameter('type') == 89) {
                router.run("prtBasicInformation")
            }
            else if (GetQueryParameter('type') == 90) {
                router.run("prtReportAuthorizationPolicies")
            }
            else if (GetQueryParameter('type') == 210) {
                router.run("prtReassignPolicies")
            }
            else if (GetQueryParameter('type') == 100) {
                router.run("prtReportScoreCredit")
            }
                //Parametrizacion de ciudades
            else if (GetQueryParameter('type') == 101) {
                router.run("prtParametrizationCity");
            }
            else if (GetQueryParameter('type') == 300) {
                router.run("prtTextPrecatalogued");
            }
            else if (GetQueryParameter('type') == 301) {
                router.run("prtValidationPlate");
            }
            else if (GetQueryParameter('type') == 115) {
                router.run("prtDeclaration");
            }
            else if (GetQueryParameter('type') == 116) {
                router.run("prtAdjustment");
            }
            else if (GetQueryParameter('type') == 117) {
                router.run("prtCreditNote");
            }
            else if (GetQueryParameter('type') == 154) {
                router.run("prtDocumentTypeRange");
            }
            else if (GetQueryParameter('type') == 500) {
                    router.run("prtConcessionaire");
            }

            else if (GetQueryParameter('type') == 3500) {
                router.run("prtAllyCoverage");
            }
            else if (GetQueryParameter('type') == 3501) {
                router.run("prtGuarantees");
            }
            else if (GetQueryParameter('type') == 91) {
                router.run("prtMinPremiunRelation");
            }
            else if (GetQueryParameter('type') == 92) {
                router.run("prtReportCexper");
            }
            else if (GetQueryParameter('type') == 93) {
                router.run("prtReportFasecoldaSISA");
            }
            else if (GetQueryParameter('type') == 94) {
                router.run("prtWorkFlowPolicies");
            }
            else if (GetQueryParameter('type') == 95) {
                router.run("prtProductionReport");
            }
            //Si se modifica el 4000, debe ir al archivo Uif2Co.js a cambiar en el objeto #btn-sup-access para cambiar la ruta.
            else if (GetQueryParameter('type') == 4000) {
                router.run("prtSUP");
            }
            else if (GetQueryParameter('type') == 191) {
                router.run("prtConditionText");
            }
            //Parametrizacion de pesos de coberturas
            else if (GetQueryParameter('type') == 102) {
                router.run("prtParametrizationCoverageValue")
            }
            else if (GetQueryParameter('type') == 3600) {
                router.run("prtBillingPeriod");
            }
            else if (GetQueryParameter('type') == 3700) {
                router.run("prtBusinessTypes");
            }

            else if (GetQueryParameter('type') == 4001) {
                router.run("prtLegalRepresentative");
            }

            else if (GetQueryParameter('type') == 43) {
                router.run("prtSarlaft");
            }

            else if (GetQueryParameter('type') == 97) {
                router.run("prtSubscriptionSearch");
            }
            else if (GetQueryParameter('type') == 110) {
                router.run("prtAuthorizationSarlaftOperation");
            }
            else if (GetQueryParameter('type') == 111) {
                router.run("prtAuthorizationPersonRiskList");
            }
            else if (GetQueryParameter('type') == 430) {
                router.run("prtTaxConceptsExpenses");
            }
        // Este menu se creo para la version de otros ramos.
            else if (GetQueryParameter('type') == 119) {
                router.run("prtListRiskPreson");
            }

	    /* Claims */
	        else if (GetQueryParameter('type') == 400) {
                router.run("prtCauseCoverage");
            }
            else if (GetQueryParameter('type') == 401) {
                router.run("prtEstimationTypeStatus");
            }
            else if (GetQueryParameter('type') == 403) {
                router.run("prtEstimationTypePrefix");
            }
            /*else if (GetQueryParameter('type') == 404) {
                router.run("prtNotice");
            }*/
            else if (GetQueryParameter('type') == 405) {
                router.run("prtSalvage");
            }
            else if (GetQueryParameter('type') == 406) {
                router.run("prtPaymentRequest");
            }
            else if (GetQueryParameter('type') == 407) {
                router.run("prtClaimVehicle");
            }
            else if (GetQueryParameter('type') == 408) {
                router.run("prtNoticeVehicle");
            }
            else if (GetQueryParameter('type') == 409) {
                router.run("prtNoticeLocation");
            }
            else if (GetQueryParameter('type') == 410) {
                router.run("prtNoticeSurety");
            }
            else if (GetQueryParameter('type') == 411) {
                router.run("prtRecovery");
            }
            else if (GetQueryParameter('type') == 412) {
                router.run("prtConfigurationPanels");
            }
            else if (GetQueryParameter('type') == 413) {
                router.run("prtSearch");
            }
            else if (GetQueryParameter('type') == 414) {
                router.run("prtCharge");
            }
            else if (GetQueryParameter('type') == 415) {
                router.run("prtClaimLocation");
            }
            else if (GetQueryParameter('type') == 416) {
                router.run("prtClaimSurety");
            }
            else if (GetQueryParameter('type') == 417) {
                router.run("prtRequestCancellation");
            }
            else if (GetQueryParameter('type') == 418) {
                router.run("prtSetClaimReseve");
            }
            else if (GetQueryParameter('type') == 419) {
                router.run("prtClaimTransport");
            }
            else if (GetQueryParameter('type') == 420) {
                router.run("prtNoticeTransport");
            }
            else if (GetQueryParameter('type') == 421) {
                router.run("prtNoticeAirCraft");
            }
            else if (GetQueryParameter('type') == 422) {
                router.run("prtClaimAirCraft");
            }
            else if (GetQueryParameter('type') == 423) {
                router.run("prtNoticeFidelity");
            }
            else if (GetQueryParameter('type') == 424) {
                router.run("prtClaimFidelity");
            }
            else if (GetQueryParameter('type') == 425) {
                router.run("prtClaimsSubCause");
            }
            else if (GetQueryParameter('type') == 426) {
                router.run("prtClaimsLackPeriod");
            }
            else if (GetQueryParameter('type') == 427) {
                router.run("prtClaimsAssociation");
            }
            else if (GetQueryParameter('type') == 428) {
                router.run("prtClaimsPersonCompany");
            }
            else if (GetQueryParameter('type') == 429) {
                router.run("prtClaimsDocument");
            }
            else if (GetQueryParameter('type') == 431) {
                router.run("prtAutomaticSalaryUpdate");
            }
            else if (GetQueryParameter('type') == 5000) {
                router.run("prtAutomaticQuota");
            }
	       /* End Claims */
           /*GuaranteeStatusRoute*/
           else if (GetQueryParameter('type') == 2000) {
                router.run("prtGuaranteeStatusRoute");
            }
            else if (GetQueryParameter('type') == 113) {
                router.run("prtListRiskFile");
            }
            else if (GetQueryParameter('type') == 114)
            {
                router.run("prtQuotaOperational");
            }
            else if (GetQueryParameter('type') == 118) {
                router.run("prtVehicleFasecolda");
            }
            // Este menu se creo para la version de interactivo.
            else if (GetQueryParameter('type') == 112) {
                router.run("prtListRiskPreson");
            }else if (GetQueryParameter('type') == 666) {
                router.run("prtRulesSetCache");
            }
            //else if (GetQueryParameter('type') == 3502) {
            //   router.run("prtProspectNatural");
            //}
            else if (GetQueryParameter('type') == 808) {
                router.run("prtMassiveProcess");
            }
            else if (GetQueryParameter('type') == 202) {
                router.run("prtEventsSarlaft");
            } else if (GetQueryParameter('type') == 203) {
                router.run("prtEconomicGroup");
            }  else if (GetQueryParameter('type') == 501) {
                router.run("prtEditBasicInfo");
            } else if (GetQueryParameter('type') == 1024) {
                router.run("prtContractObject");
            } else if (GetQueryParameter('type') == 1124) {
                router.run("prtMatchingProcess");
            }
            else if (GetQueryParameter('type') == 120) {
                router.run("prtTextPrecatalogued");
            }
            else if (GetQueryParameter('type') == 121) {
                router.run("prtProductArticle");
            }
            else if (GetQueryParameter('type') == 122) {
                router.run("prtArticleLine");
            }
            else if (GetQueryParameter('type') == 123) {
                router.run("prtCourtType");
            }

            else {
                router.run("prtDinamicParametrization");
            }

        }

        var GetParameterType = function (parameter) {
            return parameter.Description == this[0];
        };

        ExecuteUnderwriting();


    </script>
}

<script type="text/javascript">
    var policyModel = {};
    policyModel = '@Html.Raw(Json.Encode(Model))';
</script>

