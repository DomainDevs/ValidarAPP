/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.MassiveUnderwritingServices.EEProvider.MassiveLoadProcess.dict v1.0
 * FileSize=6977 Header=286 CRC=405066612
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.MassiveUnderwritingServices.EEProvider.Entities
{
    /// <summary>
    /// Definición de entidad MassiveLoadProcess.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.MassiveUnderwritingServices.EEProvider.MassiveLoadProcess.dict"),
    Serializable(),
    DescriptionKey("MASSIVE_LOAD_PROCESS_ENTITY"),
    TableMap(TableName="MASSIVE_LOAD_PROCESS", Schema="MSV"),
    ]
    public partial class MassiveLoadProcess :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string Id = "Id";
			public static readonly string MassiveLoadId = "MassiveLoadId";
			public static readonly string RowNumber = "RowNumber";
			public static readonly string TempId = "TempId";
			public static readonly string StatusId = "StatusId";
			public static readonly string HasError = "HasError";
			public static readonly string Observations = "Observations";
		}

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="id">Propiedad clave Id.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.Id, null);

            return new PrimaryKey<T>(keys);
        }

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="id">Propiedad clave Id.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>(int id)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.Id, id);

		    return new PrimaryKey<T>(keys);
	    }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<MassiveLoadProcess>();
        }

		/// <summary>
		/// Crea una clave primaria para esta clase.
		/// </summary>
		/// <param name="id">Propiedad clave Id.</param>
		public static PrimaryKey CreatePrimaryKey(int id)
	    {
			return InternalCreatePrimaryKey<MassiveLoadProcess>(id);
		}
#endregion

	    //*** Object Attributes ********************************

		/// <summary>
		/// Atributo para la propiedad MassiveLoadId.
		/// </summary>
        private int _massiveLoadId;
		/// <summary>
		/// Atributo para la propiedad RowNumber.
		/// </summary>
        private int _rowNumber;
		/// <summary>
		/// Atributo para la propiedad TempId.
		/// </summary>
        private int? _tempId = null;
		/// <summary>
		/// Atributo para la propiedad StatusId.
		/// </summary>
        private int? _statusId = null;
		/// <summary>
		/// Atributo para la propiedad HasError.
		/// </summary>
        private bool? _hasError = null;
		/// <summary>
		/// Atributo para la propiedad Observations.
		/// </summary>
        private string _observations = null;
	    //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        public MassiveLoadProcess() :
            this(MassiveLoadProcess.CreatePrimaryKey(), null)
        {
        }

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="id">Id key property.</param>
	    public MassiveLoadProcess(int id):
			this(MassiveLoadProcess.CreatePrimaryKey(id), null)
	    {
	    }

		/// <summary>
		/// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
		/// </summary>
		/// <param name="key">
		/// Identificador de la instancia de la entidad.
		/// </param>
		/// <param name="initialValues">
		/// Valores para establecer el estado de la instancia.
		/// </param>
	    public MassiveLoadProcess(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad Id.
		/// </summary>
		/// <value>Propiedad Id.</value>
	    [
		DescriptionKey("ID_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="ID", DbType=System.Data.DbType.String),
	    ]
        public int Id
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.Id];
		    }
		    set
		    {
				this._primaryKey[Properties.Id] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad MassiveLoadId.
		/// </summary>
		/// <value>Propiedad MassiveLoadId.</value>
	    [
		DescriptionKey("MASSIVE_LOAD_ID_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="MASSIVE_LOAD_ID", DbType=System.Data.DbType.String),
	    ]
        public int MassiveLoadId
	    {
		    get
		    {
			    return this._massiveLoadId;
		    }
		    set
		    {
				this._massiveLoadId = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad RowNumber.
		/// </summary>
		/// <value>Propiedad RowNumber.</value>
	    [
		DescriptionKey("ROW_NUMBER_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="ROW_NUMBER", DbType=System.Data.DbType.String),
	    ]
        public int RowNumber
	    {
		    get
		    {
			    return this._rowNumber;
		    }
		    set
		    {
				this._rowNumber = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad TempId.
		/// </summary>
		/// <value>Propiedad TempId.</value>
	    [
		DescriptionKey("TEMP_ID_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="TEMP_ID", DbType=System.Data.DbType.String),
	    ]
        public int? TempId
	    {
		    get
		    {
			    return this._tempId;
		    }
		    set
		    {
				this._tempId = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad StatusId.
		/// </summary>
		/// <value>Propiedad StatusId.</value>
	    [
		DescriptionKey("STATUS_ID_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="STATUS_ID", DbType=System.Data.DbType.String),
	    ]
        public int? StatusId
	    {
		    get
		    {
			    return this._statusId;
		    }
		    set
		    {
				this._statusId = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad HasError.
		/// </summary>
		/// <value>Propiedad HasError.</value>
	    [
		DescriptionKey("HAS_ERROR_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="HAS_ERROR", DbType=System.Data.DbType.String),
	    ]
        public bool? HasError
	    {
		    get
		    {
			    return this._hasError;
		    }
		    set
		    {
				this._hasError = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Observations.
		/// </summary>
		/// <value>Propiedad Observations.</value>
	    [
		DescriptionKey("OBSERVATIONS_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="OBSERVATIONS", DbType=System.Data.DbType.String),
	    ]
        public string Observations
	    {
		    get
		    {
			    return this._observations;
		    }
		    set
		    {
				this._observations = value;
			}
	    }

    }
}