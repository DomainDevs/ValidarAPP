/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.RulesScriptsServices.BasicType.dict v1.0
 * FileSize=3952 Header=259 CRC=563452064
 ******************************************/
using System;
using System.Collections;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System.Collections.Specialized;

namespace Sistran.Core.Application.RulesScriptsServices.EEProvider.Entities
{
    /// <summary>
    /// Definici√≥n de entidad BasicType.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.RulesScriptsServices.EEProvider.BasicType.dict"),
    Serializable(),
    DescriptionKey("BASIC_TYPE_ENTITY"),
    TableMap(TableName = "BASIC_TYPE", Schema = "PARAM"),
    ]
    public sealed class BasicType : BusinessObject2//ConstantBusinessObject, IDescriptionable
    {
        public enum Types
        {
            Number = 1,
            Text = 2,
            Decimal = 3,
            Date = 4,
            Long = 5,
            Boolean = 6
        }

        #region static
        public sealed class Properties
        {
            public static readonly string BasicTypeCode = "BasicTypeCode";
            public static readonly string Description = "Description";
            public static readonly string SystemType = "SystemType";

            private Properties()
            {
            }
        }

        private static IDictionary _objectCache;
        public static IDictionary GetObjectCache()
        {
            lock (typeof(BasicType))
            {
                if (_objectCache == null)
                {
                    _objectCache = new ListDictionary();
                    BasicType obj = CreateConstant(1, "NUMERIC", typeof(int).ToString());
                    _objectCache.Add(obj.PrimaryKey, obj);

                    obj = CreateConstant(2, "TEXT", typeof(string).ToString());
                    _objectCache.Add(obj.PrimaryKey, obj);

                    obj = CreateConstant(3, "DECIMAL", typeof(decimal).ToString());
                    _objectCache.Add(obj.PrimaryKey, obj);

                    obj = CreateConstant(4, "DATE", typeof(DateTime).ToString());
                    _objectCache.Add(obj.PrimaryKey, obj);

                    obj = CreateConstant(5, "LONG", typeof(long).ToString());
                    _objectCache.Add(obj.PrimaryKey, obj);
                }
            }
            return _objectCache;
        }

        private static BasicType CreateConstant(int basicTypeCode, string description, string systemType)
        {
            ListDictionary properties = new ListDictionary();
            properties.Add(Properties.Description, description);
            properties.Add(Properties.SystemType, systemType);
            PrimaryKey key = CreatePrimaryKey(basicTypeCode);
            return new BasicType(key, properties);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="basicTypeCode">Propiedad clave BasicTypeCode.</param>
        public static PrimaryKey CreatePrimaryKey(int basicTypeCode)
        {
            ListDictionary keys = new ListDictionary();
            keys.Add(Properties.BasicTypeCode, basicTypeCode);

            return new ReadOnlyPrimaryKey(typeof(BasicType), keys);
        }

        public static BasicType GetInstance(int basicTypeCode)
        {
            return (BasicType)GetObjectCache()[CreatePrimaryKey(basicTypeCode)];
        }
        #endregion

        //*** Object Attributes ********************************
        private string _systemType;
        private string _description = "";

        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="propertyValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public BasicType(PrimaryKey key, IDictionary propertyValues)
            : base(key, propertyValues)
        {
        }

        /*** Object Properties ********************************/
        public int Code
        {
            get
            {
                return (int)_primaryKey[Properties.BasicTypeCode];
            }
        }

        [PersistentProperty(false)]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }

        /// <summary>
        /// Devuelve el valor de la propiedad BasicTypeCode.
        /// </summary>
        /// <value>Propiedad BasicTypeCode.</value>
        [
        DescriptionKey("BASIC_TYPE_CODE_PROPERTY"),
        PersistentProperty(IsKey = true)
        ]
        public int BasicTypeCode
        {
            get
            {
                return (int)_primaryKey[Properties.BasicTypeCode];
            }
            set
            {
                _primaryKey[Properties.BasicTypeCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad SmallDescription.
        /// </summary>
        /// <value>Propiedad SmallDescription.</value>
        public string SmallDescription
        {
            get
            {
                return _description.Substring(0, 5);
            }
        }

        /// <summary>
        /// Devuelve el el tipo valor de sistema.
        /// </summary>
        /// <value>Propiedad BasicTypeCode.</value>
        public string SystemType
        {
            get
            {
                return _systemType;
            }
        }

        ///// <summary>
        ///// Establecer los valores de las propiedades que no forman parte de la clave o identificador de la instancia.
        ///// </summary>
        ///// <param name="valueDictionary">
        ///// Valores para establecer el estado de la instancia.
        ///// </param>
        //protected override void InternalSetPropertyValues(IDictionary valueDictionary)
        //{
        //    // Set base properties
        //    base.InternalSetPropertyValues(valueDictionary);
        //    _systemType = (string)valueDictionary[Properties.SystemType];
        //    _description = (string)valueDictionary[Properties.Description];
        //}

    }
}