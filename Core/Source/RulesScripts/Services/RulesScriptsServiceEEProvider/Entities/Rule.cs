/******************************************
 * Code generated by DictEditor v1.0.3.1
 * Template: Sistran.Core.Application.RuleEditor.Rule.dict v1.0
 * FileSize=6432 Header=240 CRC=53586744
 ******************************************/
using System;
using System.Collections;
using System.Collections.Specialized;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.RulesScriptsServices.EEProvider.Entities
{
	/// <summary>
	/// Definición de entidad Rule.
	/// </summary>
	[
    PersistentClass("Sistran.Core.Application.RulesScriptsServices.EEProvider.Rule.dict"),
	Serializable,
	DescriptionKey("RULE_ENTITY")
	]
    public class Rule :
		BusinessObject
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public sealed class Properties
		{
			public static readonly string RuleId = "RuleId";
			public static readonly string Order = "Order";
			public static readonly string RuleBaseId = "RuleBaseId";

			private Properties()
			{
			}
		}

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="ruleBaseId">Propiedad clave RuleBaseId.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey(Type concreteClass, int ruleBaseId)
	    {
		    ListDictionary keys = new ListDictionary();
		    keys.Add(Properties.RuleId, null);
		    keys.Add(Properties.RuleBaseId, ruleBaseId);

		    return new PrimaryKey(concreteClass, keys);
	    }
	    
		/// <summary>
		/// Crea una clave primaria para esta clase.
		/// </summary>
		/// <param name="ruleBaseId">Propiedad clave RuleBaseId.</param>
		public static PrimaryKey CreatePrimaryKey(int ruleBaseId)
	    {
			return InternalCreatePrimaryKey(typeof(Rule), ruleBaseId);
		}
		
		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="ruleId">Propiedad clave RuleId.</param>
		/// <param name="ruleBaseId">Propiedad clave RuleBaseId.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey(Type concreteClass, int ruleBaseId, int ruleId)
	    {
		    ListDictionary keys = new ListDictionary();
		    keys.Add(Properties.RuleId, ruleId);
		    keys.Add(Properties.RuleBaseId, ruleBaseId);

		    return new PrimaryKey(concreteClass, keys);
	    }

		/// <summary>
		/// Crea una clave primaria para esta clase.
		/// </summary>
		/// <param name="ruleId">Propiedad clave RuleId.</param>
		/// <param name="ruleBaseId">Propiedad clave RuleBaseId.</param>
		public static PrimaryKey CreatePrimaryKey(int ruleBaseId, int ruleId)
	    {
			return InternalCreatePrimaryKey(typeof(Rule), ruleBaseId, ruleId);
		}
#endregion

	    //*** Object Attributes ********************************

		/// <summary>
		/// Atributo para la propiedad Order.
		/// </summary>
        private int _order;
	    //*** Object Constructors ********************************

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves que no son autonumeradas.
		/// </summary>
		/// <param name="ruleBaseId">Propiedad clave RuleBaseId.</param>
		/// <returns>Primary key.</returns>
	    public Rule(int ruleBaseId):
			this(CreatePrimaryKey(ruleBaseId), null)
	    {
	    }

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="ruleId">RuleId key property.</param>
		/// <param name="ruleBaseId">RuleBaseId key property.</param>
	    public Rule(int ruleBaseId, int ruleId):
			this(CreatePrimaryKey(ruleBaseId, ruleId), null)
	    {
	    }

		/// <summary>
		/// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
		/// </summary>
		/// <param name="key">
		/// Identificador de la instancia de la entidad.
		/// </param>
		/// <param name="initialValues">
		/// Valores para establecer el estado de la instancia.
		/// </param>
	    public Rule(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad RuleId.
		/// </summary>
		/// <value>Propiedad RuleId.</value>
	    [
			DescriptionKey("RULE_ID_PROPERTY"),
			PersistentProperty(IsKey = true, IsAutomatic = true)
	    ]
        public int RuleId
	    {
		    get
		    {
				return (int)_primaryKey[Properties.RuleId];
		    }
		    set
		    {
				_primaryKey[Properties.RuleId] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Order.
		/// </summary>
		/// <value>Propiedad Order.</value>
	    [
			DescriptionKey("ORDER_PROPERTY"),
			PersistentProperty
	    ]
        public int Order
	    {
		    get
		    {
			    return _order;
		    }
		    set
		    {
				_order = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad RuleBaseId.
		/// </summary>
		/// <value>Propiedad RuleBaseId.</value>
	    [
			DescriptionKey("RULE_BASE_ID_PROPERTY"),
			PersistentProperty(IsKey = true)
	    ]
        public int RuleBaseId
	    {
		    get
		    {
				return (int)_primaryKey[Properties.RuleBaseId];
		    }
		    set
		    {
				_primaryKey[Properties.RuleBaseId] = value;
			}
	    }

		/// <summary>
		/// Establecer los valores de las propiedades que no forman parte de la clave o identificador de la instancia.
		/// </summary>
		/// <param name="values">
		/// Valores para establecer el estado de la instancia.
		/// </param>
		public override void SetPropertyValues(IDictionary values)
		{
			// Set base properties
			base.SetPropertyValues(values);

			object value;
			value = values[Properties.Order];
			if(value == null)
			{
				throw new PropertyNotNullableException(GetType().FullName, Properties.Order);
			}
			Order = (int)value;

		}

		/// <summary>
		/// Obtiene el estado a partir de los valores de la instancia de la entidad.
		/// </summary>
		/// <returns>
		/// Diccionario con los valores de las propiedades.
		/// </returns>
		public override IDictionary GetPropertyValues()
		{
			// Get base properties
			IDictionary values = base.GetPropertyValues();

			values.Add(Properties.Order, Order);

			return values;
		}
		
    }
}