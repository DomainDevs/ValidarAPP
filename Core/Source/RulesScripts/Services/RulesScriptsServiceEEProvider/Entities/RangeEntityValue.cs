/******************************************
 * Code generated by DictEditor v1.0.3.1
 * Template: Sistran.Core.Application.RulesService.RangeEntityValue.dict v1.0
 * FileSize=8097 Header=250 CRC=221192179
 ******************************************/
using System;
using System.Collections;
using System.Collections.Specialized;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using Sistran.Core.Framework.Data;

namespace Sistran.Core.Application.RulesScriptsServices.EEProvider.Entities
{
	/// <summary>
	/// Definición de entidad RangeEntityValue.
	/// </summary>
	[
    PersistentClass("Sistran.Core.Application.RulesScriptsServices.EEProvider.RangeEntityValue.dict"),
	Serializable, DescriptionKey("RANGE_ENTITY_VALUE_ENTITY")
	]
    public class RangeEntityValue :
		BusinessObject, IDescriptionable
    {
#region static

		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public sealed class Properties
		{
			/// <summary>
			/// Identificador de la propiedad FromValue.
			/// </summary>
			public static readonly string FromValue = "FromValue";
			/// <summary>
			/// Identificador de la propiedad RangeValueCode.
			/// </summary>
			public static readonly string RangeValueCode = "RangeValueCode";
			/// <summary>
			/// Identificador de la propiedad RangeEntityCode.
			/// </summary>
			public static readonly string RangeEntityCode = "RangeEntityCode";
			/// <summary>
			/// Identificador de la propiedad ToValue.
			/// </summary>
			public static readonly string ToValue = "ToValue";

			private Properties()
			{
			}
		}

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="rangeValueCode">Propiedad clave RangeValueCode.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey(Type concreteClass, int rangeValueCode)
	    {
		    ListDictionary keys = new ListDictionary();
		    keys.Add(Properties.RangeValueCode, rangeValueCode);
		    keys.Add(Properties.RangeEntityCode, null);

		    return new PrimaryKey(concreteClass, keys);
	    }
	    
		/// <summary>
		/// Crea una clave primaria para esta clase.
		/// </summary>
		/// <param name="rangeValueCode">Propiedad clave RangeValueCode.</param>
		public static PrimaryKey CreatePrimaryKey(int rangeValueCode)
	    {
			return InternalCreatePrimaryKey(typeof(RangeEntityValue), rangeValueCode);
		}
		
		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="rangeValueCode">Propiedad clave RangeValueCode.</param>
		/// <param name="rangeEntityCode">Propiedad clave RangeEntityCode.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey(Type concreteClass, int rangeValueCode, int rangeEntityCode)
	    {
		    ListDictionary keys = new ListDictionary();
		    keys.Add(Properties.RangeValueCode, rangeValueCode);
		    keys.Add(Properties.RangeEntityCode, rangeEntityCode);

		    return new PrimaryKey(concreteClass, keys);
	    }

		/// <summary>
		/// Crea una clave primaria para esta clase.
		/// </summary>
		/// <param name="rangeValueCode">Propiedad clave RangeValueCode.</param>
		/// <param name="rangeEntityCode">Propiedad clave RangeEntityCode.</param>
		public static PrimaryKey CreatePrimaryKey(int rangeValueCode, int rangeEntityCode)
	    {
			return InternalCreatePrimaryKey(typeof(RangeEntityValue), rangeValueCode, rangeEntityCode);
		}
#endregion

	    //*** Object Attributes ********************************

		/// <summary>
		/// Atributo para la propiedad FromValue.
		/// </summary>
        private int _fromValue;
		/// <summary>
		/// Atributo para la propiedad ToValue.
		/// </summary>
        private int _toValue;
	    //*** Object Constructors ********************************

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves que no son autonumeradas.
		/// </summary>
		/// <param name="rangeValueCode">Propiedad clave RangeValueCode.</param>
		/// <returns>Primary key.</returns>
	    public RangeEntityValue(int rangeValueCode):
			this(RangeEntityValue.CreatePrimaryKey(rangeValueCode), null)
	    {
	    }

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="rangeValueCode">RangeValueCode key property.</param>
		/// <param name="rangeEntityCode">RangeEntityCode key property.</param>
	    public RangeEntityValue(int rangeValueCode, int rangeEntityCode):
			this(RangeEntityValue.CreatePrimaryKey(rangeValueCode, rangeEntityCode), null)
	    {
	    }

		/// <summary>
		/// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
		/// </summary>
		/// <param name="key">
		/// Identificador de la instancia de la entidad.
		/// </param>
		/// <param name="initialValues">
		/// Valores para establecer el estado de la instancia.
		/// </param>
	    public RangeEntityValue(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad FromValue.
		/// </summary>
		/// <value>Propiedad FromValue.</value>
	    [
			DescriptionKey("FROM_VALUE_PROPERTY"),
			PersistentProperty()
	    ]
        public int FromValue
	    {
		    get
		    {
			    return this._fromValue;
		    }
		    set
		    {
				this._fromValue = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad RangeValueCode.
		/// </summary>
		/// <value>Propiedad RangeValueCode.</value>
	    [
			DescriptionKey("RANGE_VALUE_CODE_PROPERTY"),
			PersistentProperty(IsKey = true)
	    ]
        public int RangeValueCode
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.RangeValueCode];
		    }
		    set
		    {
				this._primaryKey[Properties.RangeValueCode] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad RangeEntityCode.
		/// </summary>
		/// <value>Propiedad RangeEntityCode.</value>
	    [
			DescriptionKey("RANGE_ENTITY_CODE_PROPERTY"),
			PersistentProperty(IsKey = true, IsAutomatic = true)
	    ]
        public int RangeEntityCode
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.RangeEntityCode];
		    }
		    set
		    {
				this._primaryKey[Properties.RangeEntityCode] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad ToValue.
		/// </summary>
		/// <value>Propiedad ToValue.</value>
	    [
			DescriptionKey("TO_VALUE_PROPERTY"),
			PersistentProperty()
	    ]
        public int ToValue
	    {
		    get
		    {
			    return this._toValue;
		    }
		    set
		    {
				this._toValue = value;
			}
	    }

		/// <summary>
		/// Establecer los valores de las propiedades que no forman parte de la clave o identificador de la instancia.
		/// </summary>
		/// <param name="values">
		/// Valores para establecer el estado de la instancia.
		/// </param>
		public override void SetPropertyValues(IDictionary values)
		{
			// Set base properties
			base.SetPropertyValues(values);

			object value;
			value = values[Properties.FromValue];
			if(value == null)
			{
				throw new PropertyNotNullableException(this.GetType().FullName, Properties.FromValue);
			}
			this.FromValue = (int)value;

			value = values[Properties.ToValue];
			if(value == null)
			{
				throw new PropertyNotNullableException(this.GetType().FullName, Properties.ToValue);
			}
			this.ToValue = (int)value;

		}

		/// <summary>
		/// Obtiene el estado a partir de los valores de la instancia de la entidad.
		/// </summary>
		/// <returns>
		/// Diccionario con los valores de las propiedades.
		/// </returns>
		public override IDictionary GetPropertyValues()
		{
			// Get base properties
			IDictionary values = base.GetPropertyValues();

			values.Add(Properties.FromValue, this.FromValue);
			values.Add(Properties.ToValue, this.ToValue);

			return values;
		}
		
		#region IDescriptionable Members

		public string Description
		{
			get
			{
				return this._fromValue.ToString() + " - " + this._toValue.ToString();
			}
		}

		public int Code
		{
			get
			{
				return this.RangeValueCode;
			}
		}

		public string SmallDescription
		{
			get
			{
				return this._fromValue.ToString() + " - " + this._toValue.ToString();
			}
		}

		#endregion
	}
}