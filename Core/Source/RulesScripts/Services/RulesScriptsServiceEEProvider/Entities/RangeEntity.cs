/******************************************
 * Code generated by DictEditor v1.0.3.1
 * Template: Sistran.Core.Application.RulesService.RangeEntity.dict v1.0
 * FileSize=6729 Header=246 CRC=3713304491
 ******************************************/
using System;
using System.Collections;
using System.Collections.Specialized;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.RulesScriptsServices.EEProvider.Entities
{
	/// <summary>
	/// Definición de entidad RangeEntity.
	/// </summary>
	[
    PersistentClass("Sistran.Core.Application.RulesScriptsServices.EEProvider.RangeEntity.dict"),
	Serializable(),
	DescriptionKey("RANGE_ENTITY_ENTITY")
	]
    public class RangeEntity :
		BusinessObject
    {
#region static

		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public sealed class Properties
		{
			/// <summary>
			/// Identificador de la propiedad RangeValueAt.
			/// </summary>
			public static readonly string RangeValueAt = "RangeValueAt";
			/// <summary>
			/// Identificador de la propiedad Description.
			/// </summary>
			public static readonly string Description = "Description";
			/// <summary>
			/// Identificador de la propiedad RangeEntityCode.
			/// </summary>
			public static readonly string RangeEntityCode = "RangeEntityCode";

			private Properties()
			{
			}
		}

		protected static PrimaryKey InternalCreatePrimaryKey(Type concreteClass)
		{
			ListDictionary keys = new ListDictionary();
			keys.Add(Properties.RangeEntityCode, null);

			return new PrimaryKey(concreteClass, keys);
		}
		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="rangeEntityCode">Propiedad clave RangeEntityCode.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey(Type concreteClass, int rangeEntityCode)
	    {
		    ListDictionary keys = new ListDictionary();
		    keys.Add(Properties.RangeEntityCode, rangeEntityCode);

		    return new PrimaryKey(concreteClass, keys);
	    }

		public static PrimaryKey CreatePrimaryKey()
		{
			return InternalCreatePrimaryKey(typeof(RangeEntity));
		}
		/// <summary>
		/// Crea una clave primaria para esta clase.
		/// </summary>
		/// <param name="rangeEntityCode">Propiedad clave RangeEntityCode.</param>
		public static PrimaryKey CreatePrimaryKey(int rangeEntityCode)
	    {
			return InternalCreatePrimaryKey(typeof(RangeEntity), rangeEntityCode);
		}
#endregion

	    //*** Object Attributes ********************************

		/// <summary>
		/// Atributo para la propiedad RangeValueAt.
		/// </summary>
        private int _rangeValueAt;
		/// <summary>
		/// Atributo para la propiedad Description.
		/// </summary>
        private string _description = null;
	    //*** Object Constructors ********************************

		public RangeEntity():
			this(RangeEntity.CreatePrimaryKey(), null)
		{
		}
		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="rangeEntityCode">RangeEntityCode key property.</param>
	    public RangeEntity(int rangeEntityCode):
			this(RangeEntity.CreatePrimaryKey(rangeEntityCode), null)
	    {
	    }

		/// <summary>
		/// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
		/// </summary>
		/// <param name="key">
		/// Identificador de la instancia de la entidad.
		/// </param>
		/// <param name="initialValues">
		/// Valores para establecer el estado de la instancia.
		/// </param>
	    public RangeEntity(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad RangeValueAt.
		/// </summary>
		/// <value>Propiedad RangeValueAt.</value>
	    [
			DescriptionKey("RANGE_VALUE_AT_PROPERTY"),
			PersistentProperty()
	    ]
        public int RangeValueAt
	    {
		    get
		    {
			    return this._rangeValueAt;
		    }
		    set
		    {
				this._rangeValueAt = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Description.
		/// </summary>
		/// <value>Propiedad Description.</value>
	    [
			DescriptionKey("DESCRIPTION_PROPERTY"),
			PersistentProperty()
	    ]
        public string Description
	    {
		    get
		    {
				if(this._description == null)
				{
					throw new InvalidPropertyValueException(this.GetType().FullName, Properties.Description, "<NULL>");
				}
			    return this._description;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.Description);
				}
				this._description = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad RangeEntityCode.
		/// </summary>
		/// <value>Propiedad RangeEntityCode.</value>
	    [
			DescriptionKey("RANGE_ENTITY_CODE_PROPERTY"),
			PersistentProperty(IsKey = true)
	    ]
        public int RangeEntityCode
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.RangeEntityCode];
		    }
		    set
		    {
				this._primaryKey[Properties.RangeEntityCode] = value;
			}
	    }

		/// <summary>
		/// Establecer los valores de las propiedades que no forman parte de la clave o identificador de la instancia.
		/// </summary>
		/// <param name="values">
		/// Valores para establecer el estado de la instancia.
		/// </param>
		public override void SetPropertyValues(IDictionary values)
		{
			// Set base properties
			base.SetPropertyValues(values);

			object value;
			value = values[Properties.RangeValueAt];
			if(value == null)
			{
				throw new PropertyNotNullableException(this.GetType().FullName, Properties.RangeValueAt);
			}
			this.RangeValueAt = (int)value;

			this.Description = (string)values[Properties.Description];
		}

		/// <summary>
		/// Obtiene el estado a partir de los valores de la instancia de la entidad.
		/// </summary>
		/// <returns>
		/// Diccionario con los valores de las propiedades.
		/// </returns>
		public override IDictionary GetPropertyValues()
		{
			// Get base properties
			IDictionary values = base.GetPropertyValues();

			values.Add(Properties.RangeValueAt, this.RangeValueAt);
			values.Add(Properties.Description, this.Description);

			return values;
		}
		
		/// <summary>
		/// Validación de propiedades obligatorias para la persistencia de 
		/// instancias de de la entidad. Se valida que las propiedades 
		/// obligatorias no estén sin valor asignado (null).
		/// </summary>
		/// <exception cref = "Sistran.Core.Framework.PropertyNotNullableException">
		/// En caso que alguna propiedad obligatoria no tenga valor asignado o tenga el valor null.
		/// </exception>
		public override void Validate()
		{
			StringCollection propertyNames = new StringCollection();
			if(this._description == null)
			{
				propertyNames.Add(Properties.Description);
			}
			if(propertyNames.Count > 0)
			{
				throw new PropertyNotNullableException(this.GetType().FullName, propertyNames);
			}
		}
    }
}