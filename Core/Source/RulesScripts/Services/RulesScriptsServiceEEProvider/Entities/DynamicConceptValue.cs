/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Services.QuotationService.DynamicConceptValue.dict v1.0
 * FileSize=4850 Header=262 CRC=214768261
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.RulesScriptsServices.EEProvider.Entities
{
    /// <summary>
    /// Definición de entidad DynamicConceptValue.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.RulesScriptsServices.EEProvider.DynamicConceptValue.dict"),
    Serializable(),
    DescriptionKey("DYNAMIC_CONCEPT_VALUE_ENTITY"),
    TableMap(TableName="DYNAMIC_CONCEPT_VALUE", Schema="SCR"),
    ]
    public partial class DynamicConceptValue :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string DynamicId = "DynamicId";
			public static readonly string ConceptId = "ConceptId";
			public static readonly string ConceptValue = "ConceptValue";
		}

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="dynamicId">Propiedad clave DynamicId.</param>
		/// <param name="conceptId">Propiedad clave ConceptId.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>(int dynamicId, int conceptId)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.DynamicId, dynamicId);
		    keys.Add(Properties.ConceptId, conceptId);

		    return new PrimaryKey<T>(keys);
	    }

		/// <summary>
		/// Crea una clave primaria para esta clase.
		/// </summary>
		/// <param name="dynamicId">Propiedad clave DynamicId.</param>
		/// <param name="conceptId">Propiedad clave ConceptId.</param>
		public static PrimaryKey CreatePrimaryKey(int dynamicId, int conceptId)
	    {
			return InternalCreatePrimaryKey<DynamicConceptValue>(dynamicId, conceptId);
		}
#endregion

	    //*** Object Attributes ********************************

		/// <summary>
		/// Atributo para la propiedad ConceptValue.
		/// </summary>
        private string _conceptValue = null;
	    //*** Object Constructors ********************************

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="dynamicId">DynamicId key property.</param>
		/// <param name="conceptId">ConceptId key property.</param>
	    public DynamicConceptValue(int dynamicId, int conceptId):
			this(DynamicConceptValue.CreatePrimaryKey(dynamicId, conceptId), null)
	    {
	    }

		/// <summary>
		/// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
		/// </summary>
		/// <param name="key">
		/// Identificador de la instancia de la entidad.
		/// </param>
		/// <param name="initialValues">
		/// Valores para establecer el estado de la instancia.
		/// </param>
	    public DynamicConceptValue(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad DynamicId.
		/// </summary>
		/// <value>Propiedad DynamicId.</value>
	    [
		DescriptionKey("DYNAMIC_ID_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="DYNAMIC_ID", DbType=System.Data.DbType.String),
	    ]
        public int DynamicId
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.DynamicId];
		    }
		    set
		    {
				this._primaryKey[Properties.DynamicId] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad ConceptId.
		/// </summary>
		/// <value>Propiedad ConceptId.</value>
	    [
		DescriptionKey("CONCEPT_ID_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="CONCEPT_ID", DbType=System.Data.DbType.String),
	    ]
        public int ConceptId
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.ConceptId];
		    }
		    set
		    {
				this._primaryKey[Properties.ConceptId] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad ConceptValue.
		/// </summary>
		/// <value>Propiedad ConceptValue.</value>
	    [
		DescriptionKey("CONCEPT_VALUE_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="CONCEPT_VALUE", DbType=System.Data.DbType.String),
	    ]
        public string ConceptValue
	    {
		    get
		    {
			    return this._conceptValue;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.ConceptValue);
				}
				this._conceptValue = value;
			}
	    }

    }
}