/******************************************
 * Code generated by DictEditor v1.0.3.1
 * Template: Sistran.Core.Application.Scripts.BasicConceptCheck.dict v1.0
 * FileSize=9331 Header=251 CRC=638663455
 ******************************************/
using System;
using System.Collections;
using System.Collections.Specialized;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.RulesScriptsServices.EEProvider.Entities
{
	/// <summary>
	/// Definición de entidad BasicConceptCheck.
	/// </summary>
	[
    PersistentClass("Sistran.Core.Application.RulesScriptsServices.EEProvider.BasicConceptCheck.dict"),
	Serializable(),
	DescriptionKey("BASIC_CONCEPT_CHECK_ENTITY")
	]
    public class BasicConceptCheck :
		BusinessObject
    {
#region static

		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public sealed class Properties
		{
			/// <summary>
			/// Identificador de la propiedad EntityId.
			/// </summary>
			public static readonly string EntityId = "EntityId";
			/// <summary>
			/// Identificador de la propiedad IntValue.
			/// </summary>
			public static readonly string IntValue = "IntValue";
			/// <summary>
			/// Identificador de la propiedad BasicCheckCode.
			/// </summary>
			public static readonly string BasicCheckCode = "BasicCheckCode";
			/// <summary>
			/// Identificador de la propiedad DateValue.
			/// </summary>
			public static readonly string DateValue = "DateValue";
			/// <summary>
			/// Identificador de la propiedad ConceptId.
			/// </summary>
			public static readonly string ConceptId = "ConceptId";

			private Properties()
			{
			}
		}

		protected static PrimaryKey InternalCreatePrimaryKey(Type concreteClass, int basicCheckCode)
		{
			ListDictionary keys = new ListDictionary();
			keys.Add(Properties.EntityId, null);
			keys.Add(Properties.BasicCheckCode, basicCheckCode);
			keys.Add(Properties.ConceptId, null);

			return new PrimaryKey(concreteClass, keys);
		}
		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="entityId">Propiedad clave EntityId.</param>
		/// <param name="basicCheckCode">Propiedad clave BasicCheckCode.</param>
		/// <param name="conceptId">Propiedad clave ConceptId.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey(Type concreteClass, int entityId, int basicCheckCode, int conceptId)
	    {
		    ListDictionary keys = new ListDictionary();
		    keys.Add(Properties.EntityId, entityId);
		    keys.Add(Properties.BasicCheckCode, basicCheckCode);
		    keys.Add(Properties.ConceptId, conceptId);

		    return new PrimaryKey(concreteClass, keys);
	    }

		public static PrimaryKey CreatePrimaryKey(int basicCheckCode)
		{
			return InternalCreatePrimaryKey(typeof(BasicConceptCheck), basicCheckCode);
		}
		/// <summary>
		/// Crea una clave primaria para esta clase.
		/// </summary>
		/// <param name="entityId">Propiedad clave EntityId.</param>
		/// <param name="basicCheckCode">Propiedad clave BasicCheckCode.</param>
		/// <param name="conceptId">Propiedad clave ConceptId.</param>
		
		public static PrimaryKey CreatePrimaryKey(int entityId, int basicCheckCode, int conceptId)
	    {
			return InternalCreatePrimaryKey(typeof(BasicConceptCheck), entityId, basicCheckCode, conceptId);
		}
#endregion

	    //*** Object Attributes ********************************

		/// <summary>
		/// Atributo para la propiedad IntValue.
		/// </summary>
        private int _intValue;
		/// <summary>
		/// Indica si el valor de la propiedad IntValue es nulo.
		/// </summary>
		private bool _isIntValueNull = true;
		/// <summary>
		/// Atributo para la propiedad DateValue.
		/// </summary>
        private DateTime _dateValue;
		/// <summary>
		/// Indica si el valor de la propiedad DateValue es nulo.
		/// </summary>
		private bool _isDateValueNull = true;
		
		public BasicConceptCheck(int basicCheckCode):
			this(BasicConceptCheck.CreatePrimaryKey(basicCheckCode), null)
		{
		}

		
		//*** Object Constructors ********************************

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="entityId">EntityId key property.</param>
		/// <param name="basicCheckCode">BasicCheckCode key property.</param>
		/// <param name="conceptId">ConceptId key property.</param>
	    public BasicConceptCheck(int entityId, int basicCheckCode, int conceptId):
			this(BasicConceptCheck.CreatePrimaryKey(entityId, basicCheckCode, conceptId), null)
	    {
	    }

		/// <summary>
		/// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
		/// </summary>
		/// <param name="key">
		/// Identificador de la instancia de la entidad.
		/// </param>
		/// <param name="initialValues">
		/// Valores para establecer el estado de la instancia.
		/// </param>
	    public BasicConceptCheck(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad EntityId.
		/// </summary>
		/// <value>Propiedad EntityId.</value>
	    [
			DescriptionKey("ENTITY_ID_PROPERTY"),
			PersistentProperty(IsKey = true)
	    ]
        public int EntityId
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.EntityId];
		    }
		    set
		    {
				this._primaryKey[Properties.EntityId] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad IntValue.
		/// </summary>
		/// <value>Propiedad IntValue.</value>
	    [
			DescriptionKey("INT_VALUE_PROPERTY"),
			PersistentProperty(IsNullable = true)
	    ]
        public int IntValue
	    {
		    get
		    {
				if(this._isIntValueNull)
				{
					throw new InvalidUseOfNullPropertyException(this.GetType().FullName, Properties.IntValue);
				}
			    return this._intValue;
		    }
		    set
		    {
				this._intValue = value;
				this._isIntValueNull = false;
			}
	    }

		/// <summary>
		/// Devuelve o setea si el valor de la propiedad IntValue es nulo.
		/// </summary>
		/// <value>Verdadero si el valor de la propiedad IntValue es nulo, falso en caso contrario.</value>
		public bool IsIntValueNull
		{
			get
			{
				return this._isIntValueNull;
			}
			set
			{
				if(!value)
				{
					throw new InvalidPropertyValueException(this.GetType().FullName, "IsIntValueNull", value);
				}
				this._isIntValueNull = true;
			}
		}

		/// <summary>
		/// Devuelve o setea el valor de la propiedad BasicCheckCode.
		/// </summary>
		/// <value>Propiedad BasicCheckCode.</value>
	    [
			DescriptionKey("BASIC_CHECK_CODE_PROPERTY"),
			PersistentProperty(IsKey = true)
	    ]
        public int BasicCheckCode
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.BasicCheckCode];
		    }
		    set
		    {
				this._primaryKey[Properties.BasicCheckCode] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad DateValue.
		/// </summary>
		/// <value>Propiedad DateValue.</value>
	    [
			DescriptionKey("DATE_VALUE_PROPERTY"),
			PersistentProperty(IsNullable = true)
	    ]
        public DateTime DateValue
	    {
		    get
		    {
				if(this._isDateValueNull)
				{
					throw new InvalidUseOfNullPropertyException(this.GetType().FullName, Properties.DateValue);
				}
			    return this._dateValue;
		    }
		    set
		    {
				this._dateValue = value;
				this._isDateValueNull = false;
			}
	    }

		/// <summary>
		/// Devuelve o setea si el valor de la propiedad DateValue es nulo.
		/// </summary>
		/// <value>Verdadero si el valor de la propiedad DateValue es nulo, falso en caso contrario.</value>
		public bool IsDateValueNull
		{
			get
			{
				return this._isDateValueNull;
			}
			set
			{
				if(!value)
				{
					throw new InvalidPropertyValueException(this.GetType().FullName, "IsDateValueNull", value);
				}
				this._isDateValueNull = true;
			}
		}

		/// <summary>
		/// Devuelve o setea el valor de la propiedad ConceptId.
		/// </summary>
		/// <value>Propiedad ConceptId.</value>
	    [
			DescriptionKey("CONCEPT_ID_PROPERTY"),
			PersistentProperty(IsKey = true)
	    ]
        public int ConceptId
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.ConceptId];
		    }
		    set
		    {
				this._primaryKey[Properties.ConceptId] = value;
			}
	    }

		/// <summary>
		/// Establecer los valores de las propiedades que no forman parte de la clave o identificador de la instancia.
		/// </summary>
		/// <param name="values">
		/// Valores para establecer el estado de la instancia.
		/// </param>
		public override void SetPropertyValues(IDictionary values)
		{
			// Set base properties
			base.SetPropertyValues(values);

			object value;
			value = values[Properties.IntValue];
			if(value == null)
			{
				this.IsIntValueNull = true;
			}
			else
			{
				this.IntValue = (int)value;
			}

			value = values[Properties.DateValue];
			if(value == null)
			{
				this.IsDateValueNull = true;
			}
			else
			{
				this.DateValue = (DateTime)value;
			}

		}

		/// <summary>
		/// Obtiene el estado a partir de los valores de la instancia de la entidad.
		/// </summary>
		/// <returns>
		/// Diccionario con los valores de las propiedades.
		/// </returns>
		public override IDictionary GetPropertyValues()
		{
			// Get base properties
			IDictionary values = base.GetPropertyValues();

			if(this.IsIntValueNull)
			{
				values.Add(Properties.IntValue, null);
			}
			else
			{
				values.Add(Properties.IntValue, this.IntValue);
			}
			if(this.IsDateValueNull)
			{
				values.Add(Properties.DateValue, null);
			}
			else
			{
				values.Add(Properties.DateValue, this.DateValue);
			}

			return values;
		}
		
    }
}