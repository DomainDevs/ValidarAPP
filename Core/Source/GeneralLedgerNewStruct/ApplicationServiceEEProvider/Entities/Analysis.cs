/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.GeneralLedgerServices.EEProvider.Analysis.dict v1.0
 * FileSize=5946 Header=269 CRC=3282724768
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.GeneralLedgerServices.EEProvider.Entities
{
    /// <summary>
    /// Definición de entidad Analysis.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.GeneralLedgerServices.EEProvider.Analysis.dict"),
    Serializable(),
    DescriptionKey("ANALYSIS_ENTITY"),
    TableMap(TableName="ANALYSIS", Schema="GL"),
    ]
    public partial class Analysis :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string AnalysisId = "AnalysisId";
			public static readonly string Description = "Description";
			public static readonly string AccountingNature = "AccountingNature";
			public static readonly string RequireOrigin = "RequireOrigin";
			public static readonly string ControlBalance = "ControlBalance";
		}

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="analysisId">Propiedad clave AnalysisId.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>(int analysisId)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.AnalysisId, analysisId);

		    return new PrimaryKey<T>(keys);
	    }

		/// <summary>
		/// Crea una clave primaria para esta clase.
		/// </summary>
		/// <param name="analysisId">Propiedad clave AnalysisId.</param>
		public static PrimaryKey CreatePrimaryKey(int analysisId)
	    {
			return InternalCreatePrimaryKey<Analysis>(analysisId);
		}
#endregion

	    //*** Object Attributes ********************************

		/// <summary>
		/// Atributo para la propiedad Description.
		/// </summary>
        private string _description = null;
		/// <summary>
		/// Atributo para la propiedad AccountingNature.
		/// </summary>
        private int? _accountingNature = null;
		/// <summary>
		/// Atributo para la propiedad RequireOrigin.
		/// </summary>
        private bool? _requireOrigin = null;
		/// <summary>
		/// Atributo para la propiedad ControlBalance.
		/// </summary>
        private bool? _controlBalance = null;
	    //*** Object Constructors ********************************

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="analysisId">AnalysisId key property.</param>
	    public Analysis(int analysisId):
			this(Analysis.CreatePrimaryKey(analysisId), null)
	    {
	    }

		/// <summary>
		/// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
		/// </summary>
		/// <param name="key">
		/// Identificador de la instancia de la entidad.
		/// </param>
		/// <param name="initialValues">
		/// Valores para establecer el estado de la instancia.
		/// </param>
	    public Analysis(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad AnalysisId.
		/// </summary>
		/// <value>Propiedad AnalysisId.</value>
	    [
		DescriptionKey("ANALYSIS_ID_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="ANALYSIS_ID", DbType=System.Data.DbType.String),
	    ]
        public int AnalysisId
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.AnalysisId];
		    }
		    set
		    {
				this._primaryKey[Properties.AnalysisId] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Description.
		/// </summary>
		/// <value>Propiedad Description.</value>
	    [
		DescriptionKey("DESCRIPTION_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="DESCRIPTION", DbType=System.Data.DbType.String),
	    ]
        public string Description
	    {
		    get
		    {
			    return this._description;
		    }
		    set
		    {
				this._description = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad AccountingNature.
		/// </summary>
		/// <value>Propiedad AccountingNature.</value>
	    [
		DescriptionKey("ACCOUNTING_NATURE_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="ACCOUNTING_NATURE", DbType=System.Data.DbType.String),
	    ]
        public int? AccountingNature
	    {
		    get
		    {
			    return this._accountingNature;
		    }
		    set
		    {
				this._accountingNature = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad RequireOrigin.
		/// </summary>
		/// <value>Propiedad RequireOrigin.</value>
	    [
		DescriptionKey("REQUIRE_ORIGIN_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="REQUIRE_ORIGIN", DbType=System.Data.DbType.String),
	    ]
        public bool? RequireOrigin
	    {
		    get
		    {
			    return this._requireOrigin;
		    }
		    set
		    {
				this._requireOrigin = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad ControlBalance.
		/// </summary>
		/// <value>Propiedad ControlBalance.</value>
	    [
		DescriptionKey("CONTROL_BALANCE_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="CONTROL_BALANCE", DbType=System.Data.DbType.String),
	    ]
        public bool? ControlBalance
	    {
		    get
		    {
			    return this._controlBalance;
		    }
		    set
		    {
				this._controlBalance = value;
			}
	    }

    }
}