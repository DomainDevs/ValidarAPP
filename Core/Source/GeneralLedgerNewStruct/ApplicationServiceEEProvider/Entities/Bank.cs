/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.GeneralLedgerServices.EEProvider.Bank.dict v1.0
 * FileSize=3812 Header=264 CRC=528120477
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.GeneralLedgerServices.EEProvider.Entities
{
    /// <summary>
    /// Definición de entidad Bank.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.GeneralLedgerServices.EEProvider.Bank.dict"),
    Serializable(),
    DescriptionKey("BANK_ENTITY"),
    TableMap(TableName="BANK", Schema="COMM"),
    ]
    public partial class Bank :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string BankCode = "BankCode";
			public static readonly string Description = "Description";
		}

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="bankCode">Propiedad clave BankCode.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>(int bankCode)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.BankCode, bankCode);

		    return new PrimaryKey<T>(keys);
	    }

        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.BankCode, null);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="bankCode">Propiedad clave BankCode.</param>
        public static PrimaryKey CreatePrimaryKey(int bankCode)
	    {
			return InternalCreatePrimaryKey<Bank>(bankCode);
		}
        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<Bank>();
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad Description.
        /// </summary>
        private string _description = null;
	    //*** Object Constructors ********************************

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="bankCode">BankCode key property.</param>
	    public Bank(int bankCode):
			this(Bank.CreatePrimaryKey(bankCode), null)
	    {
	    }

        public Bank() :
           this(Bank.CreatePrimaryKey(), null)
        {
        }


        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public Bank(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad BankCode.
		/// </summary>
		/// <value>Propiedad BankCode.</value>
	    [
		DescriptionKey("BANK_CODE_PROPERTY"),
		PersistentProperty(IsKey = true, DataName = "Identity"),
        ColumnMap(ColumnName="BANK_CD", DbType=System.Data.DbType.String),
	    ]
        public int BankCode
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.BankCode];
		    }
		    set
		    {
				this._primaryKey[Properties.BankCode] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Description.
		/// </summary>
		/// <value>Propiedad Description.</value>
	    [
		DescriptionKey("DESCRIPTION_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="DESCRIPTION", DbType=System.Data.DbType.String),
	    ]
        public string Description
	    {
		    get
		    {
			    return this._description;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.Description);
				}
				this._description = value;
			}
	    }



    }
}