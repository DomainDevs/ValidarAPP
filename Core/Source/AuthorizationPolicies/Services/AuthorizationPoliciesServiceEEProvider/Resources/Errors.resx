<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrorAcceptAuthorization" xml:space="preserve">
    <value>Policy Authorization Failed</value>
  </data>
  <data name="ErrorCreateAutorizationRequest" xml:space="preserve">
    <value>Error creating authorization request</value>
  </data>
  <data name="ErrorCreateGroupPolicies" xml:space="preserve">
    <value>Error creating policy group</value>
  </data>
  <data name="ErrorCreateRulePolicies" xml:space="preserve">
    <value>Failed to create rule associated with policy</value>
  </data>
  <data name="ErrorCreateUsersAutorization" xml:space="preserve">
    <value>Failed to assign authorizing policy users</value>
  </data>
  <data name="ErrorCreateUsersNotification" xml:space="preserve">
    <value>Failed to assign policy notifying users</value>
  </data>
  <data name="ErrorDeleteGroupPolicies" xml:space="preserve">
    <value>Failed to delete policy group</value>
  </data>
  <data name="ErrorDeletePolicyInUse" xml:space="preserve">
    <value>Error Delete Policy In Use</value>
  </data>
  <data name="ErrorDeleteRulePolicies" xml:space="preserve">
    <value>Failed to delete policy</value>
  </data>
  <data name="ErrorGenerateFileToPolicies" xml:space="preserve">
    <value>Error genete file</value>
  </data>
  <data name="ErrorGetAuthorizationAnswes" xml:space="preserve">
    <value>Failed to obtain authorization requests</value>
  </data>
  <data name="ErrorGetAuthorizationHierarchy" xml:space="preserve">
    <value>Error getting hierarchies</value>
  </data>
  <data name="ErrorGetAuthorizationRequests" xml:space="preserve">
    <value>Failed to obtain authorization requests</value>
  </data>
  <data name="ErrorGetConceptDescriptionsByIdPolicies" xml:space="preserve">
    <value>Error getting the concepts of the description of the policy</value>
  </data>
  <data name="ErrorGetConceptsDescriptionValues" xml:space="preserve">
    <value>Error obtaining concepts from the description of the policy</value>
  </data>
  <data name="ErrorGetGroupsPolicies" xml:space="preserve">
    <value>Failed to get policy groups</value>
  </data>
  <data name="ErrorGetHierarchyByUser" xml:space="preserve">
    <value>Error querying user hierarchy</value>
  </data>
  <data name="ErrorGetHistoryReasign" xml:space="preserve">
    <value>Failed to get reassignment history</value>
  </data>
  <data name="ErrorGetLevels" xml:space="preserve">
    <value>Failed to get the levels associated with the policy group</value>
  </data>
  <data name="ErrorGetPackagePolicies" xml:space="preserve">
    <value>Error fetching packages</value>
  </data>
  <data name="ErrorGetPolicies" xml:space="preserve">
    <value>Failed to get the policies</value>
  </data>
  <data name="ErrorGetRulesToValidate" xml:space="preserve">
    <value>Error getting policies to validate</value>
  </data>
  <data name="ErrorGetTypePolicies" xml:space="preserve">
    <value>Error getting policy types</value>
  </data>
  <data name="ErrorGetUsersAuthorizationHierarchy" xml:space="preserve">
    <value>Failed to get authorizing users</value>
  </data>
  <data name="ErrorGetUsersAutorization" xml:space="preserve">
    <value>Failed to get policy authorizing users</value>
  </data>
  <data name="ErrorGetUsersNotificaticion" xml:space="preserve">
    <value>Failed to get policy-notifying users</value>
  </data>
  <data name="ErrorPoliciesIsInUse" xml:space="preserve">
    <value>The Policy is in use, It can't be deleted</value>
  </data>
  <data name="ErrorReasignAuthorizationAnswer" xml:space="preserve">
    <value>Error reassigning policy</value>
  </data>
  <data name="ErrorRejectAuthorization" xml:space="preserve">
    <value>Failure to reject policy</value>
  </data>
  <data name="ErrorSaveConceptDescriptionsByIdPolicies" xml:space="preserve">
    <value>Failed to save the concepts of the policy description</value>
  </data>
  <data name="ErrorUpdateGroupPolicies" xml:space="preserve">
    <value>Failed to update policy group</value>
  </data>
  <data name="ErrorUpdateProcessId" xml:space="preserve">
    <value>Error update process id</value>
  </data>
  <data name="ErrorUpdateRulePolicies" xml:space="preserve">
    <value>Failed to update rule associated with policy</value>
  </data>
  <data name="ErrorValidateAuthorizationPolicies" xml:space="preserve">
    <value>Error validating / executing policy</value>
  </data>
</root>