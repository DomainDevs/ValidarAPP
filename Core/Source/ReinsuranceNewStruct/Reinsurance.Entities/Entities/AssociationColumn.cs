/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Reinsurance.Services.Provider.AssociationColumn.dict v1.0
 * FileSize=8527 Header=276 CRC=500160863
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.Reinsurance.Entities
{
    /// <summary>
    /// Definición de entidad AssociationColumn.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Reinsurance.AssociationColumn.dict"),
    Serializable(),
    DescriptionKey("ASSOCIATION_COLUMN_ENTITY"),
    TableMap(TableName="ASSOCIATION_COLUMN", Schema="REINS"),
    ]
    public partial class AssociationColumn :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string AssociationColumnId = "AssociationColumnId";
			public static readonly string AssociationTypeId = "AssociationTypeId";
			public static readonly string Order = "Order";
			public static readonly string TableName = "TableName";
			public static readonly string ColumnIdName = "ColumnIdName";
			public static readonly string ColumnDescription = "ColumnDescription";
			//public static readonly string Parameter = "Parameter";
			//public static readonly string IsBetweenRange = "IsBetweenRange";
		}

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="associationColumnId">Propiedad clave AssociationColumnId.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>(int associationColumnId)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.AssociationColumnId, associationColumnId);

		    return new PrimaryKey<T>(keys);
	    }

		/// <summary>
		/// Crea una clave primaria para esta clase.
		/// </summary>
		/// <param name="associationColumnId">Propiedad clave AssociationColumnId.</param>
		public static PrimaryKey CreatePrimaryKey(int associationColumnId)
	    {
			return InternalCreatePrimaryKey<AssociationColumn>(associationColumnId);
		}
#endregion

	    //*** Object Attributes ********************************

		/// <summary>
		/// Atributo para la propiedad AssociationTypeId.
		/// </summary>
        private int _associationTypeId;
		/// <summary>
		/// Atributo para la propiedad Order.
		/// </summary>
        private int _order;
		/// <summary>
		/// Atributo para la propiedad TableName.
		/// </summary>
        private string _tableName = null;
		/// <summary>
		/// Atributo para la propiedad ColumnIdName.
		/// </summary>
        private string _columnIdName = null;
		/// <summary>
		/// Atributo para la propiedad ColumnDescription.
		/// </summary>
        private string _columnDescription = null;
		/// <summary>
		/// Atributo para la propiedad Parameter.
		/// </summary>
        private string _parameter = null;
		/// <summary>
		/// Atributo para la propiedad IsBetweenRange.
		/// </summary>
        //private bool _isBetweenRange;
	    //*** Object Constructors ********************************

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="associationColumnId">AssociationColumnId key property.</param>
	    public AssociationColumn(int associationColumnId):
			this(AssociationColumn.CreatePrimaryKey(associationColumnId), null)
	    {
	    }

		/// <summary>
		/// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
		/// </summary>
		/// <param name="key">
		/// Identificador de la instancia de la entidad.
		/// </param>
		/// <param name="initialValues">
		/// Valores para establecer el estado de la instancia.
		/// </param>
	    public AssociationColumn(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad AssociationColumnId.
		/// </summary>
		/// <value>Propiedad AssociationColumnId.</value>
	    [
		DescriptionKey("ASSOCIATION_COLUMN_ID_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="ASSOCIATION_COLUMN_ID", DbType=System.Data.DbType.String),
	    ]
        public int AssociationColumnId
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.AssociationColumnId];
		    }
		    set
		    {
				this._primaryKey[Properties.AssociationColumnId] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad AssociationTypeId.
		/// </summary>
		/// <value>Propiedad AssociationTypeId.</value>
	    [
		DescriptionKey("ASSOCIATION_TYPE_ID_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="ASSOCIATION_TYPE_ID", DbType=System.Data.DbType.String),
	    ]
        public int AssociationTypeId
	    {
		    get
		    {
			    return this._associationTypeId;
		    }
		    set
		    {
				this._associationTypeId = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Order.
		/// </summary>
		/// <value>Propiedad Order.</value>
	    [
		DescriptionKey("ORDER_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="ORDER", DbType=System.Data.DbType.String),
	    ]
        public int Order
	    {
		    get
		    {
			    return this._order;
		    }
		    set
		    {
				this._order = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad TableName.
		/// </summary>
		/// <value>Propiedad TableName.</value>
	    [
		DescriptionKey("TABLE_NAME_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="TABLE_NAME", DbType=System.Data.DbType.String),
	    ]
        public string TableName
	    {
		    get
		    {
			    return this._tableName;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.TableName);
				}
				this._tableName = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad ColumnIdName.
		/// </summary>
		/// <value>Propiedad ColumnIdName.</value>
	    [
		DescriptionKey("COLUMN_ID_NAME_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="COLUMN_ID_NAME", DbType=System.Data.DbType.String),
	    ]
        public string ColumnIdName
	    {
		    get
		    {
			    return this._columnIdName;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.ColumnIdName);
				}
				this._columnIdName = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad ColumnDescription.
		/// </summary>
		/// <value>Propiedad ColumnDescription.</value>
	    [
		DescriptionKey("COLUMN_DESCRIPTION_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="COLUMN_DESCRIPTION", DbType=System.Data.DbType.String),
	    ]
        public string ColumnDescription
	    {
		    get
		    {
			    return this._columnDescription;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.ColumnDescription);
				}
				this._columnDescription = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Parameter.
		/// </summary>
		/// <value>Propiedad Parameter.</value>
	    [
		DescriptionKey("PARAMETER_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="PARAMETER", DbType=System.Data.DbType.String),
	    ]
        public string Parameter
	    {
		    get
		    {
			    return this._parameter;
		    }
		    set
		    {
				this._parameter = value;
			}
	    }

        ///// <summary>
        ///// Devuelve o setea el valor de la propiedad IsBetweenRange.
        ///// </summary>
        ///// <value>Propiedad IsBetweenRange.</value>
        //[
        //DescriptionKey("IS_BETWEEN_RANGE_PROPERTY"),
        //PersistentProperty(),
        //ColumnMap(ColumnName="IS_BETWEEN_RANGE", DbType=System.Data.DbType.String),
        //]
        //public bool IsBetweenRange
        //{
        //    get
        //    {
        //        return this._isBetweenRange;
        //    }
        //    set
        //    {
        //        this._isBetweenRange = value;
        //    }
        //}

    }
}