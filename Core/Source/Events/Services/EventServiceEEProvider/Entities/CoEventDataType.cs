/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.EventsServices.EEProvider.CoEventDataType.dict v1.0
 * FileSize=5458 Header=273 CRC=970037446
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.EventsServices.EEProvider.Entities
{
    /// <summary>
    /// Definición de entidad CoEventDataType.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.EventsServices.EEProvider.CoEventDataType.dict"),
    Serializable(),
    DescriptionKey("CO_EVENT_DATA_TYPE_ENTITY"),
    TableMap(TableName = "CO_EVENT_DATA_TYPE", Schema = "EVE"),
    ]
    public partial class CoEventDataType :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string DataTypeCode = "DataTypeCode";
            public static readonly string Description = "Description";
            public static readonly string NumericInd = "NumericInd";
            public static readonly string SqlDataType = "SqlDataType";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="dataTypeCode">Propiedad clave DataTypeCode.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int dataTypeCode)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.DataTypeCode, dataTypeCode);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="dataTypeCode">Propiedad clave DataTypeCode.</param>
        public static PrimaryKey CreatePrimaryKey(int dataTypeCode)
        {
            return InternalCreatePrimaryKey<CoEventDataType>(dataTypeCode);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad Description.
        /// </summary>
        private string _description = null;
        /// <summary>
        /// Atributo para la propiedad NumericInd.
        /// </summary>
        private bool _numericInd;
        /// <summary>
        /// Atributo para la propiedad SqlDataType.
        /// </summary>
        private string _sqlDataType = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="dataTypeCode">DataTypeCode key property.</param>
        public CoEventDataType(int dataTypeCode) :
            this(CoEventDataType.CreatePrimaryKey(dataTypeCode), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public CoEventDataType(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad DataTypeCode.
        /// </summary>
        /// <value>Propiedad DataTypeCode.</value>
        [
        DescriptionKey("DATA_TYPE_CODE_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "DATA_TYPE_CD", DbType = System.Data.DbType.String),
        ]
        public int DataTypeCode
        {
            get
            {
                return (int)this._primaryKey[Properties.DataTypeCode];
            }
            set
            {
                this._primaryKey[Properties.DataTypeCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Description.
        /// </summary>
        /// <value>Propiedad Description.</value>
        [
        DescriptionKey("DESCRIPTION_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Description);
                }
                this._description = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad NumericInd.
        /// </summary>
        /// <value>Propiedad NumericInd.</value>
        [
        DescriptionKey("NUMERIC_IND_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "NUMERIC_IND", DbType = System.Data.DbType.String),
        ]
        public bool NumericInd
        {
            get
            {
                return this._numericInd;
            }
            set
            {
                this._numericInd = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad SqlDataType.
        /// </summary>
        /// <value>Propiedad SqlDataType.</value>
        [
        DescriptionKey("SQL_DATA_TYPE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "SQL_DATA_TYPE", DbType = System.Data.DbType.String),
        ]
        public string SqlDataType
        {
            get
            {
                return this._sqlDataType;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.SqlDataType);
                }
                this._sqlDataType = value;
            }
        }

    }
}