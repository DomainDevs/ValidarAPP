/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.EventsServices.EEProvider.CoEventAsocObj.dict v1.0
 * FileSize=4913 Header=270 CRC=3354898588
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.EventsServices.EEProvider.Entities
{
    /// <summary>
    /// Definición de entidad CoEventAsocObj.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.EventsServices.EEProvider.CoEventAsocObj.dict"),
    Serializable(),
    DescriptionKey("CO_EVENT_ASOC_OBJ_ENTITY"),
    TableMap(TableName = "CO_EVENT_ASOC_OBJ", Schema = "EVE"),
    ]
    public partial class CoEventAsocObj :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string GroupEventId = "GroupEventId";
            public static readonly string EventId = "EventId";
            public static readonly string AccessId = "AccessId";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="groupEventId">Propiedad clave GroupEventId.</param>
        /// <param name="eventId">Propiedad clave EventId.</param>
        /// <param name="accessId">Propiedad clave AccessId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int groupEventId, int eventId, int accessId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.GroupEventId, groupEventId);
            keys.Add(Properties.EventId, eventId);
            keys.Add(Properties.AccessId, accessId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="groupEventId">Propiedad clave GroupEventId.</param>
        /// <param name="eventId">Propiedad clave EventId.</param>
        /// <param name="accessId">Propiedad clave AccessId.</param>
        public static PrimaryKey CreatePrimaryKey(int groupEventId, int eventId, int accessId)
        {
            return InternalCreatePrimaryKey<CoEventAsocObj>(groupEventId, eventId, accessId);
        }
        #endregion

        //*** Object Attributes ********************************

        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="groupEventId">GroupEventId key property.</param>
        /// <param name="eventId">EventId key property.</param>
        /// <param name="accessId">AccessId key property.</param>
        public CoEventAsocObj(int groupEventId, int eventId, int accessId) :
            this(CoEventAsocObj.CreatePrimaryKey(groupEventId, eventId, accessId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public CoEventAsocObj(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad GroupEventId.
        /// </summary>
        /// <value>Propiedad GroupEventId.</value>
        [
        DescriptionKey("GROUP_EVENT_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "GROUP_EVENT_ID", DbType = System.Data.DbType.String),
        ]
        public int GroupEventId
        {
            get
            {
                return (int)this._primaryKey[Properties.GroupEventId];
            }
            set
            {
                this._primaryKey[Properties.GroupEventId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad EventId.
        /// </summary>
        /// <value>Propiedad EventId.</value>
        [
        DescriptionKey("EVENT_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "EVENT_ID", DbType = System.Data.DbType.String),
        ]
        public int EventId
        {
            get
            {
                return (int)this._primaryKey[Properties.EventId];
            }
            set
            {
                this._primaryKey[Properties.EventId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad AccessId.
        /// </summary>
        /// <value>Propiedad AccessId.</value>
        [
        DescriptionKey("ACCESS_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "ACCESS_ID", DbType = System.Data.DbType.String),
        ]
        public int AccessId
        {
            get
            {
                return (int)this._primaryKey[Properties.AccessId];
            }
            set
            {
                this._primaryKey[Properties.AccessId] = value;
            }
        }

    }
}