/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.EventsServices.EEProvider.CoEventNofitication.dict v1.0
 * FileSize=4258 Header=275 CRC=3283319888
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.EventsServices.EEProvider.Entities
{
    /// <summary>
    /// Definición de entidad CoEventNofitication.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.EventsServices.EEProvider.CoEventNofitication.dict"),
    Serializable(),
    DescriptionKey("CO_EVENT_NOFITICATION_ENTITY"),
    TableMap(TableName = "CO_EVENT_NOFITICATION", Schema = "EVE"),
    ]
    public partial class CoEventNofitication :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string AuthorizationId = "AuthorizationId";
            public static readonly string NotifyUserId = "NotifyUserId";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="authorizationId">Propiedad clave AuthorizationId.</param>
        /// <param name="notifyUserId">Propiedad clave NotifyUserId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int authorizationId, int notifyUserId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.AuthorizationId, authorizationId);
            keys.Add(Properties.NotifyUserId, notifyUserId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="authorizationId">Propiedad clave AuthorizationId.</param>
        /// <param name="notifyUserId">Propiedad clave NotifyUserId.</param>
        public static PrimaryKey CreatePrimaryKey(int authorizationId, int notifyUserId)
        {
            return InternalCreatePrimaryKey<CoEventNofitication>(authorizationId, notifyUserId);
        }
        #endregion

        //*** Object Attributes ********************************

        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="authorizationId">AuthorizationId key property.</param>
        /// <param name="notifyUserId">NotifyUserId key property.</param>
        public CoEventNofitication(int authorizationId, int notifyUserId) :
            this(CoEventNofitication.CreatePrimaryKey(authorizationId, notifyUserId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public CoEventNofitication(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad AuthorizationId.
        /// </summary>
        /// <value>Propiedad AuthorizationId.</value>
        [
        DescriptionKey("AUTHORIZATION_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "AUTHORIZATION_ID", DbType = System.Data.DbType.String),
        ]
        public int AuthorizationId
        {
            get
            {
                return (int)this._primaryKey[Properties.AuthorizationId];
            }
            set
            {
                this._primaryKey[Properties.AuthorizationId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad NotifyUserId.
        /// </summary>
        /// <value>Propiedad NotifyUserId.</value>
        [
        DescriptionKey("NOTIFY_USER_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "NOTIFY_USER_ID", DbType = System.Data.DbType.String),
        ]
        public int NotifyUserId
        {
            get
            {
                return (int)this._primaryKey[Properties.NotifyUserId];
            }
            set
            {
                this._primaryKey[Properties.NotifyUserId] = value;
            }
        }

    }
}