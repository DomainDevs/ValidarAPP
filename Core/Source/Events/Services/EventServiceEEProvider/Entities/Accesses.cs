/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.EventsServices.EEProvider.Accesses.dict v1.0
 * FileSize=8594 Header=264 CRC=4135263375
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.EventsServices.EEProvider.Entities
{
    /// <summary>
    /// Definición de entidad Accesses.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.EventsServices.EEProvider.Accesses.dict"),
    Serializable(),
    DescriptionKey("ACCESSES_ENTITY"),
    TableMap(TableName = "ACCESSES", Schema = "UU"),
    ]
    public partial class Accesses :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string AccessId = "AccessId";
            public static readonly string Enabled = "Enabled";
            public static readonly string ModuleCode = "ModuleCode";
            public static readonly string SubmoduleCode = "SubmoduleCode";
            public static readonly string AccessObjectId = "AccessObjectId";
            public static readonly string Url = "Url";
            public static readonly string ParentAccessId = "ParentAccessId";
            public static readonly string Description = "Description";
            public static readonly string AssocAccessObjectId = "AssocAccessObjectId";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="accessId">Propiedad clave AccessId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int accessId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.AccessId, accessId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="accessId">Propiedad clave AccessId.</param>
        public static PrimaryKey CreatePrimaryKey(int accessId)
        {
            return InternalCreatePrimaryKey<Accesses>(accessId);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad Enabled.
        /// </summary>
        private bool _enabled;
        /// <summary>
        /// Atributo para la propiedad ModuleCode.
        /// </summary>
        private int _moduleCode;
        /// <summary>
        /// Atributo para la propiedad SubmoduleCode.
        /// </summary>
        private int _submoduleCode;
        /// <summary>
        /// Atributo para la propiedad AccessObjectId.
        /// </summary>
        private int? _accessObjectId = null;
        /// <summary>
        /// Atributo para la propiedad Url.
        /// </summary>
        private string _url = null;
        /// <summary>
        /// Atributo para la propiedad ParentAccessId.
        /// </summary>
        private int? _parentAccessId = null;
        /// <summary>
        /// Atributo para la propiedad Description.
        /// </summary>
        private string _description = null;
        /// <summary>
        /// Atributo para la propiedad AssocAccessObjectId.
        /// </summary>
        private int? _assocAccessObjectId = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="accessId">AccessId key property.</param>
        public Accesses(int accessId) :
            this(Accesses.CreatePrimaryKey(accessId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public Accesses(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad AccessId.
        /// </summary>
        /// <value>Propiedad AccessId.</value>
        [
        DescriptionKey("ACCESS_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "ACCESS_ID", DbType = System.Data.DbType.String),
        ]
        public int AccessId
        {
            get
            {
                return (int)this._primaryKey[Properties.AccessId];
            }
            set
            {
                this._primaryKey[Properties.AccessId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Enabled.
        /// </summary>
        /// <value>Propiedad Enabled.</value>
        [
        DescriptionKey("ENABLED_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "ENABLED", DbType = System.Data.DbType.String),
        ]
        public bool Enabled
        {
            get
            {
                return this._enabled;
            }
            set
            {
                this._enabled = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ModuleCode.
        /// </summary>
        /// <value>Propiedad ModuleCode.</value>
        [
        DescriptionKey("MODULE_CODE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "MODULE_CD", DbType = System.Data.DbType.String),
        ]
        public int ModuleCode
        {
            get
            {
                return this._moduleCode;
            }
            set
            {
                this._moduleCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad SubmoduleCode.
        /// </summary>
        /// <value>Propiedad SubmoduleCode.</value>
        [
        DescriptionKey("SUBMODULE_CODE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "SUBMODULE_CD", DbType = System.Data.DbType.String),
        ]
        public int SubmoduleCode
        {
            get
            {
                return this._submoduleCode;
            }
            set
            {
                this._submoduleCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad AccessObjectId.
        /// </summary>
        /// <value>Propiedad AccessObjectId.</value>
        [
        DescriptionKey("ACCESS_OBJECT_ID_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "ACCESS_OBJECT_ID", DbType = System.Data.DbType.String),
        ]
        public int? AccessObjectId
        {
            get
            {
                return this._accessObjectId;
            }
            set
            {
                this._accessObjectId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Url.
        /// </summary>
        /// <value>Propiedad Url.</value>
        [
        DescriptionKey("URL_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "URL", DbType = System.Data.DbType.String),
        ]
        public string Url
        {
            get
            {
                return this._url;
            }
            set
            {
                this._url = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ParentAccessId.
        /// </summary>
        /// <value>Propiedad ParentAccessId.</value>
        [
        DescriptionKey("PARENT_ACCESS_ID_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "PARENT_ACCESS_ID", DbType = System.Data.DbType.String),
        ]
        public int? ParentAccessId
        {
            get
            {
                return this._parentAccessId;
            }
            set
            {
                this._parentAccessId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Description.
        /// </summary>
        /// <value>Propiedad Description.</value>
        [
        DescriptionKey("DESCRIPTION_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Description);
                }
                this._description = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad AssocAccessObjectId.
        /// </summary>
        /// <value>Propiedad AssocAccessObjectId.</value>
        [
        DescriptionKey("ASSOC_ACCESS_OBJECT_ID_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "ASSOC_ACCESS_OBJECT_ID", DbType = System.Data.DbType.String),
        ]
        public int? AssocAccessObjectId
        {
            get
            {
                return this._assocAccessObjectId;
            }
            set
            {
                this._assocAccessObjectId = value;
            }
        }

    }
}