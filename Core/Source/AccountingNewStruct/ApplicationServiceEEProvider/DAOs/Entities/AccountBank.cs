/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Company.Application.ParametrizationServices.EEProvider.AccountBank.dict v1.0
 * FileSize=8192 Header=278 CRC=117953674
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.AccountingServices.EEProvider.Entities
{
    /// <summary>
    /// Definición de entidad AccountBank.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.AccountingServices.EEProvider.AccountBank.dict"),
    Serializable(),
    DescriptionKey("ACCOUNT_BANK_ENTITY"),
    TableMap(TableName="ACCOUNT_BANK", Schema="UP"),
    ]
    public partial class AccountBank :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string AccountBankCode = "AccountBankCode";
			public static readonly string IndividualId = "IndividualId";
			public static readonly string AccountTypeCode = "AccountTypeCode";
			public static readonly string Number = "Number";
			public static readonly string BankCode = "BankCode";
			public static readonly string Enabled = "Enabled";
			public static readonly string Default = "Default";
			public static readonly string CurrencyCode = "CurrencyCode";
		}

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="accountBankCode">Propiedad clave AccountBankCode.</param>
		/// <param name="individualId">Propiedad clave IndividualId.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>(int accountBankCode, int individualId)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.AccountBankCode, accountBankCode);
		    keys.Add(Properties.IndividualId, individualId);

		    return new PrimaryKey<T>(keys);
	    }

		/// <summary>
		/// Crea una clave primaria para esta clase.
		/// </summary>
		/// <param name="accountBankCode">Propiedad clave AccountBankCode.</param>
		/// <param name="individualId">Propiedad clave IndividualId.</param>
		public static PrimaryKey CreatePrimaryKey(int accountBankCode, int individualId)
	    {
			return InternalCreatePrimaryKey<AccountBank>(accountBankCode, individualId);
		}
#endregion

	    //*** Object Attributes ********************************

		/// <summary>
		/// Atributo para la propiedad AccountTypeCode.
		/// </summary>
        private int? _accountTypeCode = null;
		/// <summary>
		/// Atributo para la propiedad Number.
		/// </summary>
        private string _number = null;
		/// <summary>
		/// Atributo para la propiedad BankCode.
		/// </summary>
        private int? _bankCode = null;
		/// <summary>
		/// Atributo para la propiedad Enabled.
		/// </summary>
        private bool? _enabled = null;
		/// <summary>
		/// Atributo para la propiedad Default.
		/// </summary>
        private bool? _default = null;
		/// <summary>
		/// Atributo para la propiedad CurrencyCode.
		/// </summary>
        private int? _currencyCode = null;
	    //*** Object Constructors ********************************

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="accountBankCode">AccountBankCode key property.</param>
		/// <param name="individualId">IndividualId key property.</param>
	    public AccountBank(int accountBankCode, int individualId):
			this(AccountBank.CreatePrimaryKey(accountBankCode, individualId), null)
	    {
	    }

		/// <summary>
		/// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
		/// </summary>
		/// <param name="key">
		/// Identificador de la instancia de la entidad.
		/// </param>
		/// <param name="initialValues">
		/// Valores para establecer el estado de la instancia.
		/// </param>
	    public AccountBank(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad AccountBankCode.
		/// </summary>
		/// <value>Propiedad AccountBankCode.</value>
	    [
		DescriptionKey("ACCOUNT_BANK_CODE_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="ACCOUNT_BANK_CD", DbType=System.Data.DbType.String),
	    ]
        public int AccountBankCode
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.AccountBankCode];
		    }
		    set
		    {
				this._primaryKey[Properties.AccountBankCode] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad IndividualId.
		/// </summary>
		/// <value>Propiedad IndividualId.</value>
	    [
		DescriptionKey("INDIVIDUAL_ID_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="INDIVIDUAL_ID", DbType=System.Data.DbType.String),
	    ]
        public int IndividualId
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.IndividualId];
		    }
		    set
		    {
				this._primaryKey[Properties.IndividualId] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad AccountTypeCode.
		/// </summary>
		/// <value>Propiedad AccountTypeCode.</value>
	    [
		DescriptionKey("ACCOUNT_TYPE_CODE_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="ACCOUNT_TYPE_CD", DbType=System.Data.DbType.String),
	    ]
        public int? AccountTypeCode
	    {
		    get
		    {
			    return this._accountTypeCode;
		    }
		    set
		    {
				this._accountTypeCode = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Number.
		/// </summary>
		/// <value>Propiedad Number.</value>
	    [
		DescriptionKey("NUMBER_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="NUMBER", DbType=System.Data.DbType.String),
	    ]
        public string Number
	    {
		    get
		    {
			    return this._number;
		    }
		    set
		    {
				this._number = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad BankCode.
		/// </summary>
		/// <value>Propiedad BankCode.</value>
	    [
		DescriptionKey("BANK_CODE_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="BANK_CD", DbType=System.Data.DbType.String),
	    ]
        public int? BankCode
	    {
		    get
		    {
			    return this._bankCode;
		    }
		    set
		    {
				this._bankCode = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Enabled.
		/// </summary>
		/// <value>Propiedad Enabled.</value>
	    [
		DescriptionKey("ENABLED_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="ENABLED", DbType=System.Data.DbType.String),
	    ]
        public bool? Enabled
	    {
		    get
		    {
			    return this._enabled;
		    }
		    set
		    {
				this._enabled = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Default.
		/// </summary>
		/// <value>Propiedad Default.</value>
	    [
		DescriptionKey("DEFAULT_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="DEFAULT", DbType=System.Data.DbType.String),
	    ]
        public bool? Default
	    {
		    get
		    {
			    return this._default;
		    }
		    set
		    {
				this._default = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad CurrencyCode.
		/// </summary>
		/// <value>Propiedad CurrencyCode.</value>
	    [
		DescriptionKey("CURRENCY_CODE_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="CURRENCY_CD", DbType=System.Data.DbType.String),
	    ]
        public int? CurrencyCode
	    {
		    get
		    {
			    return this._currencyCode;
		    }
		    set
		    {
				this._currencyCode = value;
			}
	    }

    }
}