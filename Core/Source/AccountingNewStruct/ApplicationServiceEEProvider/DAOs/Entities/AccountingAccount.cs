/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.AccountingServices.EEProvider.AccountingAccount.dict v1.0
 * FileSize=14413 Header=277 CRC=916662199
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.AccountingServices.EEProvider.Entities
{
    /// <summary>
    /// Definición de entidad AccountingAccount.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.AccountingServices.EEProvider.AccountingAccount.dict"),
    Serializable(),
    DescriptionKey("ACCOUNTING_ACCOUNT_ENTITY"),
    TableMap(TableName="ACCOUNTING_ACCOUNT", Schema="GL"),
    ]
    public partial class AccountingAccount :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string AccountingAccountId = "AccountingAccountId";
			public static readonly string AccountNumber = "AccountNumber";
			public static readonly string AccountName = "AccountName";
			public static readonly string AccountingNature = "AccountingNature";
			public static readonly string AccountingAccountParentId = "AccountingAccountParentId";
			public static readonly string DefaultCurrencyCode = "DefaultCurrencyCode";
			public static readonly string DefaultBranchCode = "DefaultBranchCode";
			public static readonly string RequireCostCenter = "RequireCostCenter";
			public static readonly string RequireAnalysis = "RequireAnalysis";
			public static readonly string AnalysisId = "AnalysisId";
			public static readonly string IsMulticurrency = "IsMulticurrency";
			public static readonly string IsMultibranch = "IsMultibranch";
			public static readonly string IsOfficialNomenclature = "IsOfficialNomenclature";
			public static readonly string AccountTypeId = "AccountTypeId";
			public static readonly string AccountApplication = "AccountApplication";
			public static readonly string Comments = "Comments";
		}

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="accountingAccountId">Propiedad clave AccountingAccountId.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>(int accountingAccountId)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.AccountingAccountId, accountingAccountId);

		    return new PrimaryKey<T>(keys);
	    }

		/// <summary>
		/// Crea una clave primaria para esta clase.
		/// </summary>
		/// <param name="accountingAccountId">Propiedad clave AccountingAccountId.</param>
		public static PrimaryKey CreatePrimaryKey(int accountingAccountId)
	    {
			return InternalCreatePrimaryKey<AccountingAccount>(accountingAccountId);
		}
#endregion

	    //*** Object Attributes ********************************

		/// <summary>
		/// Atributo para la propiedad AccountNumber.
		/// </summary>
        private string _accountNumber = null;
		/// <summary>
		/// Atributo para la propiedad AccountName.
		/// </summary>
        private string _accountName = null;
		/// <summary>
		/// Atributo para la propiedad AccountingNature.
		/// </summary>
        private int? _accountingNature = null;
		/// <summary>
		/// Atributo para la propiedad AccountingAccountParentId.
		/// </summary>
        private int? _accountingAccountParentId = null;
		/// <summary>
		/// Atributo para la propiedad DefaultCurrencyCode.
		/// </summary>
        private int? _defaultCurrencyCode = null;
		/// <summary>
		/// Atributo para la propiedad DefaultBranchCode.
		/// </summary>
        private int? _defaultBranchCode = null;
		/// <summary>
		/// Atributo para la propiedad RequireCostCenter.
		/// </summary>
        private bool? _requireCostCenter = null;
		/// <summary>
		/// Atributo para la propiedad RequireAnalysis.
		/// </summary>
        private bool? _requireAnalysis = null;
		/// <summary>
		/// Atributo para la propiedad AnalysisId.
		/// </summary>
        private int? _analysisId = null;
		/// <summary>
		/// Atributo para la propiedad IsMulticurrency.
		/// </summary>
        private bool? _isMulticurrency = null;
		/// <summary>
		/// Atributo para la propiedad IsMultibranch.
		/// </summary>
        private bool? _isMultibranch = null;
		/// <summary>
		/// Atributo para la propiedad IsOfficialNomenclature.
		/// </summary>
        private bool? _isOfficialNomenclature = null;
		/// <summary>
		/// Atributo para la propiedad AccountTypeId.
		/// </summary>
        private int? _accountTypeId = null;
		/// <summary>
		/// Atributo para la propiedad AccountApplication.
		/// </summary>
        private int? _accountApplication = null;
		/// <summary>
		/// Atributo para la propiedad Comments.
		/// </summary>
        private string _comments = null;
	    //*** Object Constructors ********************************

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="accountingAccountId">AccountingAccountId key property.</param>
	    public AccountingAccount(int accountingAccountId):
			this(AccountingAccount.CreatePrimaryKey(accountingAccountId), null)
	    {
	    }

		/// <summary>
		/// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
		/// </summary>
		/// <param name="key">
		/// Identificador de la instancia de la entidad.
		/// </param>
		/// <param name="initialValues">
		/// Valores para establecer el estado de la instancia.
		/// </param>
	    public AccountingAccount(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad AccountingAccountId.
		/// </summary>
		/// <value>Propiedad AccountingAccountId.</value>
	    [
		DescriptionKey("ACCOUNTING_ACCOUNT_ID_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="ACCOUNTING_ACCOUNT_ID", DbType=System.Data.DbType.String),
	    ]
        public int AccountingAccountId
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.AccountingAccountId];
		    }
		    set
		    {
				this._primaryKey[Properties.AccountingAccountId] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad AccountNumber.
		/// </summary>
		/// <value>Propiedad AccountNumber.</value>
	    [
		DescriptionKey("ACCOUNT_NUMBER_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="ACCOUNT_NUMBER", DbType=System.Data.DbType.String),
	    ]
        public string AccountNumber
	    {
		    get
		    {
			    return this._accountNumber;
		    }
		    set
		    {
				this._accountNumber = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad AccountName.
		/// </summary>
		/// <value>Propiedad AccountName.</value>
	    [
		DescriptionKey("ACCOUNT_NAME_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="ACCOUNT_NAME", DbType=System.Data.DbType.String),
	    ]
        public string AccountName
	    {
		    get
		    {
			    return this._accountName;
		    }
		    set
		    {
				this._accountName = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad AccountingNature.
		/// </summary>
		/// <value>Propiedad AccountingNature.</value>
	    [
		DescriptionKey("ACCOUNTING_NATURE_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="ACCOUNTING_NATURE", DbType=System.Data.DbType.String),
	    ]
        public int? AccountingNature
	    {
		    get
		    {
			    return this._accountingNature;
		    }
		    set
		    {
				this._accountingNature = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad AccountingAccountParentId.
		/// </summary>
		/// <value>Propiedad AccountingAccountParentId.</value>
	    [
		DescriptionKey("ACCOUNTING_ACCOUNT_PARENT_ID_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="ACCOUNTING_ACCOUNT_PARENT_ID", DbType=System.Data.DbType.String),
	    ]
        public int? AccountingAccountParentId
	    {
		    get
		    {
			    return this._accountingAccountParentId;
		    }
		    set
		    {
				this._accountingAccountParentId = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad DefaultCurrencyCode.
		/// </summary>
		/// <value>Propiedad DefaultCurrencyCode.</value>
	    [
		DescriptionKey("DEFAULT_CURRENCY_CODE_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="DEFAULT_CURRENCY_CD", DbType=System.Data.DbType.String),
	    ]
        public int? DefaultCurrencyCode
	    {
		    get
		    {
			    return this._defaultCurrencyCode;
		    }
		    set
		    {
				this._defaultCurrencyCode = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad DefaultBranchCode.
		/// </summary>
		/// <value>Propiedad DefaultBranchCode.</value>
	    [
		DescriptionKey("DEFAULT_BRANCH_CODE_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="DEFAULT_BRANCH_CD", DbType=System.Data.DbType.String),
	    ]
        public int? DefaultBranchCode
	    {
		    get
		    {
			    return this._defaultBranchCode;
		    }
		    set
		    {
				this._defaultBranchCode = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad RequireCostCenter.
		/// </summary>
		/// <value>Propiedad RequireCostCenter.</value>
	    [
		DescriptionKey("REQUIRE_COST_CENTER_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="REQUIRE_COST_CENTER", DbType=System.Data.DbType.String),
	    ]
        public bool? RequireCostCenter
	    {
		    get
		    {
			    return this._requireCostCenter;
		    }
		    set
		    {
				this._requireCostCenter = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad RequireAnalysis.
		/// </summary>
		/// <value>Propiedad RequireAnalysis.</value>
	    [
		DescriptionKey("REQUIRE_ANALYSIS_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="REQUIRE_ANALYSIS", DbType=System.Data.DbType.String),
	    ]
        public bool? RequireAnalysis
	    {
		    get
		    {
			    return this._requireAnalysis;
		    }
		    set
		    {
				this._requireAnalysis = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad AnalysisId.
		/// </summary>
		/// <value>Propiedad AnalysisId.</value>
	    [
		DescriptionKey("ANALYSIS_ID_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="ANALYSIS_ID", DbType=System.Data.DbType.String),
	    ]
        public int? AnalysisId
	    {
		    get
		    {
			    return this._analysisId;
		    }
		    set
		    {
				this._analysisId = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad IsMulticurrency.
		/// </summary>
		/// <value>Propiedad IsMulticurrency.</value>
	    [
		DescriptionKey("IS_MULTICURRENCY_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="IS_MULTICURRENCY", DbType=System.Data.DbType.String),
	    ]
        public bool? IsMulticurrency
	    {
		    get
		    {
			    return this._isMulticurrency;
		    }
		    set
		    {
				this._isMulticurrency = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad IsMultibranch.
		/// </summary>
		/// <value>Propiedad IsMultibranch.</value>
	    [
		DescriptionKey("IS_MULTIBRANCH_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="IS_MULTIBRANCH", DbType=System.Data.DbType.String),
	    ]
        public bool? IsMultibranch
	    {
		    get
		    {
			    return this._isMultibranch;
		    }
		    set
		    {
				this._isMultibranch = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad IsOfficialNomenclature.
		/// </summary>
		/// <value>Propiedad IsOfficialNomenclature.</value>
	    [
		DescriptionKey("IS_OFFICIAL_NOMENCLATURE_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="IS_OFFICIAL_NOMENCLATURE", DbType=System.Data.DbType.String),
	    ]
        public bool? IsOfficialNomenclature
	    {
		    get
		    {
			    return this._isOfficialNomenclature;
		    }
		    set
		    {
				this._isOfficialNomenclature = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad AccountTypeId.
		/// </summary>
		/// <value>Propiedad AccountTypeId.</value>
	    [
		DescriptionKey("ACCOUNT_TYPE_ID_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="ACCOUNT_TYPE_ID", DbType=System.Data.DbType.String),
	    ]
        public int? AccountTypeId
	    {
		    get
		    {
			    return this._accountTypeId;
		    }
		    set
		    {
				this._accountTypeId = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad AccountApplication.
		/// </summary>
		/// <value>Propiedad AccountApplication.</value>
	    [
		DescriptionKey("ACCOUNT_APPLICATION_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="ACCOUNT_APPLICATION", DbType=System.Data.DbType.String),
	    ]
        public int? AccountApplication
	    {
		    get
		    {
			    return this._accountApplication;
		    }
		    set
		    {
				this._accountApplication = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Comments.
		/// </summary>
		/// <value>Propiedad Comments.</value>
	    [
		DescriptionKey("COMMENTS_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="COMMENTS", DbType=System.Data.DbType.String),
	    ]
        public string Comments
	    {
		    get
		    {
			    return this._comments;
		    }
		    set
		    {
				this._comments = value;
			}
	    }

    }
}