/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.AccountingServices.EEProvider.DailyAccountingAnalysis.dict v1.0
 * FileSize=7375 Header=283 CRC=1692702924
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.AccountingServices.EEProvider.Entities
{
    /// <summary>
    /// Definición de entidad DailyAccountingAnalysis.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.AccountingServices.EEProvider.DailyAccountingAnalysis.dict"),
    Serializable(),
    DescriptionKey("DAILY_ACCOUNTING_ANALYSIS_ENTITY"),
    TableMap(TableName="DAILY_ACCOUNTING_ANALYSIS", Schema="ACC"),
    ]
    public partial class DailyAccountingAnalysis :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string DailyAccountingAnalysisId = "DailyAccountingAnalysisId";
			public static readonly string DailyAccountingTransCode = "DailyAccountingTransCode";
			public static readonly string AnalysisCode = "AnalysisCode";
			public static readonly string AnalysisConceptCode = "AnalysisConceptCode";
			public static readonly string ConceptKey = "ConceptKey";
			public static readonly string Description = "Description";
		}

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="dailyAccountingAnalysisId">Propiedad clave DailyAccountingAnalysisId.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>(int dailyAccountingAnalysisId)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.DailyAccountingAnalysisId, dailyAccountingAnalysisId);

		    return new PrimaryKey<T>(keys);
	    }

		/// <summary>
		/// Crea una clave primaria para esta clase.
		/// </summary>
		/// <param name="dailyAccountingAnalysisId">Propiedad clave DailyAccountingAnalysisId.</param>
		public static PrimaryKey CreatePrimaryKey(int dailyAccountingAnalysisId)
	    {
			return InternalCreatePrimaryKey<DailyAccountingAnalysis>(dailyAccountingAnalysisId);
		}
#endregion

	    //*** Object Attributes ********************************

		/// <summary>
		/// Atributo para la propiedad DailyAccountingTransCode.
		/// </summary>
        private int _dailyAccountingTransCode;
		/// <summary>
		/// Atributo para la propiedad AnalysisCode.
		/// </summary>
        private int _analysisCode;
		/// <summary>
		/// Atributo para la propiedad AnalysisConceptCode.
		/// </summary>
        private int _analysisConceptCode;
		/// <summary>
		/// Atributo para la propiedad ConceptKey.
		/// </summary>
        private string _conceptKey = null;
		/// <summary>
		/// Atributo para la propiedad Description.
		/// </summary>
        private string _description = null;
	    //*** Object Constructors ********************************

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="dailyAccountingAnalysisId">DailyAccountingAnalysisId key property.</param>
	    public DailyAccountingAnalysis(int dailyAccountingAnalysisId):
			this(DailyAccountingAnalysis.CreatePrimaryKey(dailyAccountingAnalysisId), null)
	    {
	    }

		/// <summary>
		/// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
		/// </summary>
		/// <param name="key">
		/// Identificador de la instancia de la entidad.
		/// </param>
		/// <param name="initialValues">
		/// Valores para establecer el estado de la instancia.
		/// </param>
	    public DailyAccountingAnalysis(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad DailyAccountingAnalysisId.
		/// </summary>
		/// <value>Propiedad DailyAccountingAnalysisId.</value>
	    [
		DescriptionKey("DAILY_ACCOUNTING_ANALYSIS_ID_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="DAILY_ACCOUNTING_ANALYSIS_ID", DbType=System.Data.DbType.String),
	    ]
        public int DailyAccountingAnalysisId
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.DailyAccountingAnalysisId];
		    }
		    set
		    {
				this._primaryKey[Properties.DailyAccountingAnalysisId] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad DailyAccountingTransCode.
		/// </summary>
		/// <value>Propiedad DailyAccountingTransCode.</value>
	    [
		DescriptionKey("DAILY_ACCOUNTING_TRANS_CODE_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="DAILY_ACCOUNTING_TRANS_CD", DbType=System.Data.DbType.String),
	    ]
        public int DailyAccountingTransCode
	    {
		    get
		    {
			    return this._dailyAccountingTransCode;
		    }
		    set
		    {
				this._dailyAccountingTransCode = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad AnalysisCode.
		/// </summary>
		/// <value>Propiedad AnalysisCode.</value>
	    [
		DescriptionKey("ANALYSIS_CODE_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="ANALYSIS_CD", DbType=System.Data.DbType.String),
	    ]
        public int AnalysisCode
	    {
		    get
		    {
			    return this._analysisCode;
		    }
		    set
		    {
				this._analysisCode = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad AnalysisConceptCode.
		/// </summary>
		/// <value>Propiedad AnalysisConceptCode.</value>
	    [
		DescriptionKey("ANALYSIS_CONCEPT_CODE_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="ANALYSIS_CONCEPT_CD", DbType=System.Data.DbType.String),
	    ]
        public int AnalysisConceptCode
	    {
		    get
		    {
			    return this._analysisConceptCode;
		    }
		    set
		    {
				this._analysisConceptCode = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad ConceptKey.
		/// </summary>
		/// <value>Propiedad ConceptKey.</value>
	    [
		DescriptionKey("CONCEPT_KEY_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="CONCEPT_KEY", DbType=System.Data.DbType.String),
	    ]
        public string ConceptKey
	    {
		    get
		    {
			    return this._conceptKey;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.ConceptKey);
				}
				this._conceptKey = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Description.
		/// </summary>
		/// <value>Propiedad Description.</value>
	    [
		DescriptionKey("DESCRIPTION_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="DESCRIPTION", DbType=System.Data.DbType.String),
	    ]
        public string Description
	    {
		    get
		    {
			    return this._description;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.Description);
				}
				this._description = value;
			}
	    }

    }
}