/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.AccountingServices.EEProvider.Amount.dict v1.0
 * FileSize=5948 Header=266 CRC=2817882949
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.AccountingServices.EEProvider.Entities
{
    /// <summary>
    /// Definición de entidad Amount.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.AccountingServices.EEProvider.Amount.dict"),
    Serializable(),
    DescriptionKey("AMOUNT_ENTITY"),
    TableMap(TableName="AMOUNT", Schema="ACC"),
    ]
    public partial class Amount :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string AmountId = "AmountId";
			public static readonly string DepositPremiumTransactionCode = "DepositPremiumTransactionCode";
			public static readonly string IncomeAmount = "IncomeAmount";
			public static readonly string ExchangeRate = "ExchangeRate";
			public static readonly string Value = "Value";
		}

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="amountId">Propiedad clave AmountId.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>(int amountId)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.AmountId, amountId);

		    return new PrimaryKey<T>(keys);
	    }

		/// <summary>
		/// Crea una clave primaria para esta clase.
		/// </summary>
		/// <param name="amountId">Propiedad clave AmountId.</param>
		public static PrimaryKey CreatePrimaryKey(int amountId)
	    {
			return InternalCreatePrimaryKey<Amount>(amountId);
		}
#endregion

	    //*** Object Attributes ********************************

		/// <summary>
		/// Atributo para la propiedad DepositPremiumTransactionCode.
		/// </summary>
        private int? _depositPremiumTransactionCode = null;
		/// <summary>
		/// Atributo para la propiedad IncomeAmount.
		/// </summary>
        private decimal? _incomeAmount = null;
		/// <summary>
		/// Atributo para la propiedad ExchangeRate.
		/// </summary>
        private decimal? _exchangeRate = null;
		/// <summary>
		/// Atributo para la propiedad Value.
		/// </summary>
        private decimal? _value = null;
	    //*** Object Constructors ********************************

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="amountId">AmountId key property.</param>
	    public Amount(int amountId):
			this(Amount.CreatePrimaryKey(amountId), null)
	    {
	    }

		/// <summary>
		/// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
		/// </summary>
		/// <param name="key">
		/// Identificador de la instancia de la entidad.
		/// </param>
		/// <param name="initialValues">
		/// Valores para establecer el estado de la instancia.
		/// </param>
	    public Amount(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad AmountId.
		/// </summary>
		/// <value>Propiedad AmountId.</value>
	    [
		DescriptionKey("AMOUNT_ID_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="AMOUNT_ID", DbType=System.Data.DbType.String),
	    ]
        public int AmountId
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.AmountId];
		    }
		    set
		    {
				this._primaryKey[Properties.AmountId] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad DepositPremiumTransactionCode.
		/// </summary>
		/// <value>Propiedad DepositPremiumTransactionCode.</value>
	    [
		DescriptionKey("DEPOSIT_PREMIUM_TRANSACTION_CODE_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="DEPOSIT_PREMIUM_TRANSACTION_CD", DbType=System.Data.DbType.String),
	    ]
        public int? DepositPremiumTransactionCode
	    {
		    get
		    {
			    return this._depositPremiumTransactionCode;
		    }
		    set
		    {
				this._depositPremiumTransactionCode = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad IncomeAmount.
		/// </summary>
		/// <value>Propiedad IncomeAmount.</value>
	    [
		DescriptionKey("INCOME_AMOUNT_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="INCOME_AMOUNT", DbType=System.Data.DbType.Decimal),
	    ]
        public decimal? IncomeAmount
	    {
		    get
		    {
			    return this._incomeAmount;
		    }
		    set
		    {
				this._incomeAmount = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad ExchangeRate.
		/// </summary>
		/// <value>Propiedad ExchangeRate.</value>
	    [
		DescriptionKey("EXCHANGE_RATE_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="EXCHANGE_RATE", DbType=System.Data.DbType.Decimal),
	    ]
        public decimal? ExchangeRate
	    {
		    get
		    {
			    return this._exchangeRate;
		    }
		    set
		    {
				this._exchangeRate = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Value.
		/// </summary>
		/// <value>Propiedad Value.</value>
	    [
		DescriptionKey("VALUE_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="VALUE", DbType=System.Data.DbType.Decimal),
	    ]
        public decimal? Value
	    {
		    get
		    {
			    return this._value;
		    }
		    set
		    {
				this._value = value;
			}
	    }

    }
}