/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.AccountingServices.CurrencyDifference.dict v1.0
 * FileSize=4747 Header=263 CRC=2269748327
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.AccountingServices.EEProvider.Entities
{
    /// <summary>
    /// Definición de entidad CurrencyDifference.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.AccountingServices.EEProvider.CurrencyDifference.dict"),
    Serializable(),
    DescriptionKey("CURRENCY_DIFFERENCE_ENTITY"),
    TableMap(TableName = "CURRENCY_DIFFERENCE", Schema = "ACC"),
    ]
    public partial class CurrencyDifference :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string CurrencyCode = "CurrencyCode";
			public static readonly string MaximumDifference = "MaximumDifference";
			public static readonly string PercentageDifference = "PercentageDifference";
		}

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="currencyCode">Propiedad clave CurrencyCode.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>(int currencyCode)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.CurrencyCode, currencyCode);

		    return new PrimaryKey<T>(keys);
	    }

		/// <summary>
		/// Crea una clave primaria para esta clase.
		/// </summary>
		/// <param name="currencyCode">Propiedad clave CurrencyCode.</param>
		public static PrimaryKey CreatePrimaryKey(int currencyCode)
	    {
			return InternalCreatePrimaryKey<CurrencyDifference>(currencyCode);
		}
#endregion

	    //*** Object Attributes ********************************

		/// <summary>
		/// Atributo para la propiedad MaximumDifference.
		/// </summary>
        private decimal? _maximumDifference = null;
		/// <summary>
		/// Atributo para la propiedad PercentageDifference.
		/// </summary>
        private decimal? _percentageDifference = null;
	    //*** Object Constructors ********************************

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="currencyCode">CurrencyCode key property.</param>
	    public CurrencyDifference(int currencyCode):
			this(CurrencyDifference.CreatePrimaryKey(currencyCode), null)
	    {
	    }

		/// <summary>
		/// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
		/// </summary>
		/// <param name="key">
		/// Identificador de la instancia de la entidad.
		/// </param>
		/// <param name="initialValues">
		/// Valores para establecer el estado de la instancia.
		/// </param>
	    public CurrencyDifference(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad CurrencyCode.
		/// </summary>
		/// <value>Propiedad CurrencyCode.</value>
	    [
		DescriptionKey("CURRENCY_CODE_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="CURRENCY_CD", DbType=System.Data.DbType.String),
	    ]
        public int CurrencyCode
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.CurrencyCode];
		    }
		    set
		    {
				this._primaryKey[Properties.CurrencyCode] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad MaximumDifference.
		/// </summary>
		/// <value>Propiedad MaximumDifference.</value>
	    [
		DescriptionKey("MAXIMUM_DIFFERENCE_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="MAXIMUM_DIFFERENCE", DbType=System.Data.DbType.Decimal),
	    ]
        public decimal? MaximumDifference
	    {
		    get
		    {
			    return this._maximumDifference;
		    }
		    set
		    {
				this._maximumDifference = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad PercentageDifference.
		/// </summary>
		/// <value>Propiedad PercentageDifference.</value>
	    [
		DescriptionKey("PERCENTAGE_DIFFERENCE_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="PERCENTAGE_DIFFERENCE", DbType=System.Data.DbType.Decimal),
	    ]
        public decimal? PercentageDifference
	    {
		    get
		    {
			    return this._percentageDifference;
		    }
		    set
		    {
				this._percentageDifference = value;
			}
	    }

    }
}