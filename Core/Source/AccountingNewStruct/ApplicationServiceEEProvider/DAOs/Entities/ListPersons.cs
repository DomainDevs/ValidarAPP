/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.AccountingServices.EEProvider.ListPersons.dict v1.0
 * FileSize=5735 Header=269 CRC=91425803
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.AccountingServices.EEProvider.Entities
{
    /// <summary>
    /// Definición de entidad ListPersons.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.AccountingServices.EEProvider.ListPersons.dict"),
    Serializable(),
    DescriptionKey("LIST_PERSONS_ENTITY"),
    TableMap(TableName="LIST_PERSONS", Schema="UP"),
    ]
    public partial class ListPersons :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string IndividualId = "IndividualId";
			public static readonly string Name = "Name";
			public static readonly string DocumentNumber = "DocumentNumber";
			public static readonly string DocumentType = "DocumentType";
			public static readonly string IndividualTypeCode = "IndividualTypeCode";
		}

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>()
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();

		    return new PrimaryKey<T>(keys);
	    }

		/// <summary>
		/// Crea una clave primaria para esta clase.
		/// </summary>
		public static PrimaryKey CreatePrimaryKey()
	    {
			return InternalCreatePrimaryKey<ListPersons>();
		}
#endregion

	    //*** Object Attributes ********************************

		/// <summary>
		/// Atributo para la propiedad IndividualId.
		/// </summary>
        private int _individualId;
		/// <summary>
		/// Atributo para la propiedad Name.
		/// </summary>
        private string _name = null;
		/// <summary>
		/// Atributo para la propiedad DocumentNumber.
		/// </summary>
        private string _documentNumber = null;
		/// <summary>
		/// Atributo para la propiedad DocumentType.
		/// </summary>
        private int _documentType;
		/// <summary>
		/// Atributo para la propiedad IndividualTypeCode.
		/// </summary>
        private int _individualTypeCode;
	    //*** Object Constructors ********************************

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
	    public ListPersons():
			this(ListPersons.CreatePrimaryKey(), null)
	    {
	    }

		/// <summary>
		/// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
		/// </summary>
		/// <param name="key">
		/// Identificador de la instancia de la entidad.
		/// </param>
		/// <param name="initialValues">
		/// Valores para establecer el estado de la instancia.
		/// </param>
	    public ListPersons(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad IndividualId.
		/// </summary>
		/// <value>Propiedad IndividualId.</value>
	    [
		DescriptionKey("INDIVIDUAL_ID_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="INDIVIDUAL_ID", DbType=System.Data.DbType.String),
	    ]
        public int IndividualId
	    {
		    get
		    {
			    return this._individualId;
		    }
		    set
		    {
				this._individualId = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Name.
		/// </summary>
		/// <value>Propiedad Name.</value>
	    [
		DescriptionKey("NAME_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="NAME", DbType=System.Data.DbType.String),
	    ]
        public string Name
	    {
		    get
		    {
			    return this._name;
		    }
		    set
		    {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Name);
                }
                this._name = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad DocumentNumber.
		/// </summary>
		/// <value>Propiedad DocumentNumber.</value>
	    [
		DescriptionKey("DOCUMENT_NUMBER_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="DOCUMENT_NUMBER", DbType=System.Data.DbType.String),
	    ]
        public string DocumentNumber
	    {
		    get
		    {
			    return this._documentNumber;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.DocumentNumber);
				}
				this._documentNumber = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad DocumentType.
		/// </summary>
		/// <value>Propiedad DocumentType.</value>
	    [
		DescriptionKey("DOCUMENT_TYPE_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="DOCUMENT_TYPE", DbType=System.Data.DbType.String),
	    ]
        public int DocumentType
	    {
		    get
		    {
			    return this._documentType;
		    }
		    set
		    {
				this._documentType = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad IndividualTypeCode.
		/// </summary>
		/// <value>Propiedad IndividualTypeCode.</value>
	    [
		DescriptionKey("INDIVIDUAL_TYPE_CODE_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="INDIVIDUAL_TYPE_CD", DbType=System.Data.DbType.String),
	    ]
        public int IndividualTypeCode
	    {
		    get
		    {
			    return this._individualTypeCode;
		    }
		    set
		    {
				this._individualTypeCode = value;
			}
	    }

    }
}