/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.AccountingService.GetCheckDeposit.dict v1.0
 * FileSize=7384 Header=260 CRC=1472851907
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.AccountingServices.EEProvider.Entities
{
    /// <summary>
    /// Definición de entidad GetCheckDeposit.
    /// </summary>
    [
    PersistentClass("Sistran.Core.AccountingService.GetCheckDeposit.dict"),
    Serializable(),
    DescriptionKey("GET_CHECK_DEPOSIT_ENTITY"),
    TableMap(TableName="GET_CHECK_DEPOSIT", Schema="BILL"),
    ]
    public partial class GetCheckDeposit :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string DocumentNumber = "DocumentNumber";
			public static readonly string DatePayment = "DatePayment";
			public static readonly string Amount = "Amount";
			public static readonly string BankCode = "BankCode";
			public static readonly string Description = "Description";
			public static readonly string Depsosited = "Depsosited";
		}

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="bankCode">Propiedad clave BankCode.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>(int bankCode)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.BankCode, bankCode);

		    return new PrimaryKey<T>(keys);
	    }

		/// <summary>
		/// Crea una clave primaria para esta clase.
		/// </summary>
		/// <param name="bankCode">Propiedad clave BankCode.</param>
		public static PrimaryKey CreatePrimaryKey(int bankCode)
	    {
			return InternalCreatePrimaryKey<GetCheckDeposit>(bankCode);
		}
#endregion

	    //*** Object Attributes ********************************

		/// <summary>
		/// Atributo para la propiedad DocumentNumber.
		/// </summary>
        private string _documentNumber = null;
		/// <summary>
		/// Atributo para la propiedad DatePayment.
		/// </summary>
        private DateTime? _datePayment = null;
		/// <summary>
		/// Atributo para la propiedad Amount.
		/// </summary>
        private decimal? _amount = null;
		/// <summary>
		/// Atributo para la propiedad Description.
		/// </summary>
        private string _description = null;
		/// <summary>
		/// Atributo para la propiedad Depsosited.
		/// </summary>
        private string _depsosited = null;
	    //*** Object Constructors ********************************

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="bankCode">BankCode key property.</param>
	    public GetCheckDeposit(int bankCode):
			this(GetCheckDeposit.CreatePrimaryKey(bankCode), null)
	    {
	    }

		/// <summary>
		/// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
		/// </summary>
		/// <param name="key">
		/// Identificador de la instancia de la entidad.
		/// </param>
		/// <param name="initialValues">
		/// Valores para establecer el estado de la instancia.
		/// </param>
	    public GetCheckDeposit(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad DocumentNumber.
		/// </summary>
		/// <value>Propiedad DocumentNumber.</value>
	    [
		DescriptionKey("DOCUMENT_NUMBER_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="DOCUMENT_NUMBER", DbType=System.Data.DbType.String),
	    ]
        public string DocumentNumber
	    {
		    get
		    {
			    return this._documentNumber;
		    }
		    set
		    {
				this._documentNumber = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad DatePayment.
		/// </summary>
		/// <value>Propiedad DatePayment.</value>
	    [
		DescriptionKey("DATE_PAYMENT_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="DATE_PAYMENT", DbType=System.Data.DbType.String),
	    ]
        public DateTime? DatePayment
	    {
		    get
		    {
			    return this._datePayment;
		    }
		    set
		    {
				this._datePayment = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Amount.
		/// </summary>
		/// <value>Propiedad Amount.</value>
	    [
		DescriptionKey("AMOUNT_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="AMOUNT", DbType=System.Data.DbType.Decimal),
	    ]
        public decimal? Amount
	    {
		    get
		    {
			    return this._amount;
		    }
		    set
		    {
				this._amount = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad BankCode.
		/// </summary>
		/// <value>Propiedad BankCode.</value>
	    [
		DescriptionKey("BANK_CODE_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="BANK_CD", DbType=System.Data.DbType.String),
	    ]
        public int BankCode
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.BankCode];
		    }
		    set
		    {
				this._primaryKey[Properties.BankCode] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Description.
		/// </summary>
		/// <value>Propiedad Description.</value>
	    [
		DescriptionKey("DESCRIPTION_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="DESCRIPTION", DbType=System.Data.DbType.String),
	    ]
        public string Description
	    {
		    get
		    {
			    return this._description;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.Description);
				}
				this._description = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Depsosited.
		/// </summary>
		/// <value>Propiedad Depsosited.</value>
	    [
		DescriptionKey("DEPSOSITED_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="DEPSOSITED", DbType=System.Data.DbType.String),
	    ]
        public string Depsosited
	    {
		    get
		    {
			    return this._depsosited;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.Depsosited);
				}
				this._depsosited = value;
			}
	    }


    }
}