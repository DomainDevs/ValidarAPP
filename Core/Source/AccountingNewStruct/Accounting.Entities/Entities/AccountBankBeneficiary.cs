/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.AccountingServices.GetAccountBankBeneficiary.dict v1.0
 * FileSize=10887 Header=271 CRC=3872370309
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.Accounting.Entities
{
    /// <summary>
    /// Definición de entidad AccountBankBeneficiary.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Accounting.AccountBankBeneficiary.dict"),
    Serializable(),
    DescriptionKey("GET_ACCOUNT_BANK_BENEFICIARY_ENTITY"),
    TableMap(TableName = "GET_ACCOUNT_BANK_BENEFICIARY", Schema = "ACC"),
    ]
    public partial class AccountBankBeneficiary :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string AccountBankCode = "AccountBankCode";
			public static readonly string BankCode = "BankCode";
			public static readonly string BankName = "BankName";
			public static readonly string AccountNumber = "AccountNumber";
			public static readonly string AccountTypeCode = "AccountTypeCode";
			public static readonly string AccountTypeName = "AccountTypeName";
			public static readonly string CurrencyCode = "CurrencyCode";
			public static readonly string CurrencyName = "CurrencyName";
			public static readonly string Enabled = "Enabled";
			public static readonly string IndividualId = "IndividualId";
			public static readonly string TinyDescription = "TinyDescription";
		}

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="accountBankCode">Propiedad clave AccountBankCode.</param>
		/// <param name="individualId">Propiedad clave IndividualId.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>(int accountBankCode, int individualId)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.AccountBankCode, accountBankCode);
		    keys.Add(Properties.IndividualId, individualId);

		    return new PrimaryKey<T>(keys);
	    }

		/// <summary>
		/// Crea una clave primaria para esta clase.
		/// </summary>
		/// <param name="accountBankCode">Propiedad clave AccountBankCode.</param>
		/// <param name="individualId">Propiedad clave IndividualId.</param>
		public static PrimaryKey CreatePrimaryKey(int accountBankCode, int individualId)
	    {
			return InternalCreatePrimaryKey<AccountBankBeneficiary>(accountBankCode, individualId);
		}
#endregion

	    //*** Object Attributes ********************************

		/// <summary>
		/// Atributo para la propiedad BankCode.
		/// </summary>
        private int? _bankCode = null;
		/// <summary>
		/// Atributo para la propiedad BankName.
		/// </summary>
        private string _bankName = null;
		/// <summary>
		/// Atributo para la propiedad AccountNumber.
		/// </summary>
        private string _accountNumber = null;
		/// <summary>
		/// Atributo para la propiedad AccountTypeCode.
		/// </summary>
        private int? _accountTypeCode = null;
		/// <summary>
		/// Atributo para la propiedad AccountTypeName.
		/// </summary>
        private string _accountTypeName = null;
		/// <summary>
		/// Atributo para la propiedad CurrencyCode.
		/// </summary>
        private int? _currencyCode = null;
		/// <summary>
		/// Atributo para la propiedad CurrencyName.
		/// </summary>
        private string _currencyName = null;
		/// <summary>
		/// Atributo para la propiedad Enabled.
		/// </summary>
        private bool? _enabled = null;
		/// <summary>
		/// Atributo para la propiedad TinyDescription.
		/// </summary>
        private string _tinyDescription = null;
	    //*** Object Constructors ********************************

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="accountBankCode">AccountBankCode key property.</param>
		/// <param name="individualId">IndividualId key property.</param>
	    public AccountBankBeneficiary(int accountBankCode, int individualId):
			this(AccountBankBeneficiary.CreatePrimaryKey(accountBankCode, individualId), null)
	    {
	    }

		/// <summary>
		/// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
		/// </summary>
		/// <param name="key">
		/// Identificador de la instancia de la entidad.
		/// </param>
		/// <param name="initialValues">
		/// Valores para establecer el estado de la instancia.
		/// </param>
	    public AccountBankBeneficiary(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad AccountBankCode.
		/// </summary>
		/// <value>Propiedad AccountBankCode.</value>
	    [
		DescriptionKey("ACCOUNT_BANK_CODE_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="ACCOUNT_BANK_CD", DbType=System.Data.DbType.String),
	    ]
        public int AccountBankCode
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.AccountBankCode];
		    }
		    set
		    {
				this._primaryKey[Properties.AccountBankCode] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad BankCode.
		/// </summary>
		/// <value>Propiedad BankCode.</value>
	    [
		DescriptionKey("BANK_CODE_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="BANK_CD", DbType=System.Data.DbType.String),
	    ]
        public int? BankCode
	    {
		    get
		    {
			    return this._bankCode;
		    }
		    set
		    {
				this._bankCode = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad BankName.
		/// </summary>
		/// <value>Propiedad BankName.</value>
	    [
		DescriptionKey("BANK_NAME_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="BANK_NAME", DbType=System.Data.DbType.String),
	    ]
        public string BankName
	    {
		    get
		    {
			    return this._bankName;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.BankName);
				}
				this._bankName = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad AccountNumber.
		/// </summary>
		/// <value>Propiedad AccountNumber.</value>
	    [
		DescriptionKey("ACCOUNT_NUMBER_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="ACCOUNT_NUMBER", DbType=System.Data.DbType.String),
	    ]
        public string AccountNumber
	    {
		    get
		    {
			    return this._accountNumber;
		    }
		    set
		    {
				this._accountNumber = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad AccountTypeCode.
		/// </summary>
		/// <value>Propiedad AccountTypeCode.</value>
	    [
		DescriptionKey("ACCOUNT_TYPE_CODE_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="ACCOUNT_TYPE_CD", DbType=System.Data.DbType.String),
	    ]
        public int? AccountTypeCode
	    {
		    get
		    {
			    return this._accountTypeCode;
		    }
		    set
		    {
				this._accountTypeCode = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad AccountTypeName.
		/// </summary>
		/// <value>Propiedad AccountTypeName.</value>
	    [
		DescriptionKey("ACCOUNT_TYPE_NAME_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="ACCOUNT_TYPE_NAME", DbType=System.Data.DbType.String),
	    ]
        public string AccountTypeName
	    {
		    get
		    {
			    return this._accountTypeName;
		    }
		    set
		    {
				this._accountTypeName = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad CurrencyCode.
		/// </summary>
		/// <value>Propiedad CurrencyCode.</value>
	    [
		DescriptionKey("CURRENCY_CODE_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="CURRENCY_CD", DbType=System.Data.DbType.String),
	    ]
        public int? CurrencyCode
	    {
		    get
		    {
			    return this._currencyCode;
		    }
		    set
		    {
				this._currencyCode = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad CurrencyName.
		/// </summary>
		/// <value>Propiedad CurrencyName.</value>
	    [
		DescriptionKey("CURRENCY_NAME_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="CURRENCY_NAME", DbType=System.Data.DbType.String),
	    ]
        public string CurrencyName
	    {
		    get
		    {
			    return this._currencyName;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.CurrencyName);
				}
				this._currencyName = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Enabled.
		/// </summary>
		/// <value>Propiedad Enabled.</value>
	    [
		DescriptionKey("ENABLED_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="ENABLED", DbType=System.Data.DbType.String),
	    ]
        public bool? Enabled
	    {
		    get
		    {
			    return this._enabled;
		    }
		    set
		    {
				this._enabled = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad IndividualId.
		/// </summary>
		/// <value>Propiedad IndividualId.</value>
	    [
		DescriptionKey("INDIVIDUAL_ID_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="INDIVIDUAL_ID", DbType=System.Data.DbType.String),
	    ]
        public int IndividualId
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.IndividualId];
		    }
		    set
		    {
				this._primaryKey[Properties.IndividualId] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad TinyDescription.
		/// </summary>
		/// <value>Propiedad TinyDescription.</value>
	    [
		DescriptionKey("TINY_DESCRIPTION_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="TINY_DESCRIPTION", DbType=System.Data.DbType.String),
	    ]
        public string TinyDescription
	    {
		    get
		    {
			    return this._tinyDescription;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.TinyDescription);
				}
				this._tinyDescription = value;
			}
	    }

    }
}