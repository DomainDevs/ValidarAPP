/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.AccountingServices.GetBallotsNotDeposited.dict v1.0
 * FileSize=11957 Header=268 CRC=3332243306
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.Accounting.Entities
{
    /// <summary>
    /// Definición de entidad PaymentTicketNotDeposited View.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Accounting.PaymentTicketNotDeposited.dict"),
    Serializable(),
    DescriptionKey("GET_BALLOTS_NOT_DEPOSITED_ENTITY"),
    TableMap(TableName = "GET_BALLOTS_NOT_DEPOSITED", Schema = "ACC"),
    ]
    public partial class PaymentTicketNotDeposited :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string PaymentTicketCode = "PaymentTicketCode";
			public static readonly string BankCode = "BankCode";
			public static readonly string BankName = "BankName";
			public static readonly string AccountNumber = "AccountNumber";
			public static readonly string CurrencyCode = "CurrencyCode";
			public static readonly string CurrencyName = "CurrencyName";
			public static readonly string CashAmount = "CashAmount";
			public static readonly string CheckAmount = "CheckAmount";
			public static readonly string PaymentMethodTypeCode = "PaymentMethodTypeCode";
			public static readonly string Status = "Status";
			public static readonly string RegisterDate = "RegisterDate";
			public static readonly string BranchCode = "BranchCode";
			public static readonly string BranchName = "BranchName";
		}

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="paymentTicketCode">Propiedad clave PaymentTicketCode.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>(int paymentTicketCode)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.PaymentTicketCode, paymentTicketCode);

		    return new PrimaryKey<T>(keys);
	    }

		/// <summary>
		/// Crea una clave primaria para esta clase.
		/// </summary>
		/// <param name="paymentTicketCode">Propiedad clave PaymentTicketCode.</param>
		public static PrimaryKey CreatePrimaryKey(int paymentTicketCode)
	    {
			return InternalCreatePrimaryKey<PaymentTicketNotDeposited>(paymentTicketCode);
		}
#endregion

	    //*** Object Attributes ********************************

		/// <summary>
		/// Atributo para la propiedad BankCode.
		/// </summary>
        private int? _bankCode = null;
		/// <summary>
		/// Atributo para la propiedad BankName.
		/// </summary>
        private string _bankName = null;
		/// <summary>
		/// Atributo para la propiedad AccountNumber.
		/// </summary>
        private string _accountNumber = null;
		/// <summary>
		/// Atributo para la propiedad CurrencyCode.
		/// </summary>
        private int? _currencyCode = null;
		/// <summary>
		/// Atributo para la propiedad CurrencyName.
		/// </summary>
        private string _currencyName = null;
		/// <summary>
		/// Atributo para la propiedad CashAmount.
		/// </summary>
        private decimal? _cashAmount = null;
		/// <summary>
		/// Atributo para la propiedad CheckAmount.
		/// </summary>
        private decimal? _checkAmount = null;
		/// <summary>
		/// Atributo para la propiedad PaymentMethodTypeCode.
		/// </summary>
        private int? _paymentMethodTypeCode = null;
		/// <summary>
		/// Atributo para la propiedad Status.
		/// </summary>
        private int? _status = null;
		/// <summary>
		/// Atributo para la propiedad RegisterDate.
		/// </summary>
        private DateTime? _registerDate = null;
		/// <summary>
		/// Atributo para la propiedad BranchCode.
		/// </summary>
        private int? _branchCode = null;
		/// <summary>
		/// Atributo para la propiedad BranchName.
		/// </summary>
        private string _branchName = null;
	    //*** Object Constructors ********************************

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="paymentTicketCode">PaymentTicketCode key property.</param>
	    public PaymentTicketNotDeposited(int paymentTicketCode):
			this(PaymentTicketNotDeposited.CreatePrimaryKey(paymentTicketCode), null)
	    {
	    }

		/// <summary>
		/// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
		/// </summary>
		/// <param name="key">
		/// Identificador de la instancia de la entidad.
		/// </param>
		/// <param name="initialValues">
		/// Valores para establecer el estado de la instancia.
		/// </param>
	    public PaymentTicketNotDeposited(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad PaymentTicketCode.
		/// </summary>
		/// <value>Propiedad PaymentTicketCode.</value>
	    [
		DescriptionKey("PAYMENT_TICKET_CODE_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="PAYMENT_TICKET_CD", DbType=System.Data.DbType.String),
	    ]
        public int PaymentTicketCode
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.PaymentTicketCode];
		    }
		    set
		    {
				this._primaryKey[Properties.PaymentTicketCode] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad BankCode.
		/// </summary>
		/// <value>Propiedad BankCode.</value>
	    [
		DescriptionKey("BANK_CODE_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="BANK_CD", DbType=System.Data.DbType.String),
	    ]
        public int? BankCode
	    {
		    get
		    {
			    return this._bankCode;
		    }
		    set
		    {
				this._bankCode = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad BankName.
		/// </summary>
		/// <value>Propiedad BankName.</value>
	    [
		DescriptionKey("BANK_NAME_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="BANK_NAME", DbType=System.Data.DbType.String),
	    ]
        public string BankName
	    {
		    get
		    {
			    return this._bankName;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.BankName);
				}
				this._bankName = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad AccountNumber.
		/// </summary>
		/// <value>Propiedad AccountNumber.</value>
	    [
		DescriptionKey("ACCOUNT_NUMBER_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="ACCOUNT_NUMBER", DbType=System.Data.DbType.String),
	    ]
        public string AccountNumber
	    {
		    get
		    {
			    return this._accountNumber;
		    }
		    set
		    {
				this._accountNumber = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad CurrencyCode.
		/// </summary>
		/// <value>Propiedad CurrencyCode.</value>
	    [
		DescriptionKey("CURRENCY_CODE_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="CURRENCY_CD", DbType=System.Data.DbType.String),
	    ]
        public int? CurrencyCode
	    {
		    get
		    {
			    return this._currencyCode;
		    }
		    set
		    {
				this._currencyCode = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad CurrencyName.
		/// </summary>
		/// <value>Propiedad CurrencyName.</value>
	    [
		DescriptionKey("CURRENCY_NAME_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="CURRENCY_NAME", DbType=System.Data.DbType.String),
	    ]
        public string CurrencyName
	    {
		    get
		    {
			    return this._currencyName;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.CurrencyName);
				}
				this._currencyName = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad CashAmount.
		/// </summary>
		/// <value>Propiedad CashAmount.</value>
	    [
		DescriptionKey("CASH_AMOUNT_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="CASH_AMOUNT", DbType=System.Data.DbType.Decimal),
	    ]
        public decimal? CashAmount
	    {
		    get
		    {
			    return this._cashAmount;
		    }
		    set
		    {
				this._cashAmount = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad CheckAmount.
		/// </summary>
		/// <value>Propiedad CheckAmount.</value>
	    [
		DescriptionKey("CHECK_AMOUNT_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="CHECK_AMOUNT", DbType=System.Data.DbType.Decimal),
	    ]
        public decimal? CheckAmount
	    {
		    get
		    {
			    return this._checkAmount;
		    }
		    set
		    {
				this._checkAmount = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad PaymentMethodTypeCode.
		/// </summary>
		/// <value>Propiedad PaymentMethodTypeCode.</value>
	    [
		DescriptionKey("PAYMENT_METHOD_TYPE_CODE_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="PAYMENT_METHOD_TYPE_CD", DbType=System.Data.DbType.String),
	    ]
        public int? PaymentMethodTypeCode
	    {
		    get
		    {
			    return this._paymentMethodTypeCode;
		    }
		    set
		    {
				this._paymentMethodTypeCode = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Status.
		/// </summary>
		/// <value>Propiedad Status.</value>
	    [
		DescriptionKey("STATUS_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="STATUS", DbType=System.Data.DbType.String),
	    ]
        public int? Status
	    {
		    get
		    {
			    return this._status;
		    }
		    set
		    {
				this._status = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad RegisterDate.
		/// </summary>
		/// <value>Propiedad RegisterDate.</value>
	    [
		DescriptionKey("REGISTER_DATE_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="REGISTER_DATE", DbType=System.Data.DbType.String),
	    ]
        public DateTime? RegisterDate
	    {
		    get
		    {
			    return this._registerDate;
		    }
		    set
		    {
				this._registerDate = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad BranchCode.
		/// </summary>
		/// <value>Propiedad BranchCode.</value>
	    [
		DescriptionKey("BRANCH_CODE_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="BRANCH_CD", DbType=System.Data.DbType.String),
	    ]
        public int? BranchCode
	    {
		    get
		    {
			    return this._branchCode;
		    }
		    set
		    {
				this._branchCode = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad BranchName.
		/// </summary>
		/// <value>Propiedad BranchName.</value>
	    [
		DescriptionKey("BRANCH_NAME_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="BRANCH_NAME", DbType=System.Data.DbType.String),
	    ]
        public string BranchName
	    {
		    get
		    {
			    return this._branchName;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.BranchName);
				}
				this._branchName = value;
			}
	    }

    }
}