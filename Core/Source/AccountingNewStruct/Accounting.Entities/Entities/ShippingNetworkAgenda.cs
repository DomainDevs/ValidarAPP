/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Accounting.ShippingNetworkAgenda.dict v1.0
 * FileSize=5916 Header=269 CRC=574354389
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.Accounting.Entities
{
    /// <summary>
    /// Definición de entidad ShippingNetworkAgenda.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Accounting.ShippingNetworkAgenda.dict"),
    Serializable(),
    DescriptionKey("SHIPPING_NETWORK_AGENDA_ENTITY"),
    TableMap(TableName="SHIPPING_NETWORK_AGENDA", Schema="ACC"),
    ]
    public partial class ShippingNetworkAgenda :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string BranchCode = "BranchCode";
			public static readonly string PrefixCode = "PrefixCode";
			public static readonly string PolicyId = "PolicyId";
			public static readonly string ShippingDay = "ShippingDay";
		}

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="branchCode">Propiedad clave BranchCode.</param>
		/// <param name="prefixCode">Propiedad clave PrefixCode.</param>
		/// <param name="policyId">Propiedad clave PolicyId.</param>
		/// <param name="shippingDay">Propiedad clave ShippingDay.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>(int branchCode, int prefixCode, int policyId, int shippingDay)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.BranchCode, branchCode);
		    keys.Add(Properties.PrefixCode, prefixCode);
		    keys.Add(Properties.PolicyId, policyId);
		    keys.Add(Properties.ShippingDay, shippingDay);

		    return new PrimaryKey<T>(keys);
	    }

		/// <summary>
		/// Crea una clave primaria para esta clase.
		/// </summary>
		/// <param name="branchCode">Propiedad clave BranchCode.</param>
		/// <param name="prefixCode">Propiedad clave PrefixCode.</param>
		/// <param name="policyId">Propiedad clave PolicyId.</param>
		/// <param name="shippingDay">Propiedad clave ShippingDay.</param>
		public static PrimaryKey CreatePrimaryKey(int branchCode, int prefixCode, int policyId, int shippingDay)
	    {
			return InternalCreatePrimaryKey<ShippingNetworkAgenda>(branchCode, prefixCode, policyId, shippingDay);
		}
#endregion

	    //*** Object Attributes ********************************

	    //*** Object Constructors ********************************

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="branchCode">BranchCode key property.</param>
		/// <param name="prefixCode">PrefixCode key property.</param>
		/// <param name="policyId">PolicyId key property.</param>
		/// <param name="shippingDay">ShippingDay key property.</param>
	    public ShippingNetworkAgenda(int branchCode, int prefixCode, int policyId, int shippingDay):
			this(ShippingNetworkAgenda.CreatePrimaryKey(branchCode, prefixCode, policyId, shippingDay), null)
	    {
	    }

		/// <summary>
		/// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
		/// </summary>
		/// <param name="key">
		/// Identificador de la instancia de la entidad.
		/// </param>
		/// <param name="initialValues">
		/// Valores para establecer el estado de la instancia.
		/// </param>
	    public ShippingNetworkAgenda(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad BranchCode.
		/// </summary>
		/// <value>Propiedad BranchCode.</value>
	    [
		DescriptionKey("BRANCH_CODE_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="BRANCH_CD", DbType=System.Data.DbType.String),
	    ]
        public int BranchCode
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.BranchCode];
		    }
		    set
		    {
				this._primaryKey[Properties.BranchCode] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad PrefixCode.
		/// </summary>
		/// <value>Propiedad PrefixCode.</value>
	    [
		DescriptionKey("PREFIX_CODE_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="PREFIX_CD", DbType=System.Data.DbType.String),
	    ]
        public int PrefixCode
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.PrefixCode];
		    }
		    set
		    {
				this._primaryKey[Properties.PrefixCode] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad PolicyId.
		/// </summary>
		/// <value>Propiedad PolicyId.</value>
	    [
		DescriptionKey("POLICY_ID_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="POLICY_ID", DbType=System.Data.DbType.String),
	    ]
        public int PolicyId
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.PolicyId];
		    }
		    set
		    {
				this._primaryKey[Properties.PolicyId] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad ShippingDay.
		/// </summary>
		/// <value>Propiedad ShippingDay.</value>
	    [
		DescriptionKey("SHIPPING_DAY_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="SHIPPING_DAY", DbType=System.Data.DbType.String),
	    ]
        public int ShippingDay
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.ShippingDay];
		    }
		    set
		    {
				this._primaryKey[Properties.ShippingDay] = value;
			}
	    }

    }
}