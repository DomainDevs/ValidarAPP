/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.MassiveUnderwritingService3GProvider.MassiveCollective.dict v1.0
 * FileSize=6478 Header=284 CRC=3715357387
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.CollectiveServices.EEProvider.Entities
{
    /// <summary>
    /// Definición de entidad MassiveCollective.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.CollectiveServices.EEProvider.Collective.dict"),
    Serializable(),
    DescriptionKey("MASSIVE_COLLECTIVE_ENTITY")
    ]
    public class MassiveCollective :
        BusinessObject
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string IdConsecutive = "IdConsecutive";
            public static readonly string TempId = "TempId";
            public static readonly string FieldSetId = "FieldSetId";
            public static readonly string EndorsementType = "EndorsementType";
            public static readonly string StateId = "StateId";
            public static readonly string IsLocked = "IsLocked";
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="idConsecutive">IdConsecutive key property.</param>
        public MassiveCollective() :
            this(MassiveCollective.CreatePrimaryKey(), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public MassiveCollective(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.IdConsecutive, null);

            return new PrimaryKey<T>(keys);
        }


        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<MassiveCollective>();
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad TempId.
        /// </summary>
        private int _tempId;
        /// <summary>
        /// Atributo para la propiedad FieldSetId.
        /// </summary>
        private int _fieldSetId;
        /// <summary>
        /// Atributo para la propiedad EndorsementType.
        /// </summary>
        private int _endorsementType;
        /// <summary>
        /// Atributo para la propiedad StateId.
        /// </summary>
        private int _stateId;
        /// <summary>
        /// Atributo para la propiedad IsLocked.
        /// </summary>
        private bool? _isLocked = null;
        //*** Object Constructors ********************************




        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad IdConsecutive.
        /// </summary>
        /// <value>Propiedad IdConsecutive.</value>
        [
        DescriptionKey("ID_CONSECUTIVE_PROPERTY"),
        PersistentProperty(IsKey = true, IsAutomatic = true),
        ColumnMap(ColumnName = "ID_CONSECUTIVE", DbType = System.Data.DbType.String),
        ]
        public int IdConsecutive
        {
            get
            {
                if (_primaryKey[Properties.IdConsecutive] == null)
                {
                    _primaryKey[Properties.IdConsecutive] = 0;
                }

                return (int)_primaryKey[Properties.IdConsecutive];

            }
            set
            {
                this._primaryKey[Properties.IdConsecutive] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad TempId.
        /// </summary>
        /// <value>Propiedad TempId.</value>
        [
        DescriptionKey("TEMP_ID_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "TEMP_ID", DbType = System.Data.DbType.String),
        ]
        public int TempId
        {
            get
            {
                return this._tempId;
            }
            set
            {
                this._tempId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad FieldSetId.
        /// </summary>
        /// <value>Propiedad FieldSetId.</value>
        [
        DescriptionKey("FIELD_SET_ID_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "FIELD_SET_ID", DbType = System.Data.DbType.String),
        ]
        public int FieldSetId
        {
            get
            {
                return this._fieldSetId;
            }
            set
            {
                this._fieldSetId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad EndorsementType.
        /// </summary>
        /// <value>Propiedad EndorsementType.</value>
        [
        DescriptionKey("ENDORSEMENT_TYPE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "ENDORSEMENT_TYPE", DbType = System.Data.DbType.String),
        ]
        public int EndorsementType
        {
            get
            {
                return this._endorsementType;
            }
            set
            {
                this._endorsementType = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad StateId.
        /// </summary>
        /// <value>Propiedad StateId.</value>
        [
        DescriptionKey("STATE_ID_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "STATE_ID", DbType = System.Data.DbType.String),
        ]
        public int StateId
        {
            get
            {
                return this._stateId;
            }
            set
            {
                this._stateId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IsLocked.
        /// </summary>
        /// <value>Propiedad IsLocked.</value>
        [
        DescriptionKey("IS_LOCKED_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "IS_LOCKED", DbType = System.Data.DbType.String),
        ]
        public bool? IsLocked
        {
            get
            {
                return this._isLocked;
            }
            set
            {
                this._isLocked = value;
            }
        }

    }
}