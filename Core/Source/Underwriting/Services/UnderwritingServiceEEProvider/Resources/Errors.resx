<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="aaa" xml:space="preserve">
    <value />
  </data>
  <data name="AgentPreviousCommissNotFound" xml:space="preserve">
    <value>The information about the previous commission of agency {0} not found</value>
  </data>
  <data name="CoverageNotFound" xml:space="preserve">
    <value>CoverageNotFound</value>
  </data>
  <data name="EmissionEndorsementNotFound" xml:space="preserve">
    <value>Emission endorsement not found</value>
  </data>
  <data name="ErrorCreatePrefixByLineBusiness" xml:space="preserve">
    <value>Create Prefix By LineBusiness</value>
  </data>
  <data name="ErrorCreateTaxParametrization" xml:space="preserve">
    <value>Error creating tax parametrization</value>
  </data>
  <data name="ErrorEndorsementNotFound" xml:space="preserve">
    <value>Error Endorsement Not Found</value>
  </data>
  <data name="ErrorGetAssetType" xml:space="preserve">
    <value>Error Get Asset Type</value>
  </data>
  <data name="ErrorGetClaimsPoliciesByPolicies" xml:space="preserve">
    <value>Error Get Claims Policies By Policies</value>
  </data>
  <data name="ErrorGetCoInsurance" xml:space="preserve">
    <value>Error Getting CoInsurance</value>
  </data>
  <data name="ErrorGetContractCategories" xml:space="preserve">
    <value>Error Get Contract Categories</value>
  </data>
  <data name="ErrorGetContractType" xml:space="preserve">
    <value>Error Get Contract Type</value>
  </data>
  <data name="ErrorGetCoverages" xml:space="preserve">
    <value>Error Get Coverages</value>
  </data>
  <data name="ErrorGetCoveragesByRiskId" xml:space="preserve">
    <value>Error Get Coverages By Risk</value>
  </data>
  <data name="ErrorGetDeductibles" xml:space="preserve">
    <value>Error getting deductibles</value>
  </data>
  <data name="ErrorGetIssuanceAgencyByUserId" xml:space="preserve">
    <value>Error getting agency by user Id</value>
  </data>
  <data name="ErrorGetListOfTypesOfHouses" xml:space="preserve">
    <value>Error Get List  Of Types Of Houses</value>
  </data>
  <data name="ErrorGetListTariffZonesByPrefix" xml:space="preserve">
    <value>Error Get List Tariff Zones By Commercial Branch</value>
  </data>
  <data name="ErrorGetNotificationAddressesByIndividualId" xml:space="preserve">
    <value>Error Get Notification Addresses By Individual Id</value>
  </data>
  <data name="ErrorGetRatingZone" xml:space="preserve">
    <value>Error Get Rating Zone</value>
  </data>
  <data name="ErrorGetRiskByLocation" xml:space="preserve">
    <value>Error Get Risk By Location</value>
  </data>
  <data name="ErrorGetRiskByVehicle" xml:space="preserve">
    <value>Error Get Risk By Vehicle</value>
  </data>
  <data name="ErrorGetRisks" xml:space="preserve">
    <value>Error Getting Risks</value>
  </data>
  <data name="ErrorGetRiskType" xml:space="preserve">
    <value>Error Get Risk Type</value>
  </data>
  <data name="ErrorGetTariffZone" xml:space="preserve">
    <value>Error Get Tariff Zone</value>
  </data>
  <data name="ErrorGetTypesOfEndososEnabledByBranch" xml:space="preserve">
    <value>Error Get Types Of Endosos Enabled By Branch</value>
  </data>
  <data name="ErrorHolderWithoutAddress" xml:space="preserve">
    <value>Error Holder Without Address</value>
  </data>
  <data name="ErrorNotExistPaymentPlan" xml:space="preserve">
    <value>Error Not Exist PaymentPlan by default</value>
  </data>
  <data name="ErrorPayerComponents" xml:space="preserve">
    <value>Error Payer Components</value>
  </data>
  <data name="ErrorRiskNotFound" xml:space="preserve">
    <value>Error Risk Not Found</value>
  </data>
  <data name="Excluded" xml:space="preserve">
    <value>Excluido</value>
  </data>
  <data name="Included" xml:space="preserve">
    <value>Incluido</value>
  </data>
  <data name="Modified" xml:space="preserve">
    <value>Modificado</value>
  </data>
  <data name="NotModified" xml:space="preserve">
    <value>No modificado</value>
  </data>
  <data name="Original" xml:space="preserve">
    <value>Original</value>
  </data>
  <data name="RiskNotFound" xml:space="preserve">
    <value>RISK NOT FOUND</value>
  </data>
  <data name="TemporaryEventsAuthorized" xml:space="preserve">
    <value>Temporary events were authorized</value>
  </data>
  <data name="ErrorPaymentPlanEmpty" xml:space="preserve">
    <value>ErrorPaymentPlanEmpty</value>
  </data>
  <data name="ErrorPorcentageQuotas" xml:space="preserve">
    <value>Error Porcentage Quotas{0}</value>
  </data>
  <data name="ErrorDristributionQuotas" xml:space="preserve">
    <value>Error Dristribution Quotas {0}</value>
  </data>
  <data name="Minimum" xml:space="preserve">
    <value>Minimum</value>
  </data>
</root>