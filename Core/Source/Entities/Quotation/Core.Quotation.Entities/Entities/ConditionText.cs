/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Quotation.ConditionText.dict v1.0
 * FileSize=5492 Header=253 CRC=4255809335
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.Quotation.Entities
{
    /// <summary>
    /// Definición de entidad ConditionText.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Quotation.ConditionText.dict"),
    Serializable(),
    DescriptionKey("CONDITION_TEXT_ENTITY"),
    TableMap(TableName = "CONDITION_TEXT", Schema = "QUO"),
    ]
    public partial class ConditionText :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string ConditionTextId = "ConditionTextId";
            public static readonly string TextTitle = "TextTitle";
            public static readonly string TextBody = "TextBody";
            public static readonly string ConditionLevelCode = "ConditionLevelCode";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.ConditionTextId, null);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="conditionTextId">Propiedad clave ConditionTextId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int conditionTextId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.ConditionTextId, conditionTextId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<ConditionText>();
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="conditionTextId">Propiedad clave ConditionTextId.</param>
        public static PrimaryKey CreatePrimaryKey(int conditionTextId)
        {
            return InternalCreatePrimaryKey<ConditionText>(conditionTextId);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad TextTitle.
        /// </summary>
        private string _textTitle = null;
        /// <summary>
        /// Atributo para la propiedad TextBody.
        /// </summary>
        private string _textBody = null;
        /// <summary>
        /// Atributo para la propiedad ConditionLevelCode.
        /// </summary>
        private int _conditionLevelCode;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        public ConditionText() :
            this(ConditionText.CreatePrimaryKey(), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="conditionTextId">ConditionTextId key property.</param>
        public ConditionText(int conditionTextId) :
            this(ConditionText.CreatePrimaryKey(conditionTextId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public ConditionText(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad ConditionTextId.
        /// </summary>
        /// <value>Propiedad ConditionTextId.</value>
        [
        DescriptionKey("CONDITION_TEXT_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "CONDITION_TEXT_ID", DbType = System.Data.DbType.String),
        ]
        public int ConditionTextId
        {
            get
            {
                return (int)this._primaryKey[Properties.ConditionTextId];
            }
            set
            {
                this._primaryKey[Properties.ConditionTextId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad TextTitle.
        /// </summary>
        /// <value>Propiedad TextTitle.</value>
        [
        DescriptionKey("TEXT_TITLE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "TEXT_TITLE", DbType = System.Data.DbType.String),
        ]
        public string TextTitle
        {
            get
            {
                return this._textTitle;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.TextTitle);
                }
                this._textTitle = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad TextBody.
        /// </summary>
        /// <value>Propiedad TextBody.</value>
        [
        DescriptionKey("TEXT_BODY_PROPERTY"),
        PersistentProperty(),
        //ColumnMap(ColumnName = "TEXT_BODY", DbType = System.Data.DbType.Binary),
        ColumnMap(ColumnName = "TEXT_BODY", DbType = System.Data.DbType.String),
        ]
        public string TextBody
        {
            get
            {
                return this._textBody;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.TextBody);
                }
                this._textBody = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ConditionLevelCode.
        /// </summary>
        /// <value>Propiedad ConditionLevelCode.</value>
        [
        DescriptionKey("CONDITION_LEVEL_CODE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "CONDITION_LEVEL_CD", DbType = System.Data.DbType.String),
        ]
        public int ConditionLevelCode
        {
            get
            {
                return this._conditionLevelCode;
            }
            set
            {
                this._conditionLevelCode = value;
            }
        }

    }
}