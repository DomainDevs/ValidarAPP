/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Quotation.CondTextLevel.dict v1.0
 * FileSize=5320 Header=253 CRC=3890993279
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.Quotation.Entities
{
    /// <summary>
    /// Definición de entidad CondTextLevel.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Quotation.CondTextLevel.dict"),
    Serializable(),
    DescriptionKey("COND_TEXT_LEVEL_ENTITY"),
    TableMap(TableName = "COND_TEXT_LEVEL", Schema = "QUO"),
    ]
    public partial class CondTextLevel :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string CondTextLevelId = "CondTextLevelId";
            public static readonly string ConditionTextId = "ConditionTextId";
            public static readonly string ConditionLevelId = "ConditionLevelId";
            public static readonly string IsAutomatic = "IsAutomatic";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.CondTextLevelId, null);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="condTextLevelId">Propiedad clave CondTextLevelId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int condTextLevelId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.CondTextLevelId, condTextLevelId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<CondTextLevel>();
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="condTextLevelId">Propiedad clave CondTextLevelId.</param>
        public static PrimaryKey CreatePrimaryKey(int condTextLevelId)
        {
            return InternalCreatePrimaryKey<CondTextLevel>(condTextLevelId);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad ConditionTextId.
        /// </summary>
        private int _conditionTextId;
        /// <summary>
        /// Atributo para la propiedad ConditionLevelId.
        /// </summary>
        private int? _conditionLevelId = null;
        /// <summary>
        /// Atributo para la propiedad IsAutomatic.
        /// </summary>
        private bool _isAutomatic;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        public CondTextLevel() :
            this(CondTextLevel.CreatePrimaryKey(), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="condTextLevelId">CondTextLevelId key property.</param>
        public CondTextLevel(int condTextLevelId) :
            this(CondTextLevel.CreatePrimaryKey(condTextLevelId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public CondTextLevel(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad CondTextLevelId.
        /// </summary>
        /// <value>Propiedad CondTextLevelId.</value>
        [
        DescriptionKey("COND_TEXT_LEVEL_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "COND_TEXT_LEVEL_ID", DbType = System.Data.DbType.String),
        ]
        public int CondTextLevelId
        {
            get
            {
                return (int)this._primaryKey[Properties.CondTextLevelId];
            }
            set
            {
                this._primaryKey[Properties.CondTextLevelId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ConditionTextId.
        /// </summary>
        /// <value>Propiedad ConditionTextId.</value>
        [
        DescriptionKey("CONDITION_TEXT_ID_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "CONDITION_TEXT_ID", DbType = System.Data.DbType.String),
        ]
        public int ConditionTextId
        {
            get
            {
                return this._conditionTextId;
            }
            set
            {
                this._conditionTextId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ConditionLevelId.
        /// </summary>
        /// <value>Propiedad ConditionLevelId.</value>
        [
        DescriptionKey("CONDITION_LEVEL_ID_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "CONDITION_LEVEL_ID", DbType = System.Data.DbType.String),
        ]
        public int? ConditionLevelId
        {
            get
            {
                return this._conditionLevelId;
            }
            set
            {
                this._conditionLevelId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IsAutomatic.
        /// </summary>
        /// <value>Propiedad IsAutomatic.</value>
        [
        DescriptionKey("IS_AUTOMATIC_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "IS_AUTOMATIC", DbType = System.Data.DbType.String),
        ]
        public bool IsAutomatic
        {
            get
            {
                return this._isAutomatic;
            }
            set
            {
                this._isAutomatic = value;
            }
        }

    }
}