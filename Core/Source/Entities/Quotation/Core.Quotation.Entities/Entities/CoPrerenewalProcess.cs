/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Quotation.CoPrerenewalProcess.dict v1.0
 * FileSize=5657 Header=259 CRC=3149770857
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.Quotation.Entities
{
    /// <summary>
    /// Definición de entidad CoPrerenewalProcess.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Quotation.CoPrerenewalProcess.dict"),
    Serializable(),
    DescriptionKey("CO_PRERENEWAL_PROCESS_ENTITY"),
    TableMap(TableName = "CO_PRERENEWAL_PROCESS", Schema = "QUO"),
    ]
    public partial class CoPrerenewalProcess :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string ProcessId = "ProcessId";
            public static readonly string BranchCode = "BranchCode";
            public static readonly string PrefixCode = "PrefixCode";
            public static readonly string DocumentNum = "DocumentNum";
            public static readonly string LicensePlate = "LicensePlate";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<CoPrerenewalProcess>();
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad ProcessId.
        /// </summary>
        private int _processId;
        /// <summary>
        /// Atributo para la propiedad BranchCode.
        /// </summary>
        private int _branchCode;
        /// <summary>
        /// Atributo para la propiedad PrefixCode.
        /// </summary>
        private int _prefixCode;
        /// <summary>
        /// Atributo para la propiedad DocumentNum.
        /// </summary>
        private decimal _documentNum;
        /// <summary>
        /// Atributo para la propiedad LicensePlate.
        /// </summary>
        private string _licensePlate = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        public CoPrerenewalProcess() :
            this(CoPrerenewalProcess.CreatePrimaryKey(), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public CoPrerenewalProcess(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad ProcessId.
        /// </summary>
        /// <value>Propiedad ProcessId.</value>
        [
        DescriptionKey("PROCESS_ID_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "PROCESS_ID", DbType = System.Data.DbType.String),
        ]
        public int ProcessId
        {
            get
            {
                return this._processId;
            }
            set
            {
                this._processId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad BranchCode.
        /// </summary>
        /// <value>Propiedad BranchCode.</value>
        [
        DescriptionKey("BRANCH_CODE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "BRANCH_CD", DbType = System.Data.DbType.String),
        ]
        public int BranchCode
        {
            get
            {
                return this._branchCode;
            }
            set
            {
                this._branchCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad PrefixCode.
        /// </summary>
        /// <value>Propiedad PrefixCode.</value>
        [
        DescriptionKey("PREFIX_CODE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "PREFIX_CD", DbType = System.Data.DbType.String),
        ]
        public int PrefixCode
        {
            get
            {
                return this._prefixCode;
            }
            set
            {
                this._prefixCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad DocumentNum.
        /// </summary>
        /// <value>Propiedad DocumentNum.</value>
        [
        DescriptionKey("DOCUMENT_NUM_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "DOCUMENT_NUM", DbType = System.Data.DbType.Decimal),
        ]
        public decimal DocumentNum
        {
            get
            {
                return this._documentNum;
            }
            set
            {
                this._documentNum = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad LicensePlate.
        /// </summary>
        /// <value>Propiedad LicensePlate.</value>
        [
        DescriptionKey("LICENSE_PLATE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "LICENSE_PLATE", DbType = System.Data.DbType.String),
        ]
        public string LicensePlate
        {
            get
            {
                return this._licensePlate;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.LicensePlate);
                }
                this._licensePlate = value;
            }
        }

    }
}