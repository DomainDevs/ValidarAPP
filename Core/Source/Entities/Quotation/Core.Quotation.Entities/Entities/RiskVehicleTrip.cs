/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Quotation.RiskVehicleTrip.dict v1.0
 * FileSize=6573 Header=255 CRC=1718810883
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.Quotation.Entities
{
    /// <summary>
    /// Definición de entidad RiskVehicleTrip.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Quotation.RiskVehicleTrip.dict"),
    Serializable(),
    DescriptionKey("RISK_VEHICLE_TRIP_ENTITY"),
    TableMap(TableName = "RISK_VEHICLE_TRIP", Schema = "QUO"),
    ]
    public partial class RiskVehicleTrip :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string QuotationId = "QuotationId";
            public static readonly string RiskId = "RiskId";
            public static readonly string VehicleTypeCode = "VehicleTypeCode";
            public static readonly string AverageValue = "AverageValue";
            public static readonly string HasNew = "HasNew";
            public static readonly string HasUsed = "HasUsed";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="quotationId">Propiedad clave QuotationId.</param>
        /// <param name="riskId">Propiedad clave RiskId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int quotationId, int riskId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.QuotationId, quotationId);
            keys.Add(Properties.RiskId, riskId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="quotationId">Propiedad clave QuotationId.</param>
        /// <param name="riskId">Propiedad clave RiskId.</param>
        public static PrimaryKey CreatePrimaryKey(int quotationId, int riskId)
        {
            return InternalCreatePrimaryKey<RiskVehicleTrip>(quotationId, riskId);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad VehicleTypeCode.
        /// </summary>
        private int _vehicleTypeCode;
        /// <summary>
        /// Atributo para la propiedad AverageValue.
        /// </summary>
        private decimal _averageValue;
        /// <summary>
        /// Atributo para la propiedad HasNew.
        /// </summary>
        private bool _hasNew;
        /// <summary>
        /// Atributo para la propiedad HasUsed.
        /// </summary>
        private bool _hasUsed;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="quotationId">QuotationId key property.</param>
        /// <param name="riskId">RiskId key property.</param>
        public RiskVehicleTrip(int quotationId, int riskId) :
            this(RiskVehicleTrip.CreatePrimaryKey(quotationId, riskId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public RiskVehicleTrip(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad QuotationId.
        /// </summary>
        /// <value>Propiedad QuotationId.</value>
        [
        DescriptionKey("QUOTATION_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "QUOTATION_ID", DbType = System.Data.DbType.String),
        ]
        public int QuotationId
        {
            get
            {
                return (int)this._primaryKey[Properties.QuotationId];
            }
            set
            {
                this._primaryKey[Properties.QuotationId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad RiskId.
        /// </summary>
        /// <value>Propiedad RiskId.</value>
        [
        DescriptionKey("RISK_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "RISK_ID", DbType = System.Data.DbType.String),
        ]
        public int RiskId
        {
            get
            {
                return (int)this._primaryKey[Properties.RiskId];
            }
            set
            {
                this._primaryKey[Properties.RiskId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad VehicleTypeCode.
        /// </summary>
        /// <value>Propiedad VehicleTypeCode.</value>
        [
        DescriptionKey("VEHICLE_TYPE_CODE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "VEHICLE_TYPE_CD", DbType = System.Data.DbType.String),
        ]
        public int VehicleTypeCode
        {
            get
            {
                return this._vehicleTypeCode;
            }
            set
            {
                this._vehicleTypeCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad AverageValue.
        /// </summary>
        /// <value>Propiedad AverageValue.</value>
        [
        DescriptionKey("AVERAGE_VALUE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "AVERAGE_VALUE", DbType = System.Data.DbType.Decimal),
        ]
        public decimal AverageValue
        {
            get
            {
                return this._averageValue;
            }
            set
            {
                this._averageValue = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad HasNew.
        /// </summary>
        /// <value>Propiedad HasNew.</value>
        [
        DescriptionKey("HAS_NEW_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "HAS_NEW", DbType = System.Data.DbType.String),
        ]
        public bool HasNew
        {
            get
            {
                return this._hasNew;
            }
            set
            {
                this._hasNew = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad HasUsed.
        /// </summary>
        /// <value>Propiedad HasUsed.</value>
        [
        DescriptionKey("HAS_USED_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "HAS_USED", DbType = System.Data.DbType.String),
        ]
        public bool HasUsed
        {
            get
            {
                return this._hasUsed;
            }
            set
            {
                this._hasUsed = value;
            }
        }

    }
}