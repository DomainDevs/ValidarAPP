/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Quotation.CoverageDeductible.dict v1.0
 * FileSize=4654 Header=258 CRC=2867754298
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.Quotation.Entities
{
    /// <summary>
    /// Definición de entidad CoverageDeductible.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Quotation.CoverageDeductible.dict"),
    Serializable(),
    DescriptionKey("COVERAGE_DEDUCTIBLE_ENTITY"),
    TableMap(TableName = "COVERAGE_DEDUCTIBLE", Schema = "QUO"),
    ]
    public partial class CoverageDeductible :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string DeductId = "DeductId";
            public static readonly string CoverageId = "CoverageId";
            public static readonly string IsDefault = "IsDefault";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="deductId">Propiedad clave DeductId.</param>
        /// <param name="coverageId">Propiedad clave CoverageId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int deductId, int coverageId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.DeductId, deductId);
            keys.Add(Properties.CoverageId, coverageId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="deductId">Propiedad clave DeductId.</param>
        /// <param name="coverageId">Propiedad clave CoverageId.</param>
        public static PrimaryKey CreatePrimaryKey(int deductId, int coverageId)
        {
            return InternalCreatePrimaryKey<CoverageDeductible>(deductId, coverageId);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad IsDefault.
        /// </summary>
        private bool _isDefault;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="deductId">DeductId key property.</param>
        /// <param name="coverageId">CoverageId key property.</param>
        public CoverageDeductible(int deductId, int coverageId) :
            this(CoverageDeductible.CreatePrimaryKey(deductId, coverageId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public CoverageDeductible(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad DeductId.
        /// </summary>
        /// <value>Propiedad DeductId.</value>
        [
        DescriptionKey("DEDUCT_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "DEDUCT_ID", DbType = System.Data.DbType.String),
        ]
        public int DeductId
        {
            get
            {
                return (int)this._primaryKey[Properties.DeductId];
            }
            set
            {
                this._primaryKey[Properties.DeductId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad CoverageId.
        /// </summary>
        /// <value>Propiedad CoverageId.</value>
        [
        DescriptionKey("COVERAGE_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "COVERAGE_ID", DbType = System.Data.DbType.String),
        ]
        public int CoverageId
        {
            get
            {
                return (int)this._primaryKey[Properties.CoverageId];
            }
            set
            {
                this._primaryKey[Properties.CoverageId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IsDefault.
        /// </summary>
        /// <value>Propiedad IsDefault.</value>
        [
        DescriptionKey("IS_DEFAULT_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "IS_DEFAULT", DbType = System.Data.DbType.String),
        ]
        public bool IsDefault
        {
            get
            {
                return this._isDefault;
            }
            set
            {
                this._isDefault = value;
            }
        }

    }
}