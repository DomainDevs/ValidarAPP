/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Quotation.Detail.dict v1.0
 * FileSize=7131 Header=245 CRC=786042767
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.Quotation.Entities
{
    /// <summary>
    /// Definición de entidad Detail.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Quotation.Detail.dict"),
    Serializable(),
    DescriptionKey("DETAIL_ENTITY"),
    TableMap(TableName = "DETAIL", Schema = "QUO"),
    ]
    public partial class Detail :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string DetailId = "DetailId";
            public static readonly string Description = "Description";
            public static readonly string DetailTypeCode = "DetailTypeCode";
            public static readonly string Enabled = "Enabled";
            public static readonly string RateTypeCode = "RateTypeCode";
            public static readonly string Rate = "Rate";
            public static readonly string SublimitAmount = "SublimitAmount";
        }
        
        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="detailId">Propiedad clave DetailId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int detailId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.DetailId, detailId);

            return new PrimaryKey<T>(keys);
        }

        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.DetailId, null);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="detailId">Propiedad clave DetailId.</param>
        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<Detail>();
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="detailId">Propiedad clave DetailId.</param>
        public static PrimaryKey CreatePrimaryKey(int detailId)
        {
            return InternalCreatePrimaryKey<Detail>(detailId);
        }

        
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad Description.
        /// </summary>
        private string _description = null;
        /// <summary>
        /// Atributo para la propiedad DetailTypeCode.
        /// </summary>
        private int _detailTypeCode;
        /// <summary>
        /// Atributo para la propiedad Enabled.
        /// </summary>
        private bool _enabled;
        /// <summary>
        /// Atributo para la propiedad RateTypeCode.
        /// </summary>
        private int? _rateTypeCode = null;
        /// <summary>
        /// Atributo para la propiedad Rate.
        /// </summary>
        private decimal? _rate = null;
        /// <summary>
        /// Atributo para la propiedad SublimitAmount.
        /// </summary>
        private decimal? _sublimitAmount = null;
        //*** Object Constructors ********************************



        public Detail() :
            this(Detail.CreatePrimaryKey(), null)
        {
        }
        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="detailId">DetailId key property.</param>


        public Detail(int detailId) :
            this(Detail.CreatePrimaryKey(detailId), null)
        {
        }


        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public Detail(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }



        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad DetailId.
        /// </summary>
        /// <value>Propiedad DetailId.</value>
        [
        DescriptionKey("DETAIL_ID_PROPERTY"),
        PersistentProperty(IsKey = true,KeyType ="None"),
        ColumnMap(ColumnName = "DETAIL_ID", DbType = System.Data.DbType.String),
        ]
        public int DetailId
        {
            get
            {
                return (int)this._primaryKey[Properties.DetailId];
            }
            set
            {
                this._primaryKey[Properties.DetailId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Description.
        /// </summary>
        /// <value>Propiedad Description.</value>
        [
        DescriptionKey("DESCRIPTION_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Description);
                }
                this._description = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad DetailTypeCode.
        /// </summary>
        /// <value>Propiedad DetailTypeCode.</value>
        [
        DescriptionKey("DETAIL_TYPE_CODE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "DETAIL_TYPE_CD", DbType = System.Data.DbType.String),
        ]
        public int DetailTypeCode
        {
            get
            {
                return this._detailTypeCode;
            }
            set
            {
                this._detailTypeCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Enabled.
        /// </summary>
        /// <value>Propiedad Enabled.</value>
        [
        DescriptionKey("ENABLED_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "ENABLED", DbType = System.Data.DbType.String),
        ]
        public bool Enabled
        {
            get
            {
                return this._enabled;
            }
            set
            {
                this._enabled = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad RateTypeCode.
        /// </summary>
        /// <value>Propiedad RateTypeCode.</value>
        [
        DescriptionKey("RATE_TYPE_CODE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "RATE_TYPE_CD", DbType = System.Data.DbType.String),
        ]
        public int? RateTypeCode
        {
            get
            {
                return this._rateTypeCode;
            }
            set
            {
                this._rateTypeCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Rate.
        /// </summary>
        /// <value>Propiedad Rate.</value>
        [
        DescriptionKey("RATE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "RATE", DbType = System.Data.DbType.Decimal),
        ]
        public decimal? Rate
        {
            get
            {
                return this._rate;
            }
            set
            {
                this._rate = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad SublimitAmount.
        /// </summary>
        /// <value>Propiedad SublimitAmount.</value>
        [
        DescriptionKey("SUBLIMIT_AMOUNT_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "SUBLIMIT_AMT", DbType = System.Data.DbType.Decimal),
        ]
        public decimal? SublimitAmount
        {
            get
            {
                return this._sublimitAmount;
            }
            set
            {
                this._sublimitAmount = value;
            }
        }

    }
}