/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Integration.UpIndividualControl.dict v1.0
 * FileSize=6119 Header=261 CRC=3542299778
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.Integration.Entities
{
    /// <summary>
    /// Definición de entidad UpIndividualControl.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Integration.UpIndividualControl.dict"),
    Serializable(),
    DescriptionKey("UP_INDIVIDUAL_CONTROL_ENTITY"),
    TableMap(TableName = "UP_INDIVIDUAL_CONTROL", Schema = "INT"),
    ]
    public partial class UpIndividualControl :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string IndividualControlId = "IndividualControlId";
            public static readonly string IndividualId = "IndividualId";
            public static readonly string AppSource = "AppSource";
            public static readonly string IndividualOrigin = "IndividualOrigin";
            public static readonly string Action = "Action";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="individualControlId">Propiedad clave IndividualControlId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int individualControlId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.IndividualControlId, individualControlId);

            return new PrimaryKey<T>(keys);
        }

        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.IndividualControlId, null);

            return new PrimaryKey<T>(keys);
        }
        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="individualControlId">Propiedad clave IndividualControlId.</param>
        public static PrimaryKey CreatePrimaryKey(int individualControlId)
        {
            return InternalCreatePrimaryKey<UpIndividualControl>(individualControlId);
        }

        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<UpIndividualControl>();
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad IndividualId.
        /// </summary>
        private int _individualId;
        /// <summary>
        /// Atributo para la propiedad AppSource.
        /// </summary>
        private int _appSource;
        /// <summary>
        /// Atributo para la propiedad IndividualOrigin.
        /// </summary>
        private int _individualOrigin;
        /// <summary>
        /// Atributo para la propiedad Action.
        /// </summary>
        private string _action = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="individualControlId">IndividualControlId key property.</param>
        public UpIndividualControl(int individualControlId) :
            this(UpIndividualControl.CreatePrimaryKey(individualControlId), null)
        {
        }

        public UpIndividualControl() :
            this(UpIndividualControl.CreatePrimaryKey(), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public UpIndividualControl(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad IndividualControlId.
        /// </summary>
        /// <value>Propiedad IndividualControlId.</value>
        [
        DescriptionKey("INDIVIDUAL_CONTROL_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "INDIVIDUAL_CONTROL_ID", DbType = System.Data.DbType.String),
        ]
        public int IndividualControlId
        {
            get
            {
                return (int)this._primaryKey[Properties.IndividualControlId];
            }
            set
            {
                this._primaryKey[Properties.IndividualControlId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IndividualId.
        /// </summary>
        /// <value>Propiedad IndividualId.</value>
        [
        DescriptionKey("INDIVIDUAL_ID_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "INDIVIDUAL_ID", DbType = System.Data.DbType.String),
        ]
        public int IndividualId
        {
            get
            {
                return this._individualId;
            }
            set
            {
                this._individualId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad AppSource.
        /// </summary>
        /// <value>Propiedad AppSource.</value>
        [
        DescriptionKey("APP_SOURCE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "APP_SOURCE", DbType = System.Data.DbType.String),
        ]
        public int AppSource
        {
            get
            {
                return this._appSource;
            }
            set
            {
                this._appSource = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IndividualOrigin.
        /// </summary>
        /// <value>Propiedad IndividualOrigin.</value>
        [
        DescriptionKey("INDIVIDUAL_ORIGIN_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "INDIVIDUAL_ORIGIN", DbType = System.Data.DbType.String),
        ]
        public int IndividualOrigin
        {
            get
            {
                return this._individualOrigin;
            }
            set
            {
                this._individualOrigin = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Action.
        /// </summary>
        /// <value>Propiedad Action.</value>
        [
        DescriptionKey("ACTION_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "ACTION", DbType = System.Data.DbType.String),
        ]
        public string Action
        {
            get
            {
                return this._action;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Action);
                }
                this._action = value;
            }
        }

    }
}