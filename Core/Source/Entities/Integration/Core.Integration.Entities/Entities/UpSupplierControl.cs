/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Integration.UpSupplierControl.dict v1.0
 * FileSize=6033 Header=259 CRC=1281737669
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.Integration.Entities
{
    /// <summary>
    /// Definición de entidad UpSupplierControl.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Integration.UpSupplierControl.dict"),
    Serializable(),
    DescriptionKey("UP_SUPPLIER_CONTROL_ENTITY"),
    TableMap(TableName="UP_SUPPLIER_CONTROL", Schema="INT"),
    ]
    public partial class UpSupplierControl :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string SupplierControlId = "SupplierControlId";
			public static readonly string SupplierCode = "SupplierCode";
			public static readonly string AppSource = "AppSource";
			public static readonly string SupplierOrigin = "SupplierOrigin";
			public static readonly string Action = "Action";
		}

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="supplierControlId">Propiedad clave SupplierControlId.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>(int supplierControlId)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.SupplierControlId, supplierControlId);

		    return new PrimaryKey<T>(keys);
	    }

        /// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.SupplierControlId, null);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="supplierControlId">Propiedad clave SupplierControlId.</param>
        public static PrimaryKey CreatePrimaryKey(int supplierControlId)
	    {
			return InternalCreatePrimaryKey<UpSupplierControl>(supplierControlId);
		}

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<UpSupplierControl>();
        }

        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad SupplierCode.
        /// </summary>
        private int _supplierCode;
		/// <summary>
		/// Atributo para la propiedad AppSource.
		/// </summary>
        private int _appSource;
		/// <summary>
		/// Atributo para la propiedad SupplierOrigin.
		/// </summary>
        private int _supplierOrigin;
		/// <summary>
		/// Atributo para la propiedad Action.
		/// </summary>
        private string _action = null;
	    //*** Object Constructors ********************************

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="supplierControlId">SupplierControlId key property.</param>
	    public UpSupplierControl(int supplierControlId):
			this(UpSupplierControl.CreatePrimaryKey(supplierControlId), null)
	    {
	    }

        /// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
	    public UpSupplierControl() :
            this(UpSupplierControl.CreatePrimaryKey(), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public UpSupplierControl(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad SupplierControlId.
		/// </summary>
		/// <value>Propiedad SupplierControlId.</value>
	    [
		DescriptionKey("SUPPLIER_CONTROL_ID_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="SUPPLIER_CONTROL_ID", DbType=System.Data.DbType.String),
	    ]
        public int SupplierControlId
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.SupplierControlId];
		    }
		    set
		    {
				this._primaryKey[Properties.SupplierControlId] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad SupplierCode.
		/// </summary>
		/// <value>Propiedad SupplierCode.</value>
	    [
		DescriptionKey("SUPPLIER_CODE_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="SUPPLIER_CD", DbType=System.Data.DbType.String),
	    ]
        public int SupplierCode
	    {
		    get
		    {
			    return this._supplierCode;
		    }
		    set
		    {
				this._supplierCode = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad AppSource.
		/// </summary>
		/// <value>Propiedad AppSource.</value>
	    [
		DescriptionKey("APP_SOURCE_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="APP_SOURCE", DbType=System.Data.DbType.String),
	    ]
        public int AppSource
	    {
		    get
		    {
			    return this._appSource;
		    }
		    set
		    {
				this._appSource = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad SupplierOrigin.
		/// </summary>
		/// <value>Propiedad SupplierOrigin.</value>
	    [
		DescriptionKey("SUPPLIER_ORIGIN_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="SUPPLIER_ORIGIN", DbType=System.Data.DbType.String),
	    ]
        public int SupplierOrigin
	    {
		    get
		    {
			    return this._supplierOrigin;
		    }
		    set
		    {
				this._supplierOrigin = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Action.
		/// </summary>
		/// <value>Propiedad Action.</value>
	    [
		DescriptionKey("ACTION_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="ACTION", DbType=System.Data.DbType.String),
	    ]
        public string Action
	    {
		    get
		    {
			    return this._action;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.Action);
				}
				this._action = value;
			}
	    }

    }
}