/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Claims.RelationMovementEstimationType.dict v1.0
 * FileSize=4430 Header=267 CRC=1216703950
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.Claims.Entities
{
    /// <summary>
    /// Definición de entidad RelationMovementEstimationType.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Claims.RelationMovementEstimationType.dict"),
    Serializable(),
    DescriptionKey("RELATION_MOVEMENT_ESTIMATION_TYPE_ENTITY"),
    TableMap(TableName="RELATION_MOVEMENT_ESTIMATION_TYPE", Schema="PAYM"),
    ]
    public partial class RelationMovementEstimationType :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string MovementTypeCode = "MovementTypeCode";
			public static readonly string EstimateTypeCode = "EstimateTypeCode";
		}

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="movementTypeCode">Propiedad clave MovementTypeCode.</param>
		/// <param name="estimateTypeCode">Propiedad clave EstimateTypeCode.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>(int movementTypeCode, int estimateTypeCode)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.MovementTypeCode, movementTypeCode);
		    keys.Add(Properties.EstimateTypeCode, estimateTypeCode);

		    return new PrimaryKey<T>(keys);
	    }

        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.MovementTypeCode, null);
            keys.Add(Properties.EstimateTypeCode, null);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="movementTypeCode">Propiedad clave MovementTypeCode.</param>
        /// <param name="estimateTypeCode">Propiedad clave EstimateTypeCode.</param>
        public static PrimaryKey CreatePrimaryKey(int movementTypeCode, int estimateTypeCode)
	    {
			return InternalCreatePrimaryKey<RelationMovementEstimationType>(movementTypeCode, estimateTypeCode);
		}

        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<RelationMovementEstimationType>();
        }

        #endregion

        //*** Object Attributes ********************************

        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="movementTypeCode">MovementTypeCode key property.</param>
        /// <param name="estimateTypeCode">EstimateTypeCode key property.</param>
        public RelationMovementEstimationType(int movementTypeCode, int estimateTypeCode):
			this(RelationMovementEstimationType.CreatePrimaryKey(movementTypeCode, estimateTypeCode), null)
	    {
	    }

        public RelationMovementEstimationType() :
            this(RelationMovementEstimationType.CreatePrimaryKey(), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public RelationMovementEstimationType(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad MovementTypeCode.
		/// </summary>
		/// <value>Propiedad MovementTypeCode.</value>
	    [
		DescriptionKey("MOVEMENT_TYPE_CODE_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="MOVEMENT_TYPE_CD", DbType=System.Data.DbType.String),
	    ]
        public int MovementTypeCode
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.MovementTypeCode];
		    }
		    set
		    {
				this._primaryKey[Properties.MovementTypeCode] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad EstimateTypeCode.
		/// </summary>
		/// <value>Propiedad EstimateTypeCode.</value>
	    [
		DescriptionKey("ESTIMATE_TYPE_CODE_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="ESTIMATE_TYPE_CD", DbType=System.Data.DbType.String),
	    ]
        public int EstimateTypeCode
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.EstimateTypeCode];
		    }
		    set
		    {
				this._primaryKey[Properties.EstimateTypeCode] = value;
			}
	    }

    }
}