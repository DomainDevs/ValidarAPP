/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Issuance.CoinsuranceAccepted.dict v1.0
 * FileSize=8690 Header=258 CRC=1747765000
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.Issuance.Entities
{
    /// <summary>
    /// Definición de entidad CoinsuranceAccepted.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Issuance.CoinsuranceAccepted.dict"),
    Serializable(),
    DescriptionKey("COINSURANCE_ACCEPTED_ENTITY"),
    TableMap(TableName = "COINSURANCE_ACCEPTED", Schema = "ISS"),
    ]
    public partial class CoinsuranceAccepted :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string EndorsementId = "EndorsementId";
            public static readonly string PolicyId = "PolicyId";
            public static readonly string InsuranceCompanyId = "InsuranceCompanyId";
            public static readonly string PartCiaPercentage = "PartCiaPercentage";
            public static readonly string ExpensesPercentage = "ExpensesPercentage";
            public static readonly string PartMainPercentage = "PartMainPercentage";
            public static readonly string AnnexNumMain = "AnnexNumMain";
            public static readonly string PolicyNumMain = "PolicyNumMain";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="endorsementId">Propiedad clave EndorsementId.</param>
        /// <param name="policyId">Propiedad clave PolicyId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int endorsementId, int policyId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.EndorsementId, endorsementId);
            keys.Add(Properties.PolicyId, policyId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="endorsementId">Propiedad clave EndorsementId.</param>
        /// <param name="policyId">Propiedad clave PolicyId.</param>
        public static PrimaryKey CreatePrimaryKey(int endorsementId, int policyId)
        {
            return InternalCreatePrimaryKey<CoinsuranceAccepted>(endorsementId, policyId);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad InsuranceCompanyId.
        /// </summary>
        private decimal _insuranceCompanyId;
        /// <summary>
        /// Atributo para la propiedad PartCiaPercentage.
        /// </summary>
        private decimal _partCiaPercentage;
        /// <summary>
        /// Atributo para la propiedad ExpensesPercentage.
        /// </summary>
        private decimal _expensesPercentage;
        /// <summary>
        /// Atributo para la propiedad PartMainPercentage.
        /// </summary>
        private decimal _partMainPercentage;
        /// <summary>
        /// Atributo para la propiedad AnnexNumMain.
        /// </summary>
        private string _annexNumMain = null;
        /// <summary>
        /// Atributo para la propiedad PolicyNumMain.
        /// </summary>
        private string _policyNumMain = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="endorsementId">EndorsementId key property.</param>
        /// <param name="policyId">PolicyId key property.</param>
        public CoinsuranceAccepted(int endorsementId, int policyId) :
            this(CoinsuranceAccepted.CreatePrimaryKey(endorsementId, policyId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public CoinsuranceAccepted(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad EndorsementId.
        /// </summary>
        /// <value>Propiedad EndorsementId.</value>
        [
        DescriptionKey("ENDORSEMENT_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "ENDORSEMENT_ID", DbType = System.Data.DbType.String),
        ]
        public int EndorsementId
        {
            get
            {
                return (int)this._primaryKey[Properties.EndorsementId];
            }
            set
            {
                this._primaryKey[Properties.EndorsementId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad PolicyId.
        /// </summary>
        /// <value>Propiedad PolicyId.</value>
        [
        DescriptionKey("POLICY_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "POLICY_ID", DbType = System.Data.DbType.String),
        ]
        public int PolicyId
        {
            get
            {
                return (int)this._primaryKey[Properties.PolicyId];
            }
            set
            {
                this._primaryKey[Properties.PolicyId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad InsuranceCompanyId.
        /// </summary>
        /// <value>Propiedad InsuranceCompanyId.</value>
        [
        DescriptionKey("INSURANCE_COMPANY_ID_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "INSURANCE_COMPANY_ID", DbType = System.Data.DbType.Decimal),
        ]
        public decimal InsuranceCompanyId
        {
            get
            {
                return this._insuranceCompanyId;
            }
            set
            {
                this._insuranceCompanyId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad PartCiaPercentage.
        /// </summary>
        /// <value>Propiedad PartCiaPercentage.</value>
        [
        DescriptionKey("PART_CIA_PERCENTAGE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "PART_CIA_PCT", DbType = System.Data.DbType.Decimal),
        ]
        public decimal PartCiaPercentage
        {
            get
            {
                return this._partCiaPercentage;
            }
            set
            {
                this._partCiaPercentage = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ExpensesPercentage.
        /// </summary>
        /// <value>Propiedad ExpensesPercentage.</value>
        [
        DescriptionKey("EXPENSES_PERCENTAGE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "EXPENSES_PCT", DbType = System.Data.DbType.Decimal),
        ]
        public decimal ExpensesPercentage
        {
            get
            {
                return this._expensesPercentage;
            }
            set
            {
                this._expensesPercentage = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad PartMainPercentage.
        /// </summary>
        /// <value>Propiedad PartMainPercentage.</value>
        [
        DescriptionKey("PART_MAIN_PERCENTAGE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "PART_MAIN_PCT", DbType = System.Data.DbType.Decimal),
        ]
        public decimal PartMainPercentage
        {
            get
            {
                return this._partMainPercentage;
            }
            set
            {
                this._partMainPercentage = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad AnnexNumMain.
        /// </summary>
        /// <value>Propiedad AnnexNumMain.</value>
        [
        DescriptionKey("ANNEX_NUM_MAIN_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "ANNEX_NUM_MAIN", DbType = System.Data.DbType.String),
        ]
        public string AnnexNumMain
        {
            get
            {
                return this._annexNumMain;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.AnnexNumMain);
                }
                this._annexNumMain = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad PolicyNumMain.
        /// </summary>
        /// <value>Propiedad PolicyNumMain.</value>
        [
        DescriptionKey("POLICY_NUM_MAIN_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "POLICY_NUM_MAIN", DbType = System.Data.DbType.String),
        ]
        public string PolicyNumMain
        {
            get
            {
                return this._policyNumMain;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.PolicyNumMain);
                }
                this._policyNumMain = value;
            }
        }

    }
}