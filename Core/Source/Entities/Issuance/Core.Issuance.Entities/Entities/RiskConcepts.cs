/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Issuance.RiskConcepts.dict v1.0
 * FileSize=7889 Header=251 CRC=2375796846
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.Issuance.Entities
{
    /// <summary>
    /// Definición de entidad RiskConcepts.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Issuance.RiskConcepts.dict"),
    Serializable(),
    DescriptionKey("RISK_CONCEPTS_ENTITY"),
    TableMap(TableName="RISK_CONCEPTS", Schema="ISS"),
    ]
    public partial class RiskConcepts :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string PolicyId = "PolicyId";
			public static readonly string EndorsementId = "EndorsementId";
			public static readonly string RiskId = "RiskId";
			public static readonly string ConceptId = "ConceptId";
			public static readonly string EntityId = "EntityId";
			public static readonly string ConceptValue = "ConceptValue";
			public static readonly string QuestionId = "QuestionId";
		}

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="policyId">Propiedad clave PolicyId.</param>
		/// <param name="endorsementId">Propiedad clave EndorsementId.</param>
		/// <param name="conceptId">Propiedad clave ConceptId.</param>
		/// <param name="entityId">Propiedad clave EntityId.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>(int policyId, int endorsementId, int conceptId, int entityId)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.PolicyId, policyId);
		    keys.Add(Properties.EndorsementId, endorsementId);
		    keys.Add(Properties.ConceptId, conceptId);
		    keys.Add(Properties.EntityId, entityId);

		    return new PrimaryKey<T>(keys);
	    }

		/// <summary>
		/// Crea una clave primaria para esta clase.
		/// </summary>
		/// <param name="policyId">Propiedad clave PolicyId.</param>
		/// <param name="endorsementId">Propiedad clave EndorsementId.</param>
		/// <param name="conceptId">Propiedad clave ConceptId.</param>
		/// <param name="entityId">Propiedad clave EntityId.</param>
		public static PrimaryKey CreatePrimaryKey(int policyId, int endorsementId, int conceptId, int entityId)
	    {
			return InternalCreatePrimaryKey<RiskConcepts>(policyId, endorsementId, conceptId, entityId);
		}
#endregion

	    //*** Object Attributes ********************************

		/// <summary>
		/// Atributo para la propiedad RiskId.
		/// </summary>
        private int _riskId;
		/// <summary>
		/// Atributo para la propiedad ConceptValue.
		/// </summary>
        private string _conceptValue = null;
		/// <summary>
		/// Atributo para la propiedad QuestionId.
		/// </summary>
        private int? _questionId = null;
	    //*** Object Constructors ********************************

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="policyId">PolicyId key property.</param>
		/// <param name="endorsementId">EndorsementId key property.</param>
		/// <param name="conceptId">ConceptId key property.</param>
		/// <param name="entityId">EntityId key property.</param>
	    public RiskConcepts(int policyId, int endorsementId, int conceptId, int entityId):
			this(RiskConcepts.CreatePrimaryKey(policyId, endorsementId, conceptId, entityId), null)
	    {
	    }

		/// <summary>
		/// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
		/// </summary>
		/// <param name="key">
		/// Identificador de la instancia de la entidad.
		/// </param>
		/// <param name="initialValues">
		/// Valores para establecer el estado de la instancia.
		/// </param>
	    public RiskConcepts(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad PolicyId.
		/// </summary>
		/// <value>Propiedad PolicyId.</value>
	    [
		DescriptionKey("POLICY_ID_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="POLICY_ID", DbType=System.Data.DbType.String),
	    ]
        public int PolicyId
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.PolicyId];
		    }
		    set
		    {
				this._primaryKey[Properties.PolicyId] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad EndorsementId.
		/// </summary>
		/// <value>Propiedad EndorsementId.</value>
	    [
		DescriptionKey("ENDORSEMENT_ID_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="ENDORSEMENT_ID", DbType=System.Data.DbType.String),
	    ]
        public int EndorsementId
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.EndorsementId];
		    }
		    set
		    {
				this._primaryKey[Properties.EndorsementId] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad RiskId.
		/// </summary>
		/// <value>Propiedad RiskId.</value>
	    [
		DescriptionKey("RISK_ID_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="RISK_ID", DbType=System.Data.DbType.String),
	    ]
        public int RiskId
	    {
		    get
		    {
			    return this._riskId;
		    }
		    set
		    {
				this._riskId = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad ConceptId.
		/// </summary>
		/// <value>Propiedad ConceptId.</value>
	    [
		DescriptionKey("CONCEPT_ID_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="CONCEPT_ID", DbType=System.Data.DbType.String),
	    ]
        public int ConceptId
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.ConceptId];
		    }
		    set
		    {
				this._primaryKey[Properties.ConceptId] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad EntityId.
		/// </summary>
		/// <value>Propiedad EntityId.</value>
	    [
		DescriptionKey("ENTITY_ID_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="ENTITY_ID", DbType=System.Data.DbType.String),
	    ]
        public int EntityId
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.EntityId];
		    }
		    set
		    {
				this._primaryKey[Properties.EntityId] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad ConceptValue.
		/// </summary>
		/// <value>Propiedad ConceptValue.</value>
	    [
		DescriptionKey("CONCEPT_VALUE_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="CONCEPT_VALUE", DbType=System.Data.DbType.String),
	    ]
        public string ConceptValue
	    {
		    get
		    {
			    return this._conceptValue;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.ConceptValue);
				}
				this._conceptValue = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad QuestionId.
		/// </summary>
		/// <value>Propiedad QuestionId.</value>
	    [
		DescriptionKey("QUESTION_ID_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="QUESTION_ID", DbType=System.Data.DbType.String),
	    ]
        public int? QuestionId
	    {
		    get
		    {
			    return this._questionId;
		    }
		    set
		    {
				this._questionId = value;
			}
	    }

    }
}