/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Issuance.RiskInsuredObject.dict v1.0
 * FileSize=5532 Header=256 CRC=1836199046
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.Issuance.Entities
{
    /// <summary>
    /// Definición de entidad RiskInsuredObject.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Issuance.RiskInsuredObject.dict"),
    Serializable(),
    DescriptionKey("RISK_INSURED_OBJECT_ENTITY"),
    TableMap(TableName = "RISK_INSURED_OBJECT", Schema = "ISS"),
    ]
    public partial class RiskInsuredObject :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string RiskId = "RiskId";
            public static readonly string InsuredObjectId = "InsuredObjectId";
            public static readonly string InsuredValue = "InsuredValue";
            public static readonly string InsuredPercentage = "InsuredPercentage";
			public static readonly string InsuredRate = "InsuredRate";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="riskId">Propiedad clave RiskId.</param>
        /// <param name="insuredObjectId">Propiedad clave InsuredObjectId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int riskId, int insuredObjectId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.RiskId, riskId);
            keys.Add(Properties.InsuredObjectId, insuredObjectId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="riskId">Propiedad clave RiskId.</param>
        /// <param name="insuredObjectId">Propiedad clave InsuredObjectId.</param>
        public static PrimaryKey CreatePrimaryKey(int riskId, int insuredObjectId)
        {
            return InternalCreatePrimaryKey<RiskInsuredObject>(riskId, insuredObjectId);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad InsuredValue.
        /// </summary>
        private decimal? _insuredValue = null;
        /// <summary>
        /// Atributo para la propiedad InsuredPercentage.
        /// </summary>
        private decimal? _insuredPercentage = null;
		/// <summary>
        /// Atributo para la propiedad InsuredRate.
        /// </summary>
        private decimal? _insuredRate = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="riskId">RiskId key property.</param>
        /// <param name="insuredObjectId">InsuredObjectId key property.</param>
        public RiskInsuredObject(int riskId, int insuredObjectId) :
            this(RiskInsuredObject.CreatePrimaryKey(riskId, insuredObjectId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public RiskInsuredObject(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad RiskId.
        /// </summary>
        /// <value>Propiedad RiskId.</value>
        [
        DescriptionKey("RISK_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "RISK_ID", DbType = System.Data.DbType.String),
        ]
        public int RiskId
        {
            get
            {
                return (int)this._primaryKey[Properties.RiskId];
            }
            set
            {
                this._primaryKey[Properties.RiskId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad InsuredObjectId.
        /// </summary>
        /// <value>Propiedad InsuredObjectId.</value>
        [
        DescriptionKey("INSURED_OBJECT_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "INSURED_OBJECT_ID", DbType = System.Data.DbType.String),
        ]
        public int InsuredObjectId
        {
            get
            {
                return (int)this._primaryKey[Properties.InsuredObjectId];
            }
            set
            {
                this._primaryKey[Properties.InsuredObjectId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad InsuredValue.
        /// </summary>
        /// <value>Propiedad InsuredValue.</value>
        [
        DescriptionKey("INSURED_VALUE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "INSURED_VALUE", DbType = System.Data.DbType.Decimal),
        ]
        public decimal? InsuredValue
        {
            get
            {
                return this._insuredValue;
            }
            set
            {
                this._insuredValue = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad InsuredPercentage.
        /// </summary>
        /// <value>Propiedad InsuredPercentage.</value>
        [
        DescriptionKey("INSURED_PERCENTAGE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "INSURED_PCT", DbType = System.Data.DbType.Decimal),
        ]
        public decimal? InsuredPercentage
        {
            get
            {
                return this._insuredPercentage;
            }
            set
            {
                this._insuredPercentage = value;
            }
        }
		
		/// <summary>
        /// Devuelve o setea el valor de la propiedad InsuredPercentage.
        /// </summary>
        /// <value>Propiedad InsuredPercentage.</value>
        [
        DescriptionKey("INSURED_RATE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "INSURED_RATE", DbType = System.Data.DbType.Decimal),
        ]
        public decimal? InsuredRate
        {
            get
            {
                return this._insuredRate;
            }
            set
            {
                this._insuredRate = value;
            }
        }

    }
}