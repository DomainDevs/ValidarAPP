/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Issuance.EndorsementReason.dict v1.0
 * FileSize=6485 Header=256 CRC=3387135537
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.Issuance.Entities
{
    /// <summary>
    /// Definición de entidad EndorsementReason.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Issuance.EndorsementReason.dict"),
    Serializable(),
    DescriptionKey("ENDORSEMENT_REASON_ENTITY"),
    TableMap(TableName = "ENDORSEMENT_REASON", Schema = "ISS"),
    ]
    public partial class EndorsementReason :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string EndoReasonCode = "EndoReasonCode";
            public static readonly string EndoTypeCode = "EndoTypeCode";
            public static readonly string Description = "Description";
            public static readonly string SmallDescription = "SmallDescription";
            public static readonly string IsEnabled = "IsEnabled";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="endoReasonCode">Propiedad clave EndoReasonCode.</param>
        /// <param name="endoTypeCode">Propiedad clave EndoTypeCode.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int endoReasonCode, int endoTypeCode)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.EndoReasonCode, endoReasonCode);
            keys.Add(Properties.EndoTypeCode, endoTypeCode);

            return new PrimaryKey<T>(keys);
        }
        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.EndoReasonCode, null);
            keys.Add(Properties.EndoTypeCode, null);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="endoReasonCode">Propiedad clave EndoReasonCode.</param>
        /// <param name="endoTypeCode">Propiedad clave EndoTypeCode.</param>
        public static PrimaryKey CreatePrimaryKey(int endoReasonCode, int endoTypeCode)
        {
            return InternalCreatePrimaryKey<EndorsementReason>(endoReasonCode, endoTypeCode);
        }
        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<EndorsementReason>();
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad Description.
        /// </summary>
        private string _description = null;
        /// <summary>
        /// Atributo para la propiedad SmallDescription.
        /// </summary>
        private string _smallDescription = null;
        /// <summary>
        /// Atributo para la propiedad IsEnabled.
        /// </summary>
        private bool _isEnabled;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="endoReasonCode">EndoReasonCode key property.</param>
        /// <param name="endoTypeCode">EndoTypeCode key property.</param>
        public EndorsementReason(int endoReasonCode, int endoTypeCode) :
            this(EndorsementReason.CreatePrimaryKey(endoReasonCode, endoTypeCode), null)
        {
        }

        public EndorsementReason() :
         this(EndorsementReason.CreatePrimaryKey(), null)
        {
        }
        

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public EndorsementReason(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad EndoReasonCode.
        /// </summary>
        /// <value>Propiedad EndoReasonCode.</value>
        [
        DescriptionKey("ENDO_REASON_CODE_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "ENDO_REASON_CD", DbType = System.Data.DbType.String),
        ]
        public int EndoReasonCode
        {
            get
            {
                return (int)this._primaryKey[Properties.EndoReasonCode];
            }
            set
            {
                this._primaryKey[Properties.EndoReasonCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad EndoTypeCode.
        /// </summary>
        /// <value>Propiedad EndoTypeCode.</value>
        [
        DescriptionKey("ENDO_TYPE_CODE_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "ENDO_TYPE_CD", DbType = System.Data.DbType.String),
        ]
        public int EndoTypeCode
        {
            get
            {
                return (int)this._primaryKey[Properties.EndoTypeCode];
            }
            set
            {
                this._primaryKey[Properties.EndoTypeCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Description.
        /// </summary>
        /// <value>Propiedad Description.</value>
        [
        DescriptionKey("DESCRIPTION_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Description);
                }
                this._description = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad SmallDescription.
        /// </summary>
        /// <value>Propiedad SmallDescription.</value>
        [
        DescriptionKey("SMALL_DESCRIPTION_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "SMALL_DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string SmallDescription
        {
            get
            {
                return this._smallDescription;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.SmallDescription);
                }
                this._smallDescription = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IsEnabled.
        /// </summary>
        /// <value>Propiedad IsEnabled.</value>
        [
        DescriptionKey("IS_ENABLED_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "IS_ENABLED", DbType = System.Data.DbType.String),
        ]
        public bool IsEnabled
        {
            get
            {
                return this._isEnabled;
            }
            set
            {
                this._isEnabled = value;
            }
        }

    }
}