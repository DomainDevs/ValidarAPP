/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Events.CoHierarchyAssociation.dict v1.0
 * FileSize=7329 Header=278 CRC=1230389484
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.Events.Entities
{
    /// <summary>
    /// Definición de entidad CoHierarchyAssociation.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Events.CoHierarchyAssociation.dict"),
    Serializable(),
    DescriptionKey("CO_HIERARCHY_ASSOCIATION_ENTITY"),
    TableMap(TableName = "CO_HIERARCHY_ASSOCIATION", Schema = "UU"),
    ]
    public partial class CoHierarchyAssociation :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string ModuleCode = "ModuleCode";
            public static readonly string SubmoduleCode = "SubmoduleCode";
            public static readonly string HierarchyCode = "HierarchyCode";
            public static readonly string Description = "Description";
            public static readonly string ExclusionaryInd = "ExclusionaryInd";
            public static readonly string EnabledInd = "EnabledInd";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="moduleCode">Propiedad clave ModuleCode.</param>
        /// <param name="submoduleCode">Propiedad clave SubmoduleCode.</param>
        /// <param name="hierarchyCode">Propiedad clave HierarchyCode.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int moduleCode, int submoduleCode, int hierarchyCode)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.ModuleCode, moduleCode);
            keys.Add(Properties.SubmoduleCode, submoduleCode);
            keys.Add(Properties.HierarchyCode, hierarchyCode);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="moduleCode">Propiedad clave ModuleCode.</param>
        /// <param name="submoduleCode">Propiedad clave SubmoduleCode.</param>
        /// <param name="hierarchyCode">Propiedad clave HierarchyCode.</param>
        public static PrimaryKey CreatePrimaryKey(int moduleCode, int submoduleCode, int hierarchyCode)
        {
            return InternalCreatePrimaryKey<CoHierarchyAssociation>(moduleCode, submoduleCode, hierarchyCode);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad Description.
        /// </summary>
        private string _description = null;
        /// <summary>
        /// Atributo para la propiedad ExclusionaryInd.
        /// </summary>
        private bool _exclusionaryInd;
        /// <summary>
        /// Atributo para la propiedad EnabledInd.
        /// </summary>
        private bool _enabledInd;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="moduleCode">ModuleCode key property.</param>
        /// <param name="submoduleCode">SubmoduleCode key property.</param>
        /// <param name="hierarchyCode">HierarchyCode key property.</param>
        public CoHierarchyAssociation(int moduleCode, int submoduleCode, int hierarchyCode) :
            this(CoHierarchyAssociation.CreatePrimaryKey(moduleCode, submoduleCode, hierarchyCode), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public CoHierarchyAssociation(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad ModuleCode.
        /// </summary>
        /// <value>Propiedad ModuleCode.</value>
        [
        DescriptionKey("MODULE_CODE_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "MODULE_CD", DbType = System.Data.DbType.String),
        ]
        public int ModuleCode
        {
            get
            {
                return (int)this._primaryKey[Properties.ModuleCode];
            }
            set
            {
                this._primaryKey[Properties.ModuleCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad SubmoduleCode.
        /// </summary>
        /// <value>Propiedad SubmoduleCode.</value>
        [
        DescriptionKey("SUBMODULE_CODE_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "SUBMODULE_CD", DbType = System.Data.DbType.String),
        ]
        public int SubmoduleCode
        {
            get
            {
                return (int)this._primaryKey[Properties.SubmoduleCode];
            }
            set
            {
                this._primaryKey[Properties.SubmoduleCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad HierarchyCode.
        /// </summary>
        /// <value>Propiedad HierarchyCode.</value>
        [
        DescriptionKey("HIERARCHY_CODE_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "HIERARCHY_CD", DbType = System.Data.DbType.String),
        ]
        public int HierarchyCode
        {
            get
            {
                return (int)this._primaryKey[Properties.HierarchyCode];
            }
            set
            {
                this._primaryKey[Properties.HierarchyCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Description.
        /// </summary>
        /// <value>Propiedad Description.</value>
        [
        DescriptionKey("DESCRIPTION_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Description);
                }
                this._description = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ExclusionaryInd.
        /// </summary>
        /// <value>Propiedad ExclusionaryInd.</value>
        [
        DescriptionKey("EXCLUSIONARY_IND_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "EXCLUSIONARY_IND", DbType = System.Data.DbType.String),
        ]
        public bool ExclusionaryInd
        {
            get
            {
                return this._exclusionaryInd;
            }
            set
            {
                this._exclusionaryInd = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad EnabledInd.
        /// </summary>
        /// <value>Propiedad EnabledInd.</value>
        [
        DescriptionKey("ENABLED_IND_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "ENABLED_IND", DbType = System.Data.DbType.String),
        ]
        public bool EnabledInd
        {
            get
            {
                return this._enabledInd;
            }
            set
            {
                this._enabledInd = value;
            }
        }

    }
}