/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Events.CoEventComparisonType.dict v1.0
 * FileSize=8133 Header=277 CRC=1142808572
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.Events.Entities
{
    /// <summary>
    /// Definición de entidad CoEventComparisonType.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Events.CoEventComparisonType.dict"),
    Serializable(),
    DescriptionKey("CO_EVENT_COMPARISON_TYPE_ENTITY"),
    TableMap(TableName = "CO_EVENT_COMPARISON_TYPE", Schema = "EVE"),
    ]
    public partial class CoEventComparisonType :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string ComparatorCode = "ComparatorCode";
            public static readonly string Description = "Description";
            public static readonly string SmallDesc = "SmallDesc";
            public static readonly string Symbol = "Symbol";
            public static readonly string TextInd = "TextInd";
            public static readonly string ComboInd = "ComboInd";
            public static readonly string QueryInd = "QueryInd";
            public static readonly string NumValues = "NumValues";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="comparatorCode">Propiedad clave ComparatorCode.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int comparatorCode)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.ComparatorCode, comparatorCode);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="comparatorCode">Propiedad clave ComparatorCode.</param>
        public static PrimaryKey CreatePrimaryKey(int comparatorCode)
        {
            return InternalCreatePrimaryKey<CoEventComparisonType>(comparatorCode);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad Description.
        /// </summary>
        private string _description = null;
        /// <summary>
        /// Atributo para la propiedad SmallDesc.
        /// </summary>
        private string _smallDesc = null;
        /// <summary>
        /// Atributo para la propiedad Symbol.
        /// </summary>
        private string _symbol = null;
        /// <summary>
        /// Atributo para la propiedad TextInd.
        /// </summary>
        private bool _textInd;
        /// <summary>
        /// Atributo para la propiedad ComboInd.
        /// </summary>
        private bool _comboInd;
        /// <summary>
        /// Atributo para la propiedad QueryInd.
        /// </summary>
        private bool _queryInd;
        /// <summary>
        /// Atributo para la propiedad NumValues.
        /// </summary>
        private decimal _numValues;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="comparatorCode">ComparatorCode key property.</param>
        public CoEventComparisonType(int comparatorCode) :
            this(CoEventComparisonType.CreatePrimaryKey(comparatorCode), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public CoEventComparisonType(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad ComparatorCode.
        /// </summary>
        /// <value>Propiedad ComparatorCode.</value>
        [
        DescriptionKey("COMPARATOR_CODE_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "COMPARATOR_CD", DbType = System.Data.DbType.String),
        ]
        public int ComparatorCode
        {
            get
            {
                return (int)this._primaryKey[Properties.ComparatorCode];
            }
            set
            {
                this._primaryKey[Properties.ComparatorCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Description.
        /// </summary>
        /// <value>Propiedad Description.</value>
        [
        DescriptionKey("DESCRIPTION_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Description);
                }
                this._description = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad SmallDesc.
        /// </summary>
        /// <value>Propiedad SmallDesc.</value>
        [
        DescriptionKey("SMALL_DESC_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "SMALL_DESC", DbType = System.Data.DbType.String),
        ]
        public string SmallDesc
        {
            get
            {
                return this._smallDesc;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.SmallDesc);
                }
                this._smallDesc = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Symbol.
        /// </summary>
        /// <value>Propiedad Symbol.</value>
        [
        DescriptionKey("SYMBOL_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "SYMBOL", DbType = System.Data.DbType.String),
        ]
        public string Symbol
        {
            get
            {
                return this._symbol;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Symbol);
                }
                this._symbol = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad TextInd.
        /// </summary>
        /// <value>Propiedad TextInd.</value>
        [
        DescriptionKey("TEXT_IND_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "TEXT_IND", DbType = System.Data.DbType.String),
        ]
        public bool TextInd
        {
            get
            {
                return this._textInd;
            }
            set
            {
                this._textInd = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ComboInd.
        /// </summary>
        /// <value>Propiedad ComboInd.</value>
        [
        DescriptionKey("COMBO_IND_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "COMBO_IND", DbType = System.Data.DbType.String),
        ]
        public bool ComboInd
        {
            get
            {
                return this._comboInd;
            }
            set
            {
                this._comboInd = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad QueryInd.
        /// </summary>
        /// <value>Propiedad QueryInd.</value>
        [
        DescriptionKey("QUERY_IND_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "QUERY_IND", DbType = System.Data.DbType.String),
        ]
        public bool QueryInd
        {
            get
            {
                return this._queryInd;
            }
            set
            {
                this._queryInd = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad NumValues.
        /// </summary>
        /// <value>Propiedad NumValues.</value>
        [
        DescriptionKey("NUM_VALUES_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "NUM_VALUES", DbType = System.Data.DbType.Decimal),
        ]
        public decimal NumValues
        {
            get
            {
                return this._numValues;
            }
            set
            {
                this._numValues = value;
            }
        }

    }
}