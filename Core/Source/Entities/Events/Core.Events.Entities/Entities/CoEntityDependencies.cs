/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Events.CoEntityDependencies.dict v1.0
 * FileSize=5783 Header=279 CRC=2475775362
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.Events.Entities
{
    /// <summary>
    /// Definición de entidad CoEntityDependencies.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Events.CoEntityDependencies.dict"),
    Serializable(),
    DescriptionKey("CO_ENTITY_DEPENDENCIES_ENTITY"),
    TableMap(TableName = "CO_ENTITY_DEPENDENCIES", Schema = "EVE"),
    ]
    public partial class CoEntityDependencies :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string ConditionId = "ConditionId";
            public static readonly string EntityId = "EntityId";
            public static readonly string DependsId = "DependsId";
            public static readonly string ColumnName = "ColumnName";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="conditionId">Propiedad clave ConditionId.</param>
        /// <param name="entityId">Propiedad clave EntityId.</param>
        /// <param name="dependsId">Propiedad clave DependsId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int conditionId, int entityId, int dependsId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.ConditionId, conditionId);
            keys.Add(Properties.EntityId, entityId);
            keys.Add(Properties.DependsId, dependsId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="conditionId">Propiedad clave ConditionId.</param>
        /// <param name="entityId">Propiedad clave EntityId.</param>
        /// <param name="dependsId">Propiedad clave DependsId.</param>
        public static PrimaryKey CreatePrimaryKey(int conditionId, int entityId, int dependsId)
        {
            return InternalCreatePrimaryKey<CoEntityDependencies>(conditionId, entityId, dependsId);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad ColumnName.
        /// </summary>
        private string _columnName = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="conditionId">ConditionId key property.</param>
        /// <param name="entityId">EntityId key property.</param>
        /// <param name="dependsId">DependsId key property.</param>
        public CoEntityDependencies(int conditionId, int entityId, int dependsId) :
            this(CoEntityDependencies.CreatePrimaryKey(conditionId, entityId, dependsId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public CoEntityDependencies(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad ConditionId.
        /// </summary>
        /// <value>Propiedad ConditionId.</value>
        [
        DescriptionKey("CONDITION_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "CONDITION_ID", DbType = System.Data.DbType.String),
        ]
        public int ConditionId
        {
            get
            {
                return (int)this._primaryKey[Properties.ConditionId];
            }
            set
            {
                this._primaryKey[Properties.ConditionId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad EntityId.
        /// </summary>
        /// <value>Propiedad EntityId.</value>
        [
        DescriptionKey("ENTITY_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "ENTITY_ID", DbType = System.Data.DbType.String),
        ]
        public int EntityId
        {
            get
            {
                return (int)this._primaryKey[Properties.EntityId];
            }
            set
            {
                this._primaryKey[Properties.EntityId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad DependsId.
        /// </summary>
        /// <value>Propiedad DependsId.</value>
        [
        DescriptionKey("DEPENDS_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "DEPENDS_ID", DbType = System.Data.DbType.String),
        ]
        public int DependsId
        {
            get
            {
                return (int)this._primaryKey[Properties.DependsId];
            }
            set
            {
                this._primaryKey[Properties.DependsId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ColumnName.
        /// </summary>
        /// <value>Propiedad ColumnName.</value>
        [
        DescriptionKey("COLUMN_NAME_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "COLUMN_NAME", DbType = System.Data.DbType.String),
        ]
        public string ColumnName
        {
            get
            {
                return this._columnName;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.ColumnName);
                }
                this._columnName = value;
            }
        }

    }
}