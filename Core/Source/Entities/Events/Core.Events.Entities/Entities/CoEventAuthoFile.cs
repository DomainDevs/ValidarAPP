/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Events.CoEventAuthoFile.dict v1.0
 * FileSize=5523 Header=272 CRC=1878759445
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.Events.Entities
{
    /// <summary>
    /// Definición de entidad CoEventAuthoFile.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Events.CoEventAuthoFile.dict"),
    Serializable(),
    DescriptionKey("CO_EVENT_AUTHO_FILE_ENTITY"),
    TableMap(TableName = "CO_EVENT_AUTHO_FILE", Schema = "EVE"),
    ]
    public partial class CoEventAuthoFile :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string AuthorizationId = "AuthorizationId";
            public static readonly string FileId = "FileId";
            public static readonly string FilePath = "FilePath";
            public static readonly string FileName = "FileName";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="authorizationId">Propiedad clave AuthorizationId.</param>
        /// <param name="fileId">Propiedad clave FileId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int authorizationId, int fileId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.AuthorizationId, authorizationId);
            keys.Add(Properties.FileId, fileId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="authorizationId">Propiedad clave AuthorizationId.</param>
        /// <param name="fileId">Propiedad clave FileId.</param>
        public static PrimaryKey CreatePrimaryKey(int authorizationId, int fileId)
        {
            return InternalCreatePrimaryKey<CoEventAuthoFile>(authorizationId, fileId);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad FilePath.
        /// </summary>
        private string _filePath = null;
        /// <summary>
        /// Atributo para la propiedad FileName.
        /// </summary>
        private string _fileName = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="authorizationId">AuthorizationId key property.</param>
        /// <param name="fileId">FileId key property.</param>
        public CoEventAuthoFile(int authorizationId, int fileId) :
            this(CoEventAuthoFile.CreatePrimaryKey(authorizationId, fileId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public CoEventAuthoFile(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad AuthorizationId.
        /// </summary>
        /// <value>Propiedad AuthorizationId.</value>
        [
        DescriptionKey("AUTHORIZATION_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "AUTHORIZATION_ID", DbType = System.Data.DbType.String),
        ]
        public int AuthorizationId
        {
            get
            {
                return (int)this._primaryKey[Properties.AuthorizationId];
            }
            set
            {
                this._primaryKey[Properties.AuthorizationId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad FileId.
        /// </summary>
        /// <value>Propiedad FileId.</value>
        [
        DescriptionKey("FILE_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "FILE_ID", DbType = System.Data.DbType.String),
        ]
        public int FileId
        {
            get
            {
                return (int)this._primaryKey[Properties.FileId];
            }
            set
            {
                this._primaryKey[Properties.FileId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad FilePath.
        /// </summary>
        /// <value>Propiedad FilePath.</value>
        [
        DescriptionKey("FILE_PATH_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "FILE_PATH", DbType = System.Data.DbType.String),
        ]
        public string FilePath
        {
            get
            {
                return this._filePath;
            }
            set
            {
                this._filePath = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad FileName.
        /// </summary>
        /// <value>Propiedad FileName.</value>
        [
        DescriptionKey("FILE_NAME_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "FILE_NAME", DbType = System.Data.DbType.String),
        ]
        public string FileName
        {
            get
            {
                return this._fileName;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.FileName);
                }
                this._fileName = value;
            }
        }

    }
}