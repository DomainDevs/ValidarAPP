/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Script.ConceptDependencies.dict v1.0
 * FileSize=7334 Header=256 CRC=2724790001
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.Script.Entities
{
    /// <summary>
    /// Definición de entidad ConceptDependencies.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Script.ConceptDependencies.dict"),
    Serializable(),
    DescriptionKey("CONCEPT_DEPENDENCIES_ENTITY"),
    TableMap(TableName = "CONCEPT_DEPENDENCIES", Schema = "SCR"),
    ]
    public partial class ConceptDependencies :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string DependencyId = "DependencyId";
            public static readonly string ConceptId = "ConceptId";
            public static readonly string EntityId = "EntityId";
            public static readonly string DependsConceptId = "DependsConceptId";
            public static readonly string DependsEntityId = "DependsEntityId";
            public static readonly string DependsOrder = "DependsOrder";
            public static readonly string ColumnName = "ColumnName";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="dependencyId">Propiedad clave DependencyId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int dependencyId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.DependencyId, dependencyId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="dependencyId">Propiedad clave DependencyId.</param>
        public static PrimaryKey CreatePrimaryKey(int dependencyId)
        {
            return InternalCreatePrimaryKey<ConceptDependencies>(dependencyId);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad ConceptId.
        /// </summary>
        private int _conceptId;
        /// <summary>
        /// Atributo para la propiedad EntityId.
        /// </summary>
        private int _entityId;
        /// <summary>
        /// Atributo para la propiedad DependsConceptId.
        /// </summary>
        private int _dependsConceptId;
        /// <summary>
        /// Atributo para la propiedad DependsEntityId.
        /// </summary>
        private int _dependsEntityId;
        /// <summary>
        /// Atributo para la propiedad DependsOrder.
        /// </summary>
        private int _dependsOrder;
        /// <summary>
        /// Atributo para la propiedad ColumnName.
        /// </summary>
        private string _columnName = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="dependencyId">DependencyId key property.</param>
        public ConceptDependencies(int dependencyId) :
            this(ConceptDependencies.CreatePrimaryKey(dependencyId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public ConceptDependencies(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad DependencyId.
        /// </summary>
        /// <value>Propiedad DependencyId.</value>
        [
        DescriptionKey("DEPENDENCY_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "DEPENDENCY_ID", DbType = System.Data.DbType.String),
        ]
        public int DependencyId
        {
            get
            {
                return (int)this._primaryKey[Properties.DependencyId];
            }
            set
            {
                this._primaryKey[Properties.DependencyId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ConceptId.
        /// </summary>
        /// <value>Propiedad ConceptId.</value>
        [
        DescriptionKey("CONCEPT_ID_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "CONCEPT_ID", DbType = System.Data.DbType.String),
        ]
        public int ConceptId
        {
            get
            {
                return this._conceptId;
            }
            set
            {
                this._conceptId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad EntityId.
        /// </summary>
        /// <value>Propiedad EntityId.</value>
        [
        DescriptionKey("ENTITY_ID_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "ENTITY_ID", DbType = System.Data.DbType.String),
        ]
        public int EntityId
        {
            get
            {
                return this._entityId;
            }
            set
            {
                this._entityId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad DependsConceptId.
        /// </summary>
        /// <value>Propiedad DependsConceptId.</value>
        [
        DescriptionKey("DEPENDS_CONCEPT_ID_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "DEPENDS_CONCEPT_ID", DbType = System.Data.DbType.String),
        ]
        public int DependsConceptId
        {
            get
            {
                return this._dependsConceptId;
            }
            set
            {
                this._dependsConceptId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad DependsEntityId.
        /// </summary>
        /// <value>Propiedad DependsEntityId.</value>
        [
        DescriptionKey("DEPENDS_ENTITY_ID_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "DEPENDS_ENTITY_ID", DbType = System.Data.DbType.String),
        ]
        public int DependsEntityId
        {
            get
            {
                return this._dependsEntityId;
            }
            set
            {
                this._dependsEntityId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad DependsOrder.
        /// </summary>
        /// <value>Propiedad DependsOrder.</value>
        [
        DescriptionKey("DEPENDS_ORDER_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "DEPENDS_ORDER", DbType = System.Data.DbType.String),
        ]
        public int DependsOrder
        {
            get
            {
                return this._dependsOrder;
            }
            set
            {
                this._dependsOrder = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ColumnName.
        /// </summary>
        /// <value>Propiedad ColumnName.</value>
        [
        DescriptionKey("COLUMN_NAME_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "COLUMN_NAME", DbType = System.Data.DbType.String),
        ]
        public string ColumnName
        {
            get
            {
                return this._columnName;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.ColumnName);
                }
                this._columnName = value;
            }
        }

    }
}