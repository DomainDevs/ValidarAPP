/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Temporary.TempJson.dict v1.0
 * FileSize=7676 Header=248 CRC=3565384048
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.Temporary.Entities
{
    /// <summary>
    /// Definición de entidad TempJson.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Temporary.TempJson.dict"),
    Serializable(),
    DescriptionKey("TEMP_JSON_ENTITY"),
    TableMap(TableName = "TEMP_JSON", Schema = "TMP"),
    ]
    public partial class TempJson :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string TempId = "TempId";
            public static readonly string UserId = "UserId";
            public static readonly string TempType = "TempType";
            public static readonly string Holder = "Holder";
            public static readonly string Emission = "Emission";
            public static readonly string EmissionTexts = "EmissionTexts";
            public static readonly string Risk = "Risk";
            public static readonly string Coverage = "Coverage";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="tempId">Propiedad clave TempId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int tempId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.TempId, tempId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="tempId">Propiedad clave TempId.</param>
        public static PrimaryKey CreatePrimaryKey(int tempId)
        {
            return InternalCreatePrimaryKey<TempJson>(tempId);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad UserId.
        /// </summary>
        private int _userId;
        /// <summary>
        /// Atributo para la propiedad TempType.
        /// </summary>
        private int _tempType;
        /// <summary>
        /// Atributo para la propiedad Holder.
        /// </summary>
        private string _holder = null;
        /// <summary>
        /// Atributo para la propiedad Emission.
        /// </summary>
        private string _emission = null;
        /// <summary>
        /// Atributo para la propiedad EmissionTexts.
        /// </summary>
        private string _emissionTexts = null;
        /// <summary>
        /// Atributo para la propiedad Risk.
        /// </summary>
        private string _risk = null;
        /// <summary>
        /// Atributo para la propiedad Coverage.
        /// </summary>
        private string _coverage = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="tempId">TempId key property.</param>
        public TempJson(int tempId) :
            this(TempJson.CreatePrimaryKey(tempId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public TempJson(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad TempId.
        /// </summary>
        /// <value>Propiedad TempId.</value>
        [
        DescriptionKey("TEMP_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "TEMP_ID", DbType = System.Data.DbType.String),
        ]
        public int TempId
        {
            get
            {
                return (int)this._primaryKey[Properties.TempId];
            }
            set
            {
                this._primaryKey[Properties.TempId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad UserId.
        /// </summary>
        /// <value>Propiedad UserId.</value>
        [
        DescriptionKey("USER_ID_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "USER_ID", DbType = System.Data.DbType.String),
        ]
        public int UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                this._userId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad TempType.
        /// </summary>
        /// <value>Propiedad TempType.</value>
        [
        DescriptionKey("TEMP_TYPE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "TEMP_TYPE", DbType = System.Data.DbType.String),
        ]
        public int TempType
        {
            get
            {
                return this._tempType;
            }
            set
            {
                this._tempType = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Holder.
        /// </summary>
        /// <value>Propiedad Holder.</value>
        [
        DescriptionKey("HOLDER_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "HOLDER", DbType = System.Data.DbType.String),
        ]
        public string Holder
        {
            get
            {
                return this._holder;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Holder);
                }
                this._holder = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Emission.
        /// </summary>
        /// <value>Propiedad Emission.</value>
        [
        DescriptionKey("EMISSION_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "EMISSION", DbType = System.Data.DbType.String),
        ]
        public string Emission
        {
            get
            {
                return this._emission;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Emission);
                }
                this._emission = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad EmissionTexts.
        /// </summary>
        /// <value>Propiedad EmissionTexts.</value>
        [
        DescriptionKey("EMISSION_TEXTS_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "EMISSION_TEXTS", DbType = System.Data.DbType.String),
        ]
        public string EmissionTexts
        {
            get
            {
                return this._emissionTexts;
            }
            set
            {
                this._emissionTexts = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Risk.
        /// </summary>
        /// <value>Propiedad Risk.</value>
        [
        DescriptionKey("RISK_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "RISK", DbType = System.Data.DbType.String),
        ]
        public string Risk
        {
            get
            {
                return this._risk;
            }
            set
            {
                this._risk = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Coverage.
        /// </summary>
        /// <value>Propiedad Coverage.</value>
        [
        DescriptionKey("COVERAGE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "COVERAGE", DbType = System.Data.DbType.String),
        ]
        public string Coverage
        {
            get
            {
                return this._coverage;
            }
            set
            {
                this._coverage = value;
            }
        }

    }
}