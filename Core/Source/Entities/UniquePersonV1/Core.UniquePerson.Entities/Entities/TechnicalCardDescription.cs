/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.UniquePersonV1.TechnicalCardDescription.dict v1.0
 * FileSize=6749 Header=266 CRC=703900556
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.UniquePersonV1.Entities
{
    /// <summary>
    /// Definición de entidad TechnicalCardDescription.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.UniquePersonV1.TechnicalCardDescription.dict"),
    Serializable(),
    DescriptionKey("TECHNICAL_CARD_DESCRIPTION_ENTITY"),
    TableMap(TableName = "TECHNICAL_CARD_DESCRIPTION", Schema = "UP"),
    ]
    public partial class TechnicalCardDescription :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string TechnicalCardDescriptionCode = "TechnicalCardDescriptionCode";
            public static readonly string TechnicalCardId = "TechnicalCardId";
            public static readonly string DescriptionDate = "DescriptionDate";
            public static readonly string Description = "Description";
            public static readonly string UserId = "UserId";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="technicalCardDescriptionCode">Propiedad clave TechnicalCardDescriptionCode.</param>
        /// <param name="technicalCardId">Propiedad clave TechnicalCardId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int technicalCardDescriptionCode, int technicalCardId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.TechnicalCardDescriptionCode, technicalCardDescriptionCode);
            keys.Add(Properties.TechnicalCardId, technicalCardId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="technicalCardDescriptionCode">Propiedad clave TechnicalCardDescriptionCode.</param>
        /// <param name="technicalCardId">Propiedad clave TechnicalCardId.</param>
        public static PrimaryKey CreatePrimaryKey(int technicalCardDescriptionCode, int technicalCardId)
        {
            return InternalCreatePrimaryKey<TechnicalCardDescription>(technicalCardDescriptionCode, technicalCardId);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad DescriptionDate.
        /// </summary>
        private DateTime _descriptionDate;
        /// <summary>
        /// Atributo para la propiedad Description.
        /// </summary>
        private string _description = null;
        /// <summary>
        /// Atributo para la propiedad UserId.
        /// </summary>
        private int _userId;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="technicalCardDescriptionCode">TechnicalCardDescriptionCode key property.</param>
        /// <param name="technicalCardId">TechnicalCardId key property.</param>
        public TechnicalCardDescription(int technicalCardDescriptionCode, int technicalCardId) :
            this(TechnicalCardDescription.CreatePrimaryKey(technicalCardDescriptionCode, technicalCardId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public TechnicalCardDescription(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad TechnicalCardDescriptionCode.
        /// </summary>
        /// <value>Propiedad TechnicalCardDescriptionCode.</value>
        [
        DescriptionKey("TECHNICAL_CARD_DESCRIPTION_CODE_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "TECHNICAL_CARD_DESCRIPTION_CD", DbType = System.Data.DbType.String),
        ]
        public int TechnicalCardDescriptionCode
        {
            get
            {
                return (int)this._primaryKey[Properties.TechnicalCardDescriptionCode];
            }
            set
            {
                this._primaryKey[Properties.TechnicalCardDescriptionCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad TechnicalCardId.
        /// </summary>
        /// <value>Propiedad TechnicalCardId.</value>
        [
        DescriptionKey("TECHNICAL_CARD_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "TECHNICAL_CARD_ID", DbType = System.Data.DbType.String),
        ]
        public int TechnicalCardId
        {
            get
            {
                return (int)this._primaryKey[Properties.TechnicalCardId];
            }
            set
            {
                this._primaryKey[Properties.TechnicalCardId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad DescriptionDate.
        /// </summary>
        /// <value>Propiedad DescriptionDate.</value>
        [
        DescriptionKey("DESCRIPTION_DATE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "DESCRIPTION_DATE", DbType = System.Data.DbType.String),
        ]
        public DateTime DescriptionDate
        {
            get
            {
                return this._descriptionDate;
            }
            set
            {
                this._descriptionDate = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Description.
        /// </summary>
        /// <value>Propiedad Description.</value>
        [
        DescriptionKey("DESCRIPTION_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Description);
                }
                this._description = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad UserId.
        /// </summary>
        /// <value>Propiedad UserId.</value>
        [
        DescriptionKey("USER_ID_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "USER_ID", DbType = System.Data.DbType.String),
        ]
        public int UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                this._userId = value;
            }
        }

    }
}