/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.UniquePersonV1.OperatingQuota.dict v1.0
 * FileSize=6577 Header=257 CRC=3141576901
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.UniquePersonV1.Entities
{
    /// <summary>
    /// Definición de entidad OperatingQuota.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.UniquePersonV1.OperatingQuota.dict"),
    Serializable(),
    DescriptionKey("OPERATING_QUOTA_ENTITY"),
    TableMap(TableName="OPERATING_QUOTA", Schema="UP"),
    ]
    public partial class OperatingQuota :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string IndividualId = "IndividualId";
			public static readonly string LineBusinessCode = "LineBusinessCode";
			public static readonly string CurrencyCode = "CurrencyCode";
			public static readonly string OperatingQuotaAmount = "OperatingQuotaAmount";
			public static readonly string CurrentTo = "CurrentTo";
		}

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="individualId">Propiedad clave IndividualId.</param>
		/// <param name="lineBusinessCode">Propiedad clave LineBusinessCode.</param>
		/// <param name="currencyCode">Propiedad clave CurrencyCode.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>(int individualId, int lineBusinessCode, int currencyCode)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.IndividualId, individualId);
		    keys.Add(Properties.LineBusinessCode, lineBusinessCode);
		    keys.Add(Properties.CurrencyCode, currencyCode);

		    return new PrimaryKey<T>(keys);
	    }

		/// <summary>
		/// Crea una clave primaria para esta clase.
		/// </summary>
		/// <param name="individualId">Propiedad clave IndividualId.</param>
		/// <param name="lineBusinessCode">Propiedad clave LineBusinessCode.</param>
		/// <param name="currencyCode">Propiedad clave CurrencyCode.</param>
		public static PrimaryKey CreatePrimaryKey(int individualId, int lineBusinessCode, int currencyCode)
	    {
			return InternalCreatePrimaryKey<OperatingQuota>(individualId, lineBusinessCode, currencyCode);
		}
#endregion

	    //*** Object Attributes ********************************

		/// <summary>
		/// Atributo para la propiedad OperatingQuotaAmount.
		/// </summary>
        private decimal _operatingQuotaAmount;
		/// <summary>
		/// Atributo para la propiedad CurrentTo.
		/// </summary>
        private DateTime _currentTo;
	    //*** Object Constructors ********************************

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="individualId">IndividualId key property.</param>
		/// <param name="lineBusinessCode">LineBusinessCode key property.</param>
		/// <param name="currencyCode">CurrencyCode key property.</param>
	    public OperatingQuota(int individualId, int lineBusinessCode, int currencyCode):
			this(OperatingQuota.CreatePrimaryKey(individualId, lineBusinessCode, currencyCode), null)
	    {
	    }

		/// <summary>
		/// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
		/// </summary>
		/// <param name="key">
		/// Identificador de la instancia de la entidad.
		/// </param>
		/// <param name="initialValues">
		/// Valores para establecer el estado de la instancia.
		/// </param>
	    public OperatingQuota(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad IndividualId.
		/// </summary>
		/// <value>Propiedad IndividualId.</value>
	    [
		DescriptionKey("INDIVIDUAL_ID_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="INDIVIDUAL_ID", DbType=System.Data.DbType.String),
	    ]
        public int IndividualId
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.IndividualId];
		    }
		    set
		    {
				this._primaryKey[Properties.IndividualId] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad LineBusinessCode.
		/// </summary>
		/// <value>Propiedad LineBusinessCode.</value>
	    [
		DescriptionKey("LINE_BUSINESS_CODE_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="LINE_BUSINESS_CD", DbType=System.Data.DbType.String),
	    ]
        public int LineBusinessCode
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.LineBusinessCode];
		    }
		    set
		    {
				this._primaryKey[Properties.LineBusinessCode] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad CurrencyCode.
		/// </summary>
		/// <value>Propiedad CurrencyCode.</value>
	    [
		DescriptionKey("CURRENCY_CODE_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="CURRENCY_CD", DbType=System.Data.DbType.String),
	    ]
        public int CurrencyCode
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.CurrencyCode];
		    }
		    set
		    {
				this._primaryKey[Properties.CurrencyCode] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad OperatingQuotaAmount.
		/// </summary>
		/// <value>Propiedad OperatingQuotaAmount.</value>
	    [
		DescriptionKey("OPERATING_QUOTA_AMOUNT_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="OPERATING_QUOTA_AMT", DbType=System.Data.DbType.Decimal),
	    ]
        public decimal OperatingQuotaAmount
	    {
		    get
		    {
			    return this._operatingQuotaAmount;
		    }
		    set
		    {
				this._operatingQuotaAmount = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad CurrentTo.
		/// </summary>
		/// <value>Propiedad CurrentTo.</value>
	    [
		DescriptionKey("CURRENT_TO_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="CURRENT_TO", DbType=System.Data.DbType.String),
	    ]
        public DateTime CurrentTo
	    {
		    get
		    {
			    return this._currentTo;
		    }
		    set
		    {
				this._currentTo = value;
			}
	    }

    }
}