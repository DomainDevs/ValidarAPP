/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.UniquePersonV1.RiskMaintenance.dict v1.0
 * FileSize=7343 Header=256 CRC=45612037
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.UniquePersonV1.Entities
{
    /// <summary>
    /// Definición de entidad RiskMaintenance.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.UniquePersonV1.RiskMaintenance.dict"),
    Serializable(),
    DescriptionKey("RISK_MAINTENANCE_ENTITY"),
    TableMap(TableName = "RISK_MAINTENANCE", Schema = "UP"),
    ]
    public partial class RiskMaintenance :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string IdCardNo = "IdCardNo";
            public static readonly string IdCardTypeCode = "IdCardTypeCode";
            public static readonly string PersonName = "PersonName";
            public static readonly string Surname = "Surname";
            public static readonly string Nickname = "Nickname";
            public static readonly string BirthDate = "BirthDate";
            public static readonly string Age = "Age";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="idCardNo">Propiedad clave IdCardNo.</param>
        /// <param name="idCardTypeCode">Propiedad clave IdCardTypeCode.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(string idCardNo, int idCardTypeCode)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.IdCardNo, idCardNo);
            keys.Add(Properties.IdCardTypeCode, idCardTypeCode);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="idCardNo">Propiedad clave IdCardNo.</param>
        /// <param name="idCardTypeCode">Propiedad clave IdCardTypeCode.</param>
        public static PrimaryKey CreatePrimaryKey(string idCardNo, int idCardTypeCode)
        {
            return InternalCreatePrimaryKey<RiskMaintenance>(idCardNo, idCardTypeCode);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad PersonName.
        /// </summary>
        private string _personName = null;
        /// <summary>
        /// Atributo para la propiedad Surname.
        /// </summary>
        private string _surname = null;
        /// <summary>
        /// Atributo para la propiedad Nickname.
        /// </summary>
        private string _nickname = null;
        /// <summary>
        /// Atributo para la propiedad BirthDate.
        /// </summary>
        private DateTime? _birthDate = null;
        /// <summary>
        /// Atributo para la propiedad Age.
        /// </summary>
        private int? _age = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="idCardNo">IdCardNo key property.</param>
        /// <param name="idCardTypeCode">IdCardTypeCode key property.</param>
        public RiskMaintenance(string idCardNo, int idCardTypeCode) :
            this(RiskMaintenance.CreatePrimaryKey(idCardNo, idCardTypeCode), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public RiskMaintenance(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad IdCardNo.
        /// </summary>
        /// <value>Propiedad IdCardNo.</value>
        [
        DescriptionKey("ID_CARD_NO_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "ID_CARD_NO", DbType = System.Data.DbType.String),
        ]
        public string IdCardNo
        {
            get
            {
                return (string)this._primaryKey[Properties.IdCardNo];
            }
            set
            {
                this._primaryKey[Properties.IdCardNo] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IdCardTypeCode.
        /// </summary>
        /// <value>Propiedad IdCardTypeCode.</value>
        [
        DescriptionKey("ID_CARD_TYPE_CODE_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "ID_CARD_TYPE_CD", DbType = System.Data.DbType.String),
        ]
        public int IdCardTypeCode
        {
            get
            {
                return (int)this._primaryKey[Properties.IdCardTypeCode];
            }
            set
            {
                this._primaryKey[Properties.IdCardTypeCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad PersonName.
        /// </summary>
        /// <value>Propiedad PersonName.</value>
        [
        DescriptionKey("PERSON_NAME_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "PERSON_NAME", DbType = System.Data.DbType.String),
        ]
        public string PersonName
        {
            get
            {
                return this._personName;
            }
            set
            {
                this._personName = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Surname.
        /// </summary>
        /// <value>Propiedad Surname.</value>
        [
        DescriptionKey("SURNAME_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "SURNAME", DbType = System.Data.DbType.String),
        ]
        public string Surname
        {
            get
            {
                return this._surname;
            }
            set
            {
                this._surname = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Nickname.
        /// </summary>
        /// <value>Propiedad Nickname.</value>
        [
        DescriptionKey("NICKNAME_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "NICKNAME", DbType = System.Data.DbType.String),
        ]
        public string Nickname
        {
            get
            {
                return this._nickname;
            }
            set
            {
                this._nickname = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad BirthDate.
        /// </summary>
        /// <value>Propiedad BirthDate.</value>
        [
        DescriptionKey("BIRTH_DATE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "BIRTH_DATE", DbType = System.Data.DbType.String),
        ]
        public DateTime? BirthDate
        {
            get
            {
                return this._birthDate;
            }
            set
            {
                this._birthDate = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Age.
        /// </summary>
        /// <value>Propiedad Age.</value>
        [
        DescriptionKey("AGE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "AGE", DbType = System.Data.DbType.String),
        ]
        public int? Age
        {
            get
            {
                return this._age;
            }
            set
            {
                this._age = value;
            }
        }

    }
}