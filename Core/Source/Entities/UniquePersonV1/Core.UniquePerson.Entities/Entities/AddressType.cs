/**********************************
 * Code generated by DictEditor v1.0.1.1
 * Template: Sistran.Core.Application.UniquePersonV1.AddressType.dict v0.0
 * MODIFICADO : 
 *    MAC - 16/03/2004 - Agregado de constructor que recibe el Id.
 **********************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Specialized;

namespace Sistran.Core.Application.UniquePersonV1.Entities
{
    [
    PersistentClass("Sistran.Core.Application.UniquePersonV1.AddressType.dict"),
    Serializable()
    ]
    public class AddressType :
        BusinessObject
    {
        #region static
        /// <summary>
        /// Create primary key for concrete class.
        /// </summary>
        /// <param name="concreteClass">Concrete class.</param>
        /// <param name="addressTypeCode">AddressTypeCode key property.</param>
        /// <returns>Primary key.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey(
            Type concreteClass, int addressTypeCode)
        {
            ListDictionary keys = new ListDictionary();
            keys.Add("AddressTypeCode", addressTypeCode);

            return new PrimaryKey(concreteClass, keys);
        }

        /// <summary>
        /// Create primary key for this class.
        /// </summary>
        /// <param name="addressTypeCode">AddressTypeCode key property.</param>
        public static PrimaryKey CreatePrimaryKey(int addressTypeCode)
        {
            return InternalCreatePrimaryKey(typeof(AddressType), addressTypeCode);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// SmallDescription property attribute.
        /// </summary>
        private string _smallDescription = null;
        /// <summary>
        /// AddressTypeCode property attribute.
        /// </summary>
        private int _addressTypeCode;
        /// <summary>
        /// TinyDescription property attribute.
        /// </summary>
        private string _tinyDescription = null;
        /// <summary>
		/// Atributo para la propiedad IsElectronicMail.
		/// </summary>
        private bool? _isElectronicMail = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Construct an instance of the class with the specified 
        /// primary key and object engine.
        /// </summary>
        /// <param name="key">Primary key.</param>
        public AddressType(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        { }

        /// <summary>
        /// Constructor basado en el Identificador de la entidad.
        /// </summary>
        /// <param name="addressTypeCode">
        /// Identificador utilizado para generar la Primary Key
        /// </param>
        public AddressType(int addressTypeCode) :
            base(AddressType.CreatePrimaryKey(addressTypeCode),
            null)
        { }


        /// <summary>
        /// Return or set SmallDescription property.
        /// </summary>
        /// <value>SmallDescription property.</value>
        [PersistentProperty()]
        public string SmallDescription
        {
            get
            {
                if (this._smallDescription == null)
                {
                    throw new InvalidPropertyValueException(this.GetType().FullName, "SmallDescription", "<NULL>");
                }
                return this._smallDescription;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, "SmallDescription");
                }
                this._smallDescription = value;
            }
        }

        /// <summary>
        /// Return or set AddressTypeCode property.
        /// </summary>
        /// <value>AddressTypeCode property.</value>
        [PersistentProperty(IsKey = true)]
        public int AddressTypeCode
        {
            get
            {
                return this._addressTypeCode;
            }
            set
            {
                this._addressTypeCode = value;
            }
        }

        /// <summary>
        /// Return or set TinyDescription property.
        /// </summary>
        /// <value>TinyDescription property.</value>
        [PersistentProperty()]
        public string TinyDescription
        {
            get
            {
                if (this._tinyDescription == null)
                {
                    throw new InvalidPropertyValueException(this.GetType().FullName, "TinyDescription", "<NULL>");
                }
                return this._tinyDescription;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, "TinyDescription");
                }
                this._tinyDescription = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IsElectronicMail.
        /// </summary>
        /// <value>Propiedad IsElectronicMail.</value>
        [PersistentProperty()]
        public bool? IsElectronicMail
        {
            get
            {
                if (this._isElectronicMail == null)
                {
                    return false;
                }
                return this._isElectronicMail;
            }
            set
            {
                this._isElectronicMail = value;
            }
        }

        /// <summary>
        /// Set all property values.
        /// </summary>
        protected override void SetKeyPropertyValues(IDictionary keys)
        {
            this._addressTypeCode = (int)keys["AddressTypeCode"];
        }

        /// <summary>
        /// Set all property values.
        /// </summary>
        public override void SetPropertyValues(IDictionary values)
        {
            this.SmallDescription = (string)values["SmallDescription"];
            this.TinyDescription = (string)values["TinyDescription"];
        }

        /// <summary>
        /// Get all property values.
        /// </summary>
        public override IDictionary GetPropertyValues()
        {
            ListDictionary values = new ListDictionary();

            values.Add("SmallDescription", this.SmallDescription);
            values.Add("TinyDescription", this.TinyDescription);

            return values;
        }

        public override void Validate()
        {
            StringCollection propertyNames = new StringCollection();
            if (this._smallDescription == null)
            {
                propertyNames.Add("SmallDescription");
            }
            if (this._tinyDescription == null)
            {
                propertyNames.Add("TinyDescription");
            }
            if (propertyNames.Count > 0)
            {
                throw new PropertyNotNullableException(this.GetType().FullName, propertyNames);
            }
        }
    }
}