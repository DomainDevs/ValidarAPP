/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.UniquePersonV1.Address.dict v1.0
 * FileSize=16158 Header=251 CRC=2833654822
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.UniquePersonV1.Entities
{
    /// <summary>
    /// Definición de entidad Address.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.UniquePersonV1.Address.dict"),
    Serializable(),
    DescriptionKey("ADDRESS_ENTITY"),
    TableMap(TableName="ADDRESS", Schema="UP"),
    ]
    public partial class Address :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string IndividualId = "IndividualId";
			public static readonly string DataId = "DataId";
			public static readonly string AddressTypeCode = "AddressTypeCode";
			public static readonly string IsMailingAddress = "IsMailingAddress";
			public static readonly string StreetTypeCode = "StreetTypeCode";
			public static readonly string Street = "Street";
			public static readonly string CityCode = "CityCode";
			public static readonly string HouseNumber = "HouseNumber";
			public static readonly string Floor = "Floor";
			public static readonly string Apartment = "Apartment";
			public static readonly string ZipCode = "ZipCode";
			public static readonly string Urbanization = "Urbanization";
			public static readonly string StateCode = "StateCode";
			public static readonly string CountryCode = "CountryCode";			
		}

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="individualId">Propiedad clave IndividualId.</param>
		/// <param name="dataId">Propiedad clave DataId.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>(int individualId, int dataId)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.IndividualId, individualId);
		    keys.Add(Properties.DataId, dataId);

		    return new PrimaryKey<T>(keys);
	    }

		/// <summary>
		/// Crea una clave primaria para esta clase.
		/// </summary>
		/// <param name="individualId">Propiedad clave IndividualId.</param>
		/// <param name="dataId">Propiedad clave DataId.</param>
		public static PrimaryKey CreatePrimaryKey(int individualId, int dataId)
	    {
			return InternalCreatePrimaryKey<Address>(individualId, dataId);
		}
#endregion

	    //*** Object Attributes ********************************

		/// <summary>
		/// Atributo para la propiedad AddressTypeCode.
		/// </summary>
        private int _addressTypeCode;
		/// <summary>
		/// Atributo para la propiedad IsMailingAddress.
		/// </summary>
        private bool _isMailingAddress;
		/// <summary>
		/// Atributo para la propiedad StreetTypeCode.
		/// </summary>
        private int _streetTypeCode;
		/// <summary>
		/// Atributo para la propiedad Street.
		/// </summary>
        private string _street = null;
		/// <summary>
		/// Atributo para la propiedad CityCode.
		/// </summary>
        private int? _cityCode = null;
		/// <summary>
		/// Atributo para la propiedad HouseNumber.
		/// </summary>
        private int? _houseNumber = null;
		/// <summary>
		/// Atributo para la propiedad Floor.
		/// </summary>
        private string _floor = null;
		/// <summary>
		/// Atributo para la propiedad Apartment.
		/// </summary>
        private string _apartment = null;
		/// <summary>
		/// Atributo para la propiedad ZipCode.
		/// </summary>
        private string _zipCode = null;
		/// <summary>
		/// Atributo para la propiedad Urbanization.
		/// </summary>
        private string _urbanization = null;
		/// <summary>
		/// Atributo para la propiedad StateCode.
		/// </summary>
        private int? _stateCode = null;
		/// <summary>
		/// Atributo para la propiedad CountryCode.
		/// </summary>
        private int? _countryCode = null;		

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="individualId">IndividualId key property.</param>
		/// <param name="dataId">DataId key property.</param>
	    public Address(int individualId, int dataId):
			this(Address.CreatePrimaryKey(individualId, dataId), null)
	    {
	    }

		/// <summary>
		/// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
		/// </summary>
		/// <param name="key">
		/// Identificador de la instancia de la entidad.
		/// </param>
		/// <param name="initialValues">
		/// Valores para establecer el estado de la instancia.
		/// </param>
	    public Address(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad IndividualId.
		/// </summary>
		/// <value>Propiedad IndividualId.</value>
	    [
		DescriptionKey("INDIVIDUAL_ID_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="INDIVIDUAL_ID", DbType=System.Data.DbType.String),
	    ]
        public int IndividualId
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.IndividualId];
		    }
		    set
		    {
				this._primaryKey[Properties.IndividualId] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad DataId.
		/// </summary>
		/// <value>Propiedad DataId.</value>
	    [
		DescriptionKey("DATA_ID_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="DATA_ID", DbType=System.Data.DbType.String),
	    ]
        public int DataId
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.DataId];
		    }
		    set
		    {
				this._primaryKey[Properties.DataId] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad AddressTypeCode.
		/// </summary>
		/// <value>Propiedad AddressTypeCode.</value>
	    [
		DescriptionKey("ADDRESS_TYPE_CODE_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="ADDRESS_TYPE_CD", DbType=System.Data.DbType.String),
	    ]
        public int AddressTypeCode
	    {
		    get
		    {
			    return this._addressTypeCode;
		    }
		    set
		    {
				this._addressTypeCode = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad IsMailingAddress.
		/// </summary>
		/// <value>Propiedad IsMailingAddress.</value>
	    [
		DescriptionKey("IS_MAILING_ADDRESS_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="IS_MAILING_ADDRESS", DbType=System.Data.DbType.String),
	    ]
        public bool IsMailingAddress
	    {
		    get
		    {
			    return this._isMailingAddress;
		    }
		    set
		    {
				this._isMailingAddress = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad StreetTypeCode.
		/// </summary>
		/// <value>Propiedad StreetTypeCode.</value>
	    [
		DescriptionKey("STREET_TYPE_CODE_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="STREET_TYPE_CD", DbType=System.Data.DbType.String),
	    ]
        public int StreetTypeCode
	    {
		    get
		    {
			    return this._streetTypeCode;
		    }
		    set
		    {
				this._streetTypeCode = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Street.
		/// </summary>
		/// <value>Propiedad Street.</value>
	    [
		DescriptionKey("STREET_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="STREET", DbType=System.Data.DbType.String),
	    ]
        public string Street
	    {
		    get
		    {
			    return this._street;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.Street);
				}
				this._street = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad CityCode.
		/// </summary>
		/// <value>Propiedad CityCode.</value>
	    [
		DescriptionKey("CITY_CODE_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="CITY_CD", DbType=System.Data.DbType.String),
	    ]
        public int? CityCode
	    {
		    get
		    {
			    return this._cityCode;
		    }
		    set
		    {
				this._cityCode = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad HouseNumber.
		/// </summary>
		/// <value>Propiedad HouseNumber.</value>
	    [
		DescriptionKey("HOUSE_NUMBER_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="HOUSE_NUMBER", DbType=System.Data.DbType.String),
	    ]
        public int? HouseNumber
	    {
		    get
		    {
			    return this._houseNumber;
		    }
		    set
		    {
				this._houseNumber = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Floor.
		/// </summary>
		/// <value>Propiedad Floor.</value>
	    [
		DescriptionKey("FLOOR_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="FLOOR", DbType=System.Data.DbType.String),
	    ]
        public string Floor
	    {
		    get
		    {
			    return this._floor;
		    }
		    set
		    {
				this._floor = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Apartment.
		/// </summary>
		/// <value>Propiedad Apartment.</value>
	    [
		DescriptionKey("APARTMENT_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="APARTMENT", DbType=System.Data.DbType.String),
	    ]
        public string Apartment
	    {
		    get
		    {
			    return this._apartment;
		    }
		    set
		    {
				this._apartment = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad ZipCode.
		/// </summary>
		/// <value>Propiedad ZipCode.</value>
	    [
		DescriptionKey("ZIP_CODE_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="ZIP_CODE", DbType=System.Data.DbType.String),
	    ]
        public string ZipCode
	    {
		    get
		    {
			    return this._zipCode;
		    }
		    set
		    {
				this._zipCode = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Urbanization.
		/// </summary>
		/// <value>Propiedad Urbanization.</value>
	    [
		DescriptionKey("URBANIZATION_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="URBANIZATION", DbType=System.Data.DbType.String),
	    ]
        public string Urbanization
	    {
		    get
		    {
			    return this._urbanization;
		    }
		    set
		    {
				this._urbanization = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad StateCode.
		/// </summary>
		/// <value>Propiedad StateCode.</value>
	    [
		DescriptionKey("STATE_CODE_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="STATE_CD", DbType=System.Data.DbType.String),
	    ]
        public int? StateCode
	    {
		    get
		    {
			    return this._stateCode;
		    }
		    set
		    {
				this._stateCode = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad CountryCode.
		/// </summary>
		/// <value>Propiedad CountryCode.</value>
	    [
		DescriptionKey("COUNTRY_CODE_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="COUNTRY_CD", DbType=System.Data.DbType.String),
	    ]
        public int? CountryCode
	    {
		    get
		    {
			    return this._countryCode;
		    }
		    set
		    {
				this._countryCode = value;
			}
	    }

		
		
		/// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="individualId">Propiedad clave IndividualId.</param>
        /// <param name="dataId">Propiedad clave DataId.</param>
        /// <returns>Clave primaria.</returns>
		protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.IndividualId, null);
            keys.Add(Properties.DataId, null);

            return new PrimaryKey<T>(keys);
        }
		
		/// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="individualId">Propiedad clave IndividualId.</param>
        /// <param name="dataId">Propiedad clave DataId.</param>
        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<Address>();
        }
		
		/// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="individualId">IndividualId key property.</param>
        /// <param name="dataId">DataId key property.</param>
        public Address() :
            this(Address.CreatePrimaryKey(), null)
        {
        }		

    }
}