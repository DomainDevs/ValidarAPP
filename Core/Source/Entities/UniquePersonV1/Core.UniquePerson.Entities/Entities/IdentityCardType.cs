/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.UniquePersonV1.IdentityCardType.dict v1.0
 * FileSize=4886 Header=258 CRC=509516695
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.UniquePersonV1.Entities
{
    /// <summary>
    /// Definición de entidad IdentityCardType.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.UniquePersonV1.IdentityCardType.dict"),
    Serializable(),
    DescriptionKey("IDENTITY_CARD_TYPE_ENTITY"),
    TableMap(TableName="IDENTITY_CARD_TYPE", Schema="UP"),
    ]
    public partial class IdentityCardType :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string IdCardTypeCode = "IdCardTypeCode";
			public static readonly string Description = "Description";
			public static readonly string SmallDescription = "SmallDescription";
            public static readonly string IsAlphanumeric = "IsAlphanumeric";
        }

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="idCardTypeCode">Propiedad clave IdCardTypeCode.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>(int idCardTypeCode)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.IdCardTypeCode, idCardTypeCode);

		    return new PrimaryKey<T>(keys);
	    }
        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <author>Germán F. Grimaldo</author>
        /// <date>24/07/2018</date>
        /// <purpose>REQ_218</purpose>
        /// <returns></returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.IdCardTypeCode, null);

            return new PrimaryKey<T>(keys);
        }


        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="idCardTypeCode">Propiedad clave IdCardTypeCode.</param>
        public static PrimaryKey CreatePrimaryKey(int idCardTypeCode)
	    {
			return InternalCreatePrimaryKey<IdentityCardType>(idCardTypeCode);
		}

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <author>Germán F. Grimaldo</author>
        /// <date>24/07/2018</date>
        /// <purpose>REQ_218</purpose>
        /// <returns></returns>
        public static PrimaryKey CreatePrimaryKey() { return InternalCreatePrimaryKey<IdentityCardType>(); }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad Description.
        /// </summary>
        private string _description = null;
		/// <summary>
		/// Atributo para la propiedad SmallDescription.
		/// </summary>
        private string _smallDescription = null;
        //*** Object Constructors ********************************
        /// <summary>
		/// Atributo para la propiedad IsAlphanumeric.
		/// </summary>
        private bool _isAlphanumeric;
        //*** Object Constructors ********************************
        /// <summary>
        /// Constructor Vacio
        /// </summary>
        /// <author>Germán F. Grimaldo </author>
        /// <date>24/07/2018</date>
        /// <purpose>REQ_218</purpose>
        public IdentityCardType() :
                   this(IdentityCardType.CreatePrimaryKey(), null)
        { }


        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="idCardTypeCode">IdCardTypeCode key property.</param>
        public IdentityCardType(int idCardTypeCode):
			this(IdentityCardType.CreatePrimaryKey(idCardTypeCode), null)
	    {
	    }

		/// <summary>
		/// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
		/// </summary>
		/// <param name="key">
		/// Identificador de la instancia de la entidad.
		/// </param>
		/// <param name="initialValues">
		/// Valores para establecer el estado de la instancia.
		/// </param>
	    public IdentityCardType(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad IdCardTypeCode.
		/// </summary>
		/// <value>Propiedad IdCardTypeCode.</value>
	    [
		DescriptionKey("ID_CARD_TYPE_CODE_PROPERTY"),
		PersistentProperty(IsKey = true, KeyType = "None"),
        ColumnMap(ColumnName="ID_CARD_TYPE_CD", DbType=System.Data.DbType.String),
	    ]
        public int IdCardTypeCode
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.IdCardTypeCode];
		    }
		    set
		    {
				this._primaryKey[Properties.IdCardTypeCode] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Description.
		/// </summary>
		/// <value>Propiedad Description.</value>
	    [
		DescriptionKey("DESCRIPTION_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="DESCRIPTION", DbType=System.Data.DbType.String),
	    ]
        public string Description
	    {
		    get
		    {
			    return this._description;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.Description);
				}
				this._description = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad SmallDescription.
		/// </summary>
		/// <value>Propiedad SmallDescription.</value>
	    [
		DescriptionKey("SMALL_DESCRIPTION_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="SMALL_DESCRIPTION", DbType=System.Data.DbType.String),
	    ]
        public string SmallDescription
	    {
		    get
		    {
			    return this._smallDescription;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.SmallDescription);
				}
				this._smallDescription = value;
			}
	    }

        /// <summary>
		/// Devuelve o setea el valor de la propiedad IsAlphanumeric.
		/// </summary>
		/// <value>Propiedad IsAlphanumeric.</value>
	    [
        DescriptionKey("IS_ALPHANUMERIC_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "IS_ALPHANUMERIC", DbType = System.Data.DbType.String),
        ]
        public bool IsAlphanumeric
        {
            get
            {
                return this._isAlphanumeric;
            }
            set
            {
                this._isAlphanumeric = value;
            }    
        }
    }
}