/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.UniquePersonV1.IndividualPartner.dict v1.0
 * FileSize=9343 Header=259 CRC=466513852
 ******************************************/
//TODO:  <<Autor: Edgar Cervantes De Los Rios; Fecha: 03/03/2010; Asunto: Clase que representa la tabla UP.INDIVIDUAL_PARTNER.
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.UniquePersonV1.Entities
{
    /// <summary>
    /// Definición de entidad IndividualPartner.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.UniquePersonV1.IndividualPartner.dict"),
    Serializable(),
    DescriptionKey("INDIVIDUAL_PARTNER_ENTITY"),
    TableMap(TableName = "INDIVIDUAL_PARTNER", Schema = "UP"),
    ]
    public partial class IndividualPartner :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string PartnerId = "PartnerId";
            public static readonly string IdCardNo = "IdCardNo";
            public static readonly string IndividualId = "IndividualId";
            public static readonly string IdCardTypeCode = "IdCardTypeCode";
            public static readonly string TradeName = "TradeName";
            public static readonly string Active = "Active";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="partnerId">Propiedad clave PartnerId.</param>
        /// <param name="idCardNo">Propiedad clave IdCardNo.</param>
        /// <param name="individualId">Propiedad clave IndividualId.</param>
        /// <param name="idCardTypeCode">Propiedad clave IdCardTypeCode.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int partnerId, string idCardNo, int individualId, int idCardTypeCode)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.PartnerId, partnerId);
            keys.Add(Properties.IdCardNo, idCardNo);
            keys.Add(Properties.IndividualId, individualId);
            keys.Add(Properties.IdCardTypeCode, idCardTypeCode);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="partnerId">Propiedad clave PartnerId.</param>
        /// <param name="idCardNo">Propiedad clave IdCardNo.</param>
        /// <param name="individualId">Propiedad clave IndividualId.</param>
        /// <param name="idCardTypeCode">Propiedad clave IdCardTypeCode.</param>
        public static PrimaryKey CreatePrimaryKey(int partnerId, string idCardNo, int individualId, int idCardTypeCode)
        {
            return InternalCreatePrimaryKey<IndividualPartner>(partnerId, idCardNo, individualId, idCardTypeCode);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad TradeName.
        /// </summary>
        private string _tradeName = null;
        /// <summary>
        /// Atributo para la propiedad Active.
        /// </summary>
        private bool _active;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="partnerId">PartnerId key property.</param>
        /// <param name="idCardNo">IdCardNo key property.</param>
        /// <param name="individualId">IndividualId key property.</param>
        /// <param name="idCardTypeCode">IdCardTypeCode key property.</param>
        public IndividualPartner(int partnerId, string idCardNo, int individualId, int idCardTypeCode) :
            this(IndividualPartner.CreatePrimaryKey(partnerId, idCardNo, individualId, idCardTypeCode), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public IndividualPartner(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }


        /// <summary>
        /// Devuelve o setea el valor de la propiedad PartnerId.
        /// </summary>
        /// <value>Propiedad PartnerId.</value>
        [
        DescriptionKey("PARTNER_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "PARTNER_ID", DbType = System.Data.DbType.String),
        ]
        public int PartnerId
        {
            get
            {
                return (int)this._primaryKey[Properties.PartnerId];
            }
            set
            {
                this._primaryKey[Properties.PartnerId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IdCardNo.
        /// </summary>
        /// <value>Propiedad IdCardNo.</value>
        [
        DescriptionKey("ID_CARD_NO_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "ID_CARD_NO", DbType = System.Data.DbType.String),
        ]
        public string IdCardNo
        {
            get
            {
                return (string)this._primaryKey[Properties.IdCardNo];
            }
            set
            {
                this._primaryKey[Properties.IdCardNo] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IndividualId.
        /// </summary>
        /// <value>Propiedad IndividualId.</value>
        [
        DescriptionKey("INDIVIDUAL_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "INDIVIDUAL_ID", DbType = System.Data.DbType.String),
        ]
        public int IndividualId
        {
            get
            {
                return (int)this._primaryKey[Properties.IndividualId];
            }
            set
            {
                this._primaryKey[Properties.IndividualId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IdCardTypeCode.
        /// </summary>
        /// <value>Propiedad IdCardTypeCode.</value>
        [
        DescriptionKey("ID_CARD_TYPE_CODE_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "ID_CARD_TYPE_CD", DbType = System.Data.DbType.String),
        ]
        public int IdCardTypeCode
        {
            get
            {
                return (int)this._primaryKey[Properties.IdCardTypeCode];
            }
            set
            {
                this._primaryKey[Properties.IdCardTypeCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad TradeName.
        /// </summary>
        /// <value>Propiedad TradeName.</value>
        [
        DescriptionKey("TRADE_NAME_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "TRADE_NAME", DbType = System.Data.DbType.String),
        ]
        public string TradeName
        {
            get
            {
                return this._tradeName;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.TradeName);
                }
                this._tradeName = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Active.
        /// </summary>
        /// <value>Propiedad Active.</value>
        [
        DescriptionKey("ACTIVE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "ACTIVE", DbType = System.Data.DbType.String),
        ]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }

    }
}