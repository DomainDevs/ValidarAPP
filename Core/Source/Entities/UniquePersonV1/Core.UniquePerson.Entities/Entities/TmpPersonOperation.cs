/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.UniquePerson.TmpPersonOperation.TmpPersonOperation.dict v1.0
 * FileSize=6912 Header=280 CRC=2518349147
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.UniquePersonV1.Entities
{
    /// <summary>
    /// Definición de entidad TmpPersonOperation.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.UniquePersonV1.TmpPersonOperation.dict"),
    Serializable(),
    DescriptionKey("TMP_PERSON_OPERATION_ENTITY"),
    TableMap(TableName = "TMP_PERSON_OPERATION", Schema = "UP"),
    ]
    public partial class TmpPersonOperation :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string OperationId = "OperationId";
            public static readonly string IndividualId = "IndividualId";
            public static readonly string Operation = "Operation";
            public static readonly string Proccess = "Proccess";
            public static readonly string TypeProccess = "TypeProccess";
            public static readonly string FunctionId = "FunctionId";
        }

        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.OperationId, null);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="operationId">Propiedad clave OperationId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int operationId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.OperationId, operationId);

            return new PrimaryKey<T>(keys);
        }

        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<TmpPersonOperation>();
        }
        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="operationId">Propiedad clave OperationId.</param>
        public static PrimaryKey CreatePrimaryKey(int operationId)
        {
            return InternalCreatePrimaryKey<TmpPersonOperation>(operationId);
        }
       
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad IndividualId.
        /// </summary>
        private int? _individualId = null;
        /// <summary>
        /// Atributo para la propiedad Operation.
        /// </summary>
        private string _operation = null;
        /// <summary>
        /// Atributo para la propiedad Proccess.
        /// </summary>
        private string _proccess = null;
        /// <summary>
        /// Atributo para la propiedad TypeProccess.
        /// </summary>
        private string _typeProccess = null;
        /// <summary>
        /// Atributo para la propiedad FunctionId.
        /// </summary>
        private int _functionId;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="operationId">OperationId key property.</param>

        public TmpPersonOperation() :
       this(TmpPersonOperation.CreatePrimaryKey(), null)
        {
        }

        public TmpPersonOperation(int operationId) :
            this(TmpPersonOperation.CreatePrimaryKey(operationId), null)
        {
        }       

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public TmpPersonOperation(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad OperationId.
        /// </summary>
        /// <value>Propiedad OperationId.</value>
        [
        DescriptionKey("OPERATION_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "OPERATION_ID", DbType = System.Data.DbType.String),
        ]
        public int OperationId
        {
            get
            {
                return (int)this._primaryKey[Properties.OperationId];
            }
            set
            {
                this._primaryKey[Properties.OperationId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IndividualId.
        /// </summary>
        /// <value>Propiedad IndividualId.</value>
        [
        DescriptionKey("INDIVIDUAL_ID_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "INDIVIDUAL_ID", DbType = System.Data.DbType.String),
        ]
        public int? IndividualId
        {
            get
            {
                return this._individualId;
            }
            set
            {
                this._individualId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Operation.
        /// </summary>
        /// <value>Propiedad Operation.</value>
        [
        DescriptionKey("OPERATION_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "OPERATION", DbType = System.Data.DbType.String),
        ]
        public string Operation
        {
            get
            {
                return this._operation;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Operation);
                }
                this._operation = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Proccess.
        /// </summary>
        /// <value>Propiedad Proccess.</value>
        [
        DescriptionKey("PROCCESS_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "PROCCESS", DbType = System.Data.DbType.String),
        ]
        public string Proccess
        {
            get
            {
                return this._proccess;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Proccess);
                }
                this._proccess = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad TypeProccess.
        /// </summary>
        /// <value>Propiedad TypeProccess.</value>
        [
        DescriptionKey("TYPE_PROCCESS_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "TYPE_PROCCESS", DbType = System.Data.DbType.String),
        ]
        public string TypeProccess
        {
            get
            {
                return this._typeProccess;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.TypeProccess);
                }
                this._typeProccess = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad FunctionId.
        /// </summary>
        /// <value>Propiedad FunctionId.</value>
        [
        DescriptionKey("FUNCTION_ID_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "FUNCTION_ID", DbType = System.Data.DbType.String),
        ]
        public int FunctionId
        {
            get
            {
                return this._functionId;
            }
            set
            {
                this._functionId = value;
            }
        }

    }
}