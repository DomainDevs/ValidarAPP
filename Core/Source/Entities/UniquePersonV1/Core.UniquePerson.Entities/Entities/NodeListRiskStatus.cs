/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.UniquePersonV1.NodeListRiskStatus.dict v1.0
 * FileSize=6211 Header=263 CRC=1869141385
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.UniquePersonV1.Entities
{
    /// <summary>
    /// Definición de entidad NodeListRiskStatus.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.UniquePersonV1.NodeListRiskStatus.dict"),
    Serializable(),
    DescriptionKey("NODE_LIST_RISK_STATUS_ENTITY"),
    TableMap(TableName = "NODE_LIST_RISK_STATUS", Schema = "PARAM"),
    ]
    public partial class NodeListRiskStatus :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string Id = "Id";
            public static readonly string Node = "Node";
            public static readonly string Username = "Username";
            public static readonly string Creationdate = "Creationdate";
            public static readonly string Lists = "Lists";
            public static readonly string Umbrals = "Umbrals";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="id">Propiedad clave Id.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.Id, null);
            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="id">Propiedad clave Id.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int id)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.Id, id);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="id">Propiedad clave Id.</param>
        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<NodeListRiskStatus>();
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="id">Propiedad clave Id.</param>
        public static PrimaryKey CreatePrimaryKey(int id)
        {
            return InternalCreatePrimaryKey<NodeListRiskStatus>(id);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad Node.
        /// </summary>
        private string _node = null;
        /// <summary>
        /// Atributo para la propiedad Username.
        /// </summary>
        private string _username = null;
        /// <summary>
        /// Atributo para la propiedad Creationdate.
        /// </summary>
        private DateTime? _creationdate = null;
        /// <summary>
        /// Atributo para la propiedad Lists.
        /// </summary>
        private string _lists = null;
        /// <summary>
        /// Atributo para la propiedad Umbrals.
        /// </summary>
        private string _umbrals = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="id">Id key property.</param>
        public NodeListRiskStatus() :
            this(NodeListRiskStatus.CreatePrimaryKey(), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="id">Id key property.</param>
        public NodeListRiskStatus(int id) :
            this(NodeListRiskStatus.CreatePrimaryKey(id), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public NodeListRiskStatus(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad Id.
        /// </summary>
        /// <value>Propiedad Id.</value>
        [
        DescriptionKey("ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "Id", DbType = System.Data.DbType.String),
        ]
        public int Id
        {
            get
            {
                return (int)this._primaryKey[Properties.Id];
            }
            set
            {
                this._primaryKey[Properties.Id] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Node.
        /// </summary>
        /// <value>Propiedad Node.</value>
        [
        DescriptionKey("NODE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "Node", DbType = System.Data.DbType.String),
        ]
        public string Node
        {
            get
            {
                return this._node;
            }
            set
            {
                this._node = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Username.
        /// </summary>
        /// <value>Propiedad Username.</value>
        [
        DescriptionKey("USERNAME_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "UserName", DbType = System.Data.DbType.String),
        ]
        public string Username
        {
            get
            {
                return this._username;
            }
            set
            {
                this._username = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Creationdate.
        /// </summary>
        /// <value>Propiedad Creationdate.</value>
        [
        DescriptionKey("CREATIONDATE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "CreationDate", DbType = System.Data.DbType.String),
        ]
        public DateTime? Creationdate
        {
            get
            {
                return this._creationdate;
            }
            set
            {
                this._creationdate = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Lists.
        /// </summary>
        /// <value>Propiedad Lists.</value>
        [
        DescriptionKey("LISTS_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "Lists", DbType = System.Data.DbType.String),
        ]
        public string Lists
        {
            get
            {
                return this._lists;
            }
            set
            {
                this._lists = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Umbrals.
        /// </summary>
        /// <value>Propiedad Umbrals.</value>
        [
        DescriptionKey("UMBRALS_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "Umbrals", DbType = System.Data.DbType.String),
        ]
        public string Umbrals
        {
            get
            {
                return this._umbrals;
            }
            set
            {
                this._umbrals = value;
            }
        }

    }
}