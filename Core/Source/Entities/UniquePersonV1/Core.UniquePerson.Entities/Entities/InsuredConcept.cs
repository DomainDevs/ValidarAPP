/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.UniquePersonV1.InsuredConcept.dict v1.0
 * FileSize=7244 Header=264 CRC=1174009917
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.UniquePersonV1.Entities
{
    /// <summary>
    /// Definición de entidad InsuredConcept.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.UniquePersonV1.InsuredConcept.dict"),
    Serializable(),
    DescriptionKey("INSURED_CONCEPT_ENTITY"),
    TableMap(TableName = "INSURED_CONCEPT", Schema = "UP"),
    ]
    public partial class InsuredConcept :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string InsuredCode = "InsuredCode";
            public static readonly string IsHolder = "IsHolder";
            public static readonly string IsBeneficiary = "IsBeneficiary";
            public static readonly string IsRepresentative = "IsRepresentative";
            public static readonly string IsSurety = "IsSurety";
            public static readonly string IsConsortium = "IsConsortium";
            public static readonly string IsPayer = "IsPayer";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="insuredCode">Propiedad clave InsuredCode.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int insuredCode)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.InsuredCode, insuredCode);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="insuredCode">Propiedad clave InsuredCode.</param>
        public static PrimaryKey CreatePrimaryKey(int insuredCode)
        {
            return InternalCreatePrimaryKey<InsuredConcept>(insuredCode);
        }
        #endregion

        //*** Object Attributes ********************************
        /// <summary>
        /// Atributo para la propiedad IsHolder.
        /// </summary>
        private bool? _isInsured = false;
        /// <summary>
        /// Atributo para la propiedad IsHolder.
        /// </summary>
        private bool? _isHolder = false;
        /// <summary>
        /// Atributo para la propiedad IsBeneficiary.
        /// </summary>
        private bool? _isBeneficiary = false;
        /// <summary>
        /// Atributo para la propiedad IsRepresentative.
        /// </summary>
        private bool? _isRepresentative = false;
        /// <summary>
        /// Atributo para la propiedad IsSurety.
        /// </summary>
        private bool? _isSurety = false;
        /// <summary>
        /// Atributo para la propiedad IsConsortium.
        /// </summary>
        private bool? _isConsortium = false;
        /// <summary>
        /// Atributo para la propiedad IsPayer.
        /// </summary>
        private bool? _isPayer = false;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="insuredCode">InsuredCode key property.</param>
        public InsuredConcept(int insuredCode) :
            this(InsuredConcept.CreatePrimaryKey(insuredCode), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public InsuredConcept(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }


        /// <summary>
        /// Devuelve o setea el valor de la propiedad InsuredCode.
        /// </summary>
        /// <value>Propiedad InsuredCode.</value>
        [
        DescriptionKey("INSURED_CODE_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "INSURED_CD", DbType = System.Data.DbType.String),
        ]
        public int InsuredCode
        {
            get
            {
                return (int)this._primaryKey[Properties.InsuredCode];
            }
            set
            {
                this._primaryKey[Properties.InsuredCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IsHolder.
        /// </summary>
        /// <value>Propiedad IsHolder.</value>
        [
        DescriptionKey("IS_INSURED_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "IS_INSURED", DbType = System.Data.DbType.String),
        ]
        public bool? IsInsured
        {
            get
            {
                return this._isInsured;
            }
            set
            {
                this._isInsured = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IsHolder.
        /// </summary>
        /// <value>Propiedad IsHolder.</value>
        [
        DescriptionKey("IS_HOLDER_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "IS_HOLDER", DbType = System.Data.DbType.String),
        ]
        public bool? IsHolder
        {
            get
            {
                return this._isHolder;
            }
            set
            {
                this._isHolder = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IsBeneficiary.
        /// </summary>
        /// <value>Propiedad IsBeneficiary.</value>
        [
        DescriptionKey("IS_BENEFICIARY_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "IS_BENEFICIARY", DbType = System.Data.DbType.String),
        ]
        public bool? IsBeneficiary
        {
            get
            {
                return this._isBeneficiary;
            }
            set
            {
                this._isBeneficiary = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IsRepresentative.
        /// </summary>
        /// <value>Propiedad IsRepresentative.</value>
        [
        DescriptionKey("IS_REPRESENTATIVE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "IS_REPRESENTATIVE", DbType = System.Data.DbType.String),
        ]
        public bool? IsRepresentative
        {
            get
            {
                return this._isRepresentative;
            }
            set
            {
                this._isRepresentative = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IsSurety.
        /// </summary>
        /// <value>Propiedad IsSurety.</value>
        [
        DescriptionKey("IS_SURETY_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "IS_SURETY", DbType = System.Data.DbType.String),
        ]
        public bool? IsSurety
        {
            get
            {
                return this._isSurety;
            }
            set
            {
                this._isSurety = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IsConsortium.
        /// </summary>
        /// <value>Propiedad IsConsortium.</value>
        [
        DescriptionKey("IS_CONSORTIUM_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "IS_CONSORTIUM", DbType = System.Data.DbType.String),
        ]
        public bool? IsConsortium
        {
            get
            {
                return this._isConsortium;
            }
            set
            {
                this._isConsortium = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IsPayer.
        /// </summary>
        /// <value>Propiedad IsPayer.</value>
        [
        DescriptionKey("IS_PAYER_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "IS_PAYER", DbType = System.Data.DbType.String),
        ]
        public bool? IsPayer
        {
            get
            {
                return this._isPayer;
            }
            set
            {
                this._isPayer = value;
            }
        }

    }
}