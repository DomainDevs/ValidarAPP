/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: PaymentMethodAccount.PaymentMethodAccount.dict v1.0
 * FileSize=8364 Header=246 CRC=2740984533
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.UniquePersonV1.Entities
{
    /// <summary>
    /// Definición de entidad PaymentMethodAccount.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.UniquePersonV1.PaymentMethodAccount.dict"),
    Serializable(),
    DescriptionKey("PAYMENT_METHOD_ACCOUNT_ENTITY"),
    TableMap(TableName = "PAYMENT_METHOD_ACCOUNT", Schema = "UP"),
    ]
    public partial class PaymentMethodAccount :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string IndividualId = "IndividualId";
            public static readonly string PaymentId = "PaymentId";
            public static readonly string PaymentAccountTypeCode = "PaymentAccountTypeCode";
            public static readonly string CurrencyCode = "CurrencyCode";
            public static readonly string AccountNumber = "AccountNumber";
            public static readonly string ElectronicAccount = "ElectronicAccount";
            public static readonly string BankCode = "BankCode";
            public static readonly string BankBranchNumber = "BankBranchNumber";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="individualId">Propiedad clave IndividualId.</param>
        /// <param name="paymentId">Propiedad clave PaymentId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int individualId, int paymentId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.IndividualId, individualId);
            keys.Add(Properties.PaymentId, paymentId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="individualId">Propiedad clave IndividualId.</param>
        /// <param name="paymentId">Propiedad clave PaymentId.</param>
        public static PrimaryKey CreatePrimaryKey(int individualId, int paymentId)
        {
            return InternalCreatePrimaryKey<PaymentMethodAccount>(individualId, paymentId);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad PaymentAccountTypeCode.
        /// </summary>
        private int _paymentAccountTypeCode;
        /// <summary>
        /// Atributo para la propiedad CurrencyCode.
        /// </summary>
        private int _currencyCode;
        /// <summary>
        /// Atributo para la propiedad AccountNumber.
        /// </summary>
        private decimal _accountNumber;
        /// <summary>
        /// Atributo para la propiedad ElectronicAccount.
        /// </summary>
        private decimal? _electronicAccount = null;
        /// <summary>
        /// Atributo para la propiedad BankCode.
        /// </summary>
        private int? _bankCode = null;
        /// <summary>
        /// Atributo para la propiedad BankBranchNumber.
        /// </summary>
        private int? _bankBranchNumber = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="individualId">IndividualId key property.</param>
        /// <param name="paymentId">PaymentId key property.</param>
        public PaymentMethodAccount(int individualId, int paymentId) :
            this(PaymentMethodAccount.CreatePrimaryKey(individualId, paymentId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public PaymentMethodAccount(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }


        /// <summary>
        /// Devuelve o setea el valor de la propiedad IndividualId.
        /// </summary>
        /// <value>Propiedad IndividualId.</value>
        [
        DescriptionKey("INDIVIDUAL_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "INDIVIDUAL_ID", DbType = System.Data.DbType.String),
        ]
        public int IndividualId
        {
            get
            {
                return (int)this._primaryKey[Properties.IndividualId];
            }
            set
            {
                this._primaryKey[Properties.IndividualId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad PaymentId.
        /// </summary>
        /// <value>Propiedad PaymentId.</value>
        [
        DescriptionKey("PAYMENT_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "PAYMENT_ID", DbType = System.Data.DbType.String),
        ]
        public int PaymentId
        {
            get
            {
                return (int)this._primaryKey[Properties.PaymentId];
            }
            set
            {
                this._primaryKey[Properties.PaymentId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad PaymentAccountTypeCode.
        /// </summary>
        /// <value>Propiedad PaymentAccountTypeCode.</value>
        [
        DescriptionKey("PAYMENT_ACCOUNT_TYPE_CODE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "PAYMENT_ACCOUNT_TYPE_CD", DbType = System.Data.DbType.String),
        ]
        public int PaymentAccountTypeCode
        {
            get
            {
                return this._paymentAccountTypeCode;
            }
            set
            {
                this._paymentAccountTypeCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad CurrencyCode.
        /// </summary>
        /// <value>Propiedad CurrencyCode.</value>
        [
        DescriptionKey("CURRENCY_CODE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "CURRENCY_CD", DbType = System.Data.DbType.String),
        ]
        public int CurrencyCode
        {
            get
            {
                return this._currencyCode;
            }
            set
            {
                this._currencyCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad AccountNumber.
        /// </summary>
        /// <value>Propiedad AccountNumber.</value>
        [
        DescriptionKey("ACCOUNT_NUMBER_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "ACCOUNT_NUMBER", DbType = System.Data.DbType.Decimal),
        ]
        public decimal AccountNumber
        {
            get
            {
                return this._accountNumber;
            }
            set
            {
                this._accountNumber = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ElectronicAccount.
        /// </summary>
        /// <value>Propiedad ElectronicAccount.</value>
        [
        DescriptionKey("ELECTRONIC_ACCOUNT_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "ELECTRONIC_ACCOUNT", DbType = System.Data.DbType.Decimal),
        ]
        public decimal? ElectronicAccount
        {
            get
            {
                return this._electronicAccount;
            }
            set
            {
                this._electronicAccount = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad BankCode.
        /// </summary>
        /// <value>Propiedad BankCode.</value>
        [
        DescriptionKey("BANK_CODE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "BANK_CD", DbType = System.Data.DbType.String),
        ]
        public int? BankCode
        {
            get
            {
                return this._bankCode;
            }
            set
            {
                this._bankCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad BankBranchNumber.
        /// </summary>
        /// <value>Propiedad BankBranchNumber.</value>
        [
        DescriptionKey("BANK_BRANCH_NUMBER_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "BANK_BRANCH_NUMBER", DbType = System.Data.DbType.String),
        ]
        public int? BankBranchNumber
        {
            get
            {
                return this._bankBranchNumber;
            }
            set
            {
                this._bankBranchNumber = value;
            }
        }

    }
}