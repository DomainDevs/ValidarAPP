/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Occupation.Occupation.dict v1.0
 * FileSize=4770 Header=226 CRC=4126821069
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.UniquePersonV1.Entities
{
    /// <summary>
    /// Definición de entidad Occupation.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.UniquePersonV1.Occupation.dict"),
    Serializable(),
    DescriptionKey("OCCUPATION_ENTITY"),
    TableMap(TableName = "OCCUPATION", Schema = "UP"),
    ]
    public partial class Occupation :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string OccupationCode = "OccupationCode";
            public static readonly string Description = "Description";
            public static readonly string SmallDescription = "SmallDescription";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="occupationCode">Propiedad clave OccupationCode.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int occupationCode)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.OccupationCode, occupationCode);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <author>Germán F. Grimaldo</author>
        /// <date>19/07/2018</date>
        /// <purpose>REQ_30</purpose>
        /// <returns></returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.OccupationCode, null);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="occupationCode">Propiedad clave OccupationCode.</param>
        public static PrimaryKey CreatePrimaryKey(int occupationCode)
        {
            return InternalCreatePrimaryKey<Occupation>(occupationCode);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <author>Germán F. Grimaldo</author>
        /// <date>19/07/2018</date>
        /// <purpose>REQ_30</purpose>
        /// <returns></returns>
        public static PrimaryKey CreatePrimaryKey() { return InternalCreatePrimaryKey<Occupation>(); }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad Description.
        /// </summary>
        private string _description = null;
        /// <summary>
        /// Atributo para la propiedad SmallDescription.
        /// </summary>
        private string _smallDescription = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor Vacio
        /// </summary>
        /// <author>Germán F. Grimaldo </author>
        /// <date>19/07/2018</date>
        /// <purpose>REQ_30</purpose>
        public Occupation() :
                   this(Occupation.CreatePrimaryKey(), null)
        { }

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="occupationCode">OccupationCode key property.</param>
        public Occupation(int occupationCode) :
            this(Occupation.CreatePrimaryKey(occupationCode), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public Occupation(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }


        /// <summary>
        /// Devuelve o setea el valor de la propiedad OccupationCode.
        /// </summary>
        /// <value>Propiedad OccupationCode.</value>
        [
        DescriptionKey("OCCUPATION_CODE_PROPERTY"),
        PersistentProperty(IsKey = true, KeyType = "None"),
        ColumnMap(ColumnName = "OCCUPATION_CD", DbType = System.Data.DbType.String),
        ]
        public int OccupationCode
        {
            get
            {
                return (int)this._primaryKey[Properties.OccupationCode];
            }
            set
            {
                this._primaryKey[Properties.OccupationCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Description.
        /// </summary>
        /// <value>Propiedad Description.</value>
        [
        DescriptionKey("DESCRIPTION_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Description);
                }
                this._description = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad SmallDescription.
        /// </summary>
        /// <value>Propiedad SmallDescription.</value>
        [
        DescriptionKey("SMALL_DESCRIPTION_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "SMALL_DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string SmallDescription
        {
            get
            {
                return this._smallDescription;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.SmallDescription);
                }
                this._smallDescription = value;
            }
        }

    }
}