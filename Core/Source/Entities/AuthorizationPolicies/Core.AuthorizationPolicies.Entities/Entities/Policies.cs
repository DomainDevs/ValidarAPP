/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Core.AuthorizationPolicies.Entities.Policies.dict v1.0
 * FileSize=8712 Header=248 CRC=317631684
 ******************************************/

using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.AuthorizationPolicies.Entities
{
    /// <summary>
    /// Definición de entidad Policies.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.AuthorizationPolicies.Policies.dict"),
    Serializable(),
    DescriptionKey("POLICIES_ENTITY"),
    TableMap(TableName = "POLICIES", Schema = "AUTHO"),
    ]
    public partial class Policies :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string PoliciesId = "PoliciesId";
            public static readonly string GroupPoliciesId = "GroupPoliciesId";
            public static readonly string HierarchyPoliciesId = "HierarchyPoliciesId";
            public static readonly string TypePoliciesId = "TypePoliciesId";
            public static readonly string Description = "Description";
            public static readonly string Position = "Position";
            public static readonly string NumberAut = "NumberAut";
            public static readonly string Message = "Message";
            public static readonly string Enabled = "Enabled";
        }




        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="policiesId">Propiedad clave PoliciesId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int policiesId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.PoliciesId, policiesId);

            return new PrimaryKey<T>(keys);
        }


        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="policiesId">Propiedad clave PoliciesId.</param>
        public static PrimaryKey CreatePrimaryKey(int policiesId)
        {
            return InternalCreatePrimaryKey<Policies>(policiesId);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad GroupPoliciesId.
        /// </summary>
        private int _groupPoliciesId;
        /// <summary>
        /// Atributo para la propiedad HierarchyPoliciesId.
        /// </summary>
        private int _hierarchyPoliciesId;
        /// <summary>
        /// Atributo para la propiedad TypePoliciesId.
        /// </summary>
        private int _typePoliciesId;
        /// <summary>
        /// Atributo para la propiedad Description.
        /// </summary>
        private string _description = null;
        /// <summary>
        /// Atributo para la propiedad Position.
        /// </summary>
        private int _position;
        /// <summary>
        /// Atributo para la propiedad NumberAut.
        /// </summary>
        private int _numberAut;
        /// <summary>
        /// Atributo para la propiedad Message.
        /// </summary>
        private string _message = null;

        /// <summary>
        /// Atributo para la propiedad Enabled.
        /// </summary>
        private bool _enabled;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="policiesId">PoliciesId key property.</param>
        public Policies(int policiesId) :
            this(Policies.CreatePrimaryKey(policiesId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public Policies(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad PoliciesId.
        /// </summary>
        /// <value>Propiedad PoliciesId.</value>
        [
        DescriptionKey("POLICIES_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "POLICIES_ID", DbType = System.Data.DbType.String),
        ]
        public int PoliciesId
        {
            get
            {
                return (int)this._primaryKey[Properties.PoliciesId];
            }
            set
            {
                this._primaryKey[Properties.PoliciesId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad GroupPoliciesId.
        /// </summary>
        /// <value>Propiedad GroupPoliciesId.</value>
        [
        DescriptionKey("GROUP_POLICIES_ID_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "GROUP_POLICIES_ID", DbType = System.Data.DbType.String),
        ]
        public int GroupPoliciesId
        {
            get
            {
                return this._groupPoliciesId;
            }
            set
            {
                this._groupPoliciesId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad HierarchyPoliciesId.
        /// </summary>
        /// <value>Propiedad HierarchyPoliciesId.</value>
        [
        DescriptionKey("HIERARCHY_POLICIES_ID_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "HIERARCHY_POLICIES_ID", DbType = System.Data.DbType.String),
        ]
        public int HierarchyPoliciesId
        {
            get
            {
                return this._hierarchyPoliciesId;
            }
            set
            {
                this._hierarchyPoliciesId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad TypePoliciesId.
        /// </summary>
        /// <value>Propiedad TypePoliciesId.</value>
        [
        DescriptionKey("TYPE_POLICIES_ID_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "TYPE_POLICIES_ID", DbType = System.Data.DbType.String),
        ]
        public int TypePoliciesId
        {
            get
            {
                return this._typePoliciesId;
            }
            set
            {
                this._typePoliciesId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Description.
        /// </summary>
        /// <value>Propiedad Description.</value>
        [
        DescriptionKey("DESCRIPTION_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Description);
                }
                this._description = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Position.
        /// </summary>
        /// <value>Propiedad Position.</value>
        [
        DescriptionKey("POSITION_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "POSITION", DbType = System.Data.DbType.String),
        ]
        public int Position
        {
            get
            {
                return this._position;
            }
            set
            {
                this._position = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad NumberAut.
        /// </summary>
        /// <value>Propiedad NumberAut.</value>
        [
        DescriptionKey("NUMBER_AUT_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "NUMBER_AUT", DbType = System.Data.DbType.String),
        ]
        public int NumberAut
        {
            get
            {
                return this._numberAut;
            }
            set
            {
                this._numberAut = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Message.
        /// </summary>
        /// <value>Propiedad Message.</value>
        [
        DescriptionKey("MESSAGE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "MESSAGE", DbType = System.Data.DbType.String),
        ]
        public string Message
        {
            get
            {
                return this._message;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Message);
                }
                this._message = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Enabled.
        /// </summary>
        /// <value>Propiedad Enabled.</value>
        [
            DescriptionKey("ENABLED_PROPERTY"),
            PersistentProperty(),
            ColumnMap(ColumnName = "ENABLED", DbType = System.Data.DbType.String),
        ]
        public bool Enabled
        {
            get
            {
                return this._enabled;
            }
            set
            {
                this._enabled = value;
            }
        }
    }
}