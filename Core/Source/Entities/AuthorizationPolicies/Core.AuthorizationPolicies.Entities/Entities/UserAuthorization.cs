/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.AuthorizationPolicies.UserAuthorization.dict v1.0
 * FileSize=6169 Header=268 CRC=373087292
 ******************************************/

using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.AuthorizationPolicies.Entities
{
    /// <summary>
    /// Definición de entidad UserAuthorization.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.AuthorizationPolicies.UserAuthorization.dict"),
    Serializable(),
    DescriptionKey("USER_AUTHORIZATION_ENTITY"),
    TableMap(TableName = "USER_AUTHORIZATION", Schema = "AUTHO"),
    ]
    public partial class UserAuthorization :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string PoliciesId = "PoliciesId";
            public static readonly string UserId = "UserId";
            public static readonly string HierarchyId = "HierarchyId";
            public static readonly string Default = "Default";
            public static readonly string Required = "Required";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="policiesId">Propiedad clave PoliciesId.</param>
        /// <param name="userId">Propiedad clave UserId.</param>
        /// <param name="hierarchyId">Propiedad clave HierarchyId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int policiesId, int userId, int hierarchyId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.PoliciesId, policiesId);
            keys.Add(Properties.UserId, userId);
            keys.Add(Properties.HierarchyId, hierarchyId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="policiesId">Propiedad clave PoliciesId.</param>
        /// <param name="userId">Propiedad clave UserId.</param>
        /// <param name="hierarchyId">Propiedad clave HierarchyId.</param>
        public static PrimaryKey CreatePrimaryKey(int policiesId, int userId, int hierarchyId)
        {
            return InternalCreatePrimaryKey<UserAuthorization>(policiesId, userId, hierarchyId);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad Default.
        /// </summary>
        private bool _default;
        /// <summary>
        /// Atributo para la propiedad Required.
        /// </summary>
        private bool _required;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="policiesId">PoliciesId key property.</param>
        /// <param name="userId">UserId key property.</param>
        /// <param name="hierarchyId">HierarchyId key property.</param>
        public UserAuthorization(int policiesId, int userId, int hierarchyId) :
            this(UserAuthorization.CreatePrimaryKey(policiesId, userId, hierarchyId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public UserAuthorization(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad PoliciesId.
        /// </summary>
        /// <value>Propiedad PoliciesId.</value>
        [
        DescriptionKey("POLICIES_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "POLICIES_ID", DbType = System.Data.DbType.String),
        ]
        public int PoliciesId
        {
            get
            {
                return (int)this._primaryKey[Properties.PoliciesId];
            }
            set
            {
                this._primaryKey[Properties.PoliciesId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad UserId.
        /// </summary>
        /// <value>Propiedad UserId.</value>
        [
        DescriptionKey("USER_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "USER_ID", DbType = System.Data.DbType.String),
        ]
        public int UserId
        {
            get
            {
                return (int)this._primaryKey[Properties.UserId];
            }
            set
            {
                this._primaryKey[Properties.UserId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad HierarchyId.
        /// </summary>
        /// <value>Propiedad HierarchyId.</value>
        [
        DescriptionKey("HIERARCHY_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "HIERARCHY_ID", DbType = System.Data.DbType.String),
        ]
        public int HierarchyId
        {
            get
            {
                return (int)this._primaryKey[Properties.HierarchyId];
            }
            set
            {
                this._primaryKey[Properties.HierarchyId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Default.
        /// </summary>
        /// <value>Propiedad Default.</value>
        [
        DescriptionKey("DEFAULT_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "DEFAULT", DbType = System.Data.DbType.String),
        ]
        public bool Default
        {
            get
            {
                return this._default;
            }
            set
            {
                this._default = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Required.
        /// </summary>
        /// <value>Propiedad Required.</value>
        [
        DescriptionKey("REQUIRED_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "REQUIRED", DbType = System.Data.DbType.String),
        ]
        public bool Required
        {
            get
            {
                return this._required;
            }
            set
            {
                this._required = value;
            }
        }

    }
}