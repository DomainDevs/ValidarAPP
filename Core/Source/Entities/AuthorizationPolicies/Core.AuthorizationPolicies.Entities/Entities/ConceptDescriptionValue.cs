/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.AuthorizationPolicies.ConceptDescriptionValue.dict v1.0
 * FileSize=6330 Header=275 CRC=4026147735
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.AuthorizationPolicies.Entities
{
    /// <summary>
    /// Definición de entidad ConceptDescriptionValue.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.AuthorizationPolicies.ConceptDescriptionValue.dict"),
    Serializable(),
    DescriptionKey("CONCEPT_DESCRIPTION_VALUE_ENTITY"),
    TableMap(TableName = "CONCEPT_DESCRIPTION_VALUE", Schema = "AUTHO"),
    ]
    public partial class ConceptDescriptionValue :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string ConceptId = "ConceptId";
            public static readonly string EntityId = "EntityId";
            public static readonly string TableName = "TableName";
            public static readonly string Fields = "Fields";
            public static readonly string Filter = "Filter";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="conceptId">Propiedad clave ConceptId.</param>
        /// <param name="entityId">Propiedad clave EntityId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int conceptId, int entityId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.ConceptId, conceptId);
            keys.Add(Properties.EntityId, entityId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="conceptId">Propiedad clave ConceptId.</param>
        /// <param name="entityId">Propiedad clave EntityId.</param>
        public static PrimaryKey CreatePrimaryKey(int conceptId, int entityId)
        {
            return InternalCreatePrimaryKey<ConceptDescriptionValue>(conceptId, entityId);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad TableName.
        /// </summary>
        private string _tableName = null;
        /// <summary>
        /// Atributo para la propiedad Fields.
        /// </summary>
        private string _fields = null;
        /// <summary>
        /// Atributo para la propiedad Filter.
        /// </summary>
        private string _filter = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="conceptId">ConceptId key property.</param>
        /// <param name="entityId">EntityId key property.</param>
        public ConceptDescriptionValue(int conceptId, int entityId) :
            this(ConceptDescriptionValue.CreatePrimaryKey(conceptId, entityId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public ConceptDescriptionValue(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad ConceptId.
        /// </summary>
        /// <value>Propiedad ConceptId.</value>
        [
        DescriptionKey("CONCEPT_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "CONCEPT_ID", DbType = System.Data.DbType.String),
        ]
        public int ConceptId
        {
            get
            {
                return (int)this._primaryKey[Properties.ConceptId];
            }
            set
            {
                this._primaryKey[Properties.ConceptId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad EntityId.
        /// </summary>
        /// <value>Propiedad EntityId.</value>
        [
        DescriptionKey("ENTITY_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "ENTITY_ID", DbType = System.Data.DbType.String),
        ]
        public int EntityId
        {
            get
            {
                return (int)this._primaryKey[Properties.EntityId];
            }
            set
            {
                this._primaryKey[Properties.EntityId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad TableName.
        /// </summary>
        /// <value>Propiedad TableName.</value>
        [
        DescriptionKey("TABLE_NAME_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "TABLE_NAME", DbType = System.Data.DbType.String),
        ]
        public string TableName
        {
            get
            {
                return this._tableName;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.TableName);
                }
                this._tableName = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Fields.
        /// </summary>
        /// <value>Propiedad Fields.</value>
        [
        DescriptionKey("FIELDS_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "FIELDS", DbType = System.Data.DbType.String),
        ]
        public string Fields
        {
            get
            {
                return this._fields;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Fields);
                }
                this._fields = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Filter.
        /// </summary>
        /// <value>Propiedad Filter.</value>
        [
        DescriptionKey("FILTER_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "FILTER", DbType = System.Data.DbType.String),
        ]
        public string Filter
        {
            get
            {
                return this._filter;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Filter);
                }
                this._filter = value;
            }
        }

    }
}