/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Common.CollectionNoticeAccount.dict v1.0
 * FileSize=7504 Header=260 CRC=2661114363
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.Common.Entities
{
    /// <summary>
    /// Definición de entidad CollectionNoticeAccount.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Common.CollectionNoticeAccount.dict"),
    Serializable(),
    DescriptionKey("CO_COLLECTION_NOTICE_ACCOUNT_ENTITY"),
    TableMap(TableName = "CO_COLLECTION_NOTICE_ACCOUNT", Schema = "COMM"),
    ]
    public partial class CollectionNoticeAccount :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string AccountId = "AccountId";
            public static readonly string BankCode = "BankCode";
            public static readonly string PrefixCode = "PrefixCode";
            public static readonly string AccountNumber = "AccountNumber";
            public static readonly string AccountType = "AccountType";
            public static readonly string UserCode = "UserCode";
            public static readonly string DateProcess = "DateProcess";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="accountId">Propiedad clave AccountId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int accountId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.AccountId, accountId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="accountId">Propiedad clave AccountId.</param>
        public static PrimaryKey CreatePrimaryKey(int accountId)
        {
            return InternalCreatePrimaryKey<CollectionNoticeAccount>(accountId);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad BankCode.
        /// </summary>
        private int _bankCode;
        /// <summary>
        /// Atributo para la propiedad PrefixCode.
        /// </summary>
        private int _prefixCode;
        /// <summary>
        /// Atributo para la propiedad AccountNumber.
        /// </summary>
        private string _accountNumber = null;
        /// <summary>
        /// Atributo para la propiedad AccountType.
        /// </summary>
        private string _accountType = null;
        /// <summary>
        /// Atributo para la propiedad UserCode.
        /// </summary>
        private string _userCode = null;
        /// <summary>
        /// Atributo para la propiedad DateProcess.
        /// </summary>
        private DateTime _dateProcess;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="accountId">AccountId key property.</param>
        public CollectionNoticeAccount(int accountId) :
            this(CollectionNoticeAccount.CreatePrimaryKey(accountId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public CollectionNoticeAccount(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad AccountId.
        /// </summary>
        /// <value>Propiedad AccountId.</value>
        [
        DescriptionKey("ACCOUNT_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "ACCOUNT_ID", DbType = System.Data.DbType.String),
        ]
        public int AccountId
        {
            get
            {
                return (int)this._primaryKey[Properties.AccountId];
            }
            set
            {
                this._primaryKey[Properties.AccountId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad BankCode.
        /// </summary>
        /// <value>Propiedad BankCode.</value>
        [
        DescriptionKey("BANK_CODE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "BANK_CD", DbType = System.Data.DbType.String),
        ]
        public int BankCode
        {
            get
            {
                return this._bankCode;
            }
            set
            {
                this._bankCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad PrefixCode.
        /// </summary>
        /// <value>Propiedad PrefixCode.</value>
        [
        DescriptionKey("PREFIX_CODE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "PREFIX_CD", DbType = System.Data.DbType.String),
        ]
        public int PrefixCode
        {
            get
            {
                return this._prefixCode;
            }
            set
            {
                this._prefixCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad AccountNumber.
        /// </summary>
        /// <value>Propiedad AccountNumber.</value>
        [
        DescriptionKey("ACCOUNT_NUMBER_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "ACCOUNT_NUMBER", DbType = System.Data.DbType.String),
        ]
        public string AccountNumber
        {
            get
            {
                return this._accountNumber;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.AccountNumber);
                }
                this._accountNumber = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad AccountType.
        /// </summary>
        /// <value>Propiedad AccountType.</value>
        [
        DescriptionKey("ACCOUNT_TYPE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "ACCOUNT_TYPE", DbType = System.Data.DbType.String),
        ]
        public string AccountType
        {
            get
            {
                return this._accountType;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.AccountType);
                }
                this._accountType = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad UserCode.
        /// </summary>
        /// <value>Propiedad UserCode.</value>
        [
        DescriptionKey("USER_CODE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "USER_CD", DbType = System.Data.DbType.String),
        ]
        public string UserCode
        {
            get
            {
                return this._userCode;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.UserCode);
                }
                this._userCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad DateProcess.
        /// </summary>
        /// <value>Propiedad DateProcess.</value>
        [
        DescriptionKey("DATE_PROCESS_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "DATE_PROCESS", DbType = System.Data.DbType.String),
        ]
        public DateTime DateProcess
        {
            get
            {
                return this._dateProcess;
            }
            set
            {
                this._dateProcess = value;
            }
        }

    }
}