/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Common.CoEconomicActivity.dict v1.0
 * FileSize=6271 Header=252 CRC=384868299
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.Common.Entities
{
    /// <summary>
    /// Definición de entidad CoPrvEconomicActivity.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Common.CoEconomicActivity.dict"),
    Serializable(),
    DescriptionKey("CO_PRV_ECONOMIC_ACTIVITY_ENTITY"),
    TableMap(TableName = "CO_PRV_ECONOMIC_ACTIVITY", Schema = "COMM"),
    ]
    public partial class CoEconomicActivity :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string EconomicActivityCode = "EconomicActivityCode";
            public static readonly string Description = "Description";
            public static readonly string SmallDescription = "SmallDescription";
            public static readonly string IsPerson = "IsPerson";
            public static readonly string IsCompany = "IsCompany";
        }


        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="economicActivityCode">Propiedad clave EconomicActivityCode.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int economicActivityCode)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.EconomicActivityCode, economicActivityCode);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <author>Germán F. Grimaldo</author>
        /// <date>19/07/2018</date>
        /// <purpose>REQ_23</purpose>
        /// <returns></returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.EconomicActivityCode, null);

            return new PrimaryKey<T>(keys);
        }


        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="economicActivityCode">Propiedad clave EconomicActivityCode.</param>
        public static PrimaryKey CreatePrimaryKey(int economicActivityCode)
        {
            return InternalCreatePrimaryKey<EconomicActivity>(economicActivityCode);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <author>Germán F. Grimaldo</author>
        /// <date>19/07/2018</date>
        /// <purpose>REQ_23</purpose>
        /// <returns></returns>
        public static PrimaryKey CreatePrimaryKey() { return InternalCreatePrimaryKey<EconomicActivity>(); }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad Description.
        /// </summary>
        private string _description = null;
        /// <summary>
        /// Atributo para la propiedad SmallDescription.
        /// </summary>
        private string _smallDescription = null;
        /// <summary>
        /// Atributo para la propiedad IsPerson.
        /// </summary>
        private bool _isPerson;
        /// <summary>
        /// Atributo para la propiedad IsCompany.
        /// </summary>
        private bool _isCompany;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor Vacio
        /// </summary>
        /// <author>Germán F. Grimaldo </author>
        /// <date>19/07/2018</date>
        /// <purpose>REQ_23</purpose>
        public CoEconomicActivity() :
                   this(CoEconomicActivity.CreatePrimaryKey(), null)
        { }

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="economicActivityCode">EconomicActivityCode key property.</param>
        public CoEconomicActivity(int economicActivityCode) :
            this(EconomicActivity.CreatePrimaryKey(economicActivityCode), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public CoEconomicActivity(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad EconomicActivityCode.
        /// </summary>
        /// <value>Propiedad EconomicActivityCode.</value>
        [
        DescriptionKey("ECONOMIC_ACTIVITY_CODE_PROPERTY"),
        PersistentProperty(IsKey = true, KeyType = "None"),
        ColumnMap(ColumnName = "ECONOMIC_ACTIVITY_CD_NEW", DbType = System.Data.DbType.String),
        ]
        public int EconomicActivityCode
        {
            get
            {
                return (int)this._primaryKey[Properties.EconomicActivityCode];
            }
            set
            {
                this._primaryKey[Properties.EconomicActivityCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Description.
        /// </summary>
        /// <value>Propiedad Description.</value>
        [
        DescriptionKey("DESCRIPTION_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Description);
                }
                this._description = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad SmallDescription.
        /// </summary>
        /// <value>Propiedad SmallDescription.</value>
        [
        DescriptionKey("SMALL_DESCRIPTION_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "SMALL_DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string SmallDescription
        {
            get
            {
                return this._smallDescription;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.SmallDescription);
                }
                this._smallDescription = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IsPerson.
        /// </summary>
        /// <value>Propiedad IsPerson.</value>
        [
        DescriptionKey("IS_PERSON_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "IS_PERSON", DbType = System.Data.DbType.String),
        ]
        public bool IsPerson
        {
            get
            {
                return this._isPerson;
            }
            set
            {
                this._isPerson = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IsCompany.
        /// </summary>
        /// <value>Propiedad IsCompany.</value>
        [
        DescriptionKey("IS_COMPANY_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "IS_COMPANY", DbType = System.Data.DbType.String),
        ]
        public bool IsCompany
        {
            get
            {
                return this._isCompany;
            }
            set
            {
                this._isCompany = value;
            }
        }

    }
}