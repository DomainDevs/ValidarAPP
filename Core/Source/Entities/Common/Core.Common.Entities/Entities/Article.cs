/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: test2.Article.dict v1.0
 * FileSize=6654 Header=218 CRC=3126785149
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.Common.Entities
{
    /// <summary>
    /// Definición de entidad Article.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Common.Article.dict"),
    Serializable(),
    DescriptionKey("ARTICLE_ENTITY"),
    TableMap(TableName = "ARTICLE", Schema = "COMM"),
    ]
    public partial class Article :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string ArticleCode = "ArticleCode";
            public static readonly string Description = "Description";
            public static readonly string SmallDescription = "SmallDescription";
            public static readonly string ArticleLineCode = "ArticleLineCode";
            public static readonly string RequiredCounterguarantee = "RequiredCounterguarantee";
            public static readonly string InsuredAmount = "InsuredAmount";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="articleCode">Propiedad clave ArticleCode.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int articleCode)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.ArticleCode, articleCode);

            return new PrimaryKey<T>(keys);
        }

        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.ArticleCode, null);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="articleCode">Propiedad clave ArticleCode.</param>
        public static PrimaryKey CreatePrimaryKey(int articleCode)
        {
            return InternalCreatePrimaryKey<Article>(articleCode);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="articleCode">Propiedad clave ArticleCode.</param>
        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<Article>();
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad Description.
        /// </summary>
        private string _description = null;
        /// <summary>
        /// Atributo para la propiedad SmallDescription.
        /// </summary>
        private string _smallDescription = null;
        /// <summary>
        /// Atributo para la propiedad ArticleLineCode.
        /// </summary>
        private int _articleLineCode;
        /// <summary>
        /// Atributo para la propiedad RequiredCounterguarantee.
        /// </summary>
        private bool _requiredCounterguarantee;
        /// <summary>
        /// Atributo para la propiedad InsuredAmount.
        /// </summary>
        private decimal? _insuredAmount = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="articleCode">ArticleCode key property.</param>
        public Article(int articleCode) :
            this(Article.CreatePrimaryKey(articleCode), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="articleCode">ArticleCode key property.</param>
        public Article() :
            this(Article.CreatePrimaryKey(), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public Article(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad ArticleCode.
        /// </summary>
        /// <value>Propiedad ArticleCode.</value>
        [
        DescriptionKey("ARTICLE_CODE_PROPERTY"),
        PersistentProperty(IsKey = true, KeyType = "None"),
        ColumnMap(ColumnName = "ARTICLE_CD", DbType = System.Data.DbType.String),
        ]
        public int ArticleCode
        {
            get
            {
                return (int)this._primaryKey[Properties.ArticleCode];
            }
            set
            {
                this._primaryKey[Properties.ArticleCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Description.
        /// </summary>
        /// <value>Propiedad Description.</value>
        [
        DescriptionKey("DESCRIPTION_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad SmallDescription.
        /// </summary>
        /// <value>Propiedad SmallDescription.</value>
        [
        DescriptionKey("SMALL_DESCRIPTION_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "SMALL_DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string SmallDescription
        {
            get
            {
                return this._smallDescription;
            }
            set
            {
                this._smallDescription = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ArticleLineCode.
        /// </summary>
        /// <value>Propiedad ArticleLineCode.</value>
        [
        DescriptionKey("ARTICLE_LINE_CODE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "ARTICLE_LINE_CD", DbType = System.Data.DbType.String),
        ]
        public int ArticleLineCode
        {
            get
            {
                return this._articleLineCode;
            }
            set
            {
                this._articleLineCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad RequiredCounterguarantee.
        /// </summary>
        /// <value>Propiedad RequiredCounterguarantee.</value>
        [
        DescriptionKey("REQUIRED_COUNTERGUARANTEE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "REQUIRED_COUNTERGUARANTEE", DbType = System.Data.DbType.String),
        ]
        public bool RequiredCounterguarantee
        {
            get
            {
                return this._requiredCounterguarantee;
            }
            set
            {
                this._requiredCounterguarantee = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad InsuredAmount.
        /// </summary>
        /// <value>Propiedad InsuredAmount.</value>
        [
        DescriptionKey("INSURED_AMOUNT_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "INSURED_AMT", DbType = System.Data.DbType.Decimal),
        ]
        public decimal? InsuredAmount
        {
            get
            {
                return this._insuredAmount;
            }
            set
            {
                this._insuredAmount = value;
            }
        }

    }
}