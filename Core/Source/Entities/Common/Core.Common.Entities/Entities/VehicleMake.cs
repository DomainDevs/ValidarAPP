/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Common.VehicleMake.dict v1.0
 * FileSize=6236 Header=247 CRC=419342622
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.Common.Entities
{
    /// <summary>
    /// Definición de entidad VehicleMake.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Common.VehicleMake.dict"),
    Serializable(),
    DescriptionKey("VEHICLE_MAKE_ENTITY"),
    TableMap(TableName = "VEHICLE_MAKE", Schema = "COMM"),
    ]
    public partial class VehicleMake :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string VehicleMakeCode = "VehicleMakeCode";
            public static readonly string SmallDescription = "SmallDescription";
            public static readonly string IsFrequently = "IsFrequently";
            public static readonly string AtVehicleModelCode = "AtVehicleModelCode";
            public static readonly string IaVehicleMakeCode = "IaVehicleMakeCode";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="vehicleMakeCode">Propiedad clave VehicleMakeCode.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int vehicleMakeCode)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.VehicleMakeCode, vehicleMakeCode);

            return new PrimaryKey<T>(keys);
        }

        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.VehicleMakeCode, null);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="vehicleMakeCode">Propiedad clave VehicleMakeCode.</param>
        public static PrimaryKey CreatePrimaryKey(int vehicleMakeCode)
        {
            return InternalCreatePrimaryKey<VehicleMake>(vehicleMakeCode);
        }

        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<VehicleMake>();
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad SmallDescription.
        /// </summary>
        private string _smallDescription = null;
        /// <summary>
        /// Atributo para la propiedad IsFrequently.
        /// </summary>
        private bool _isFrequently;
        /// <summary>
        /// Atributo para la propiedad AtVehicleModelCode.
        /// </summary>
        private int? _atVehicleModelCode = null;
        /// <summary>
        /// Atributo para la propiedad IaVehicleMakeCode.
        /// </summary>
        private int? _iaVehicleMakeCode = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="vehicleMakeCode">VehicleMakeCode key property.</param>
        public VehicleMake(int vehicleMakeCode) :
            this(VehicleMake.CreatePrimaryKey(vehicleMakeCode), null)
        {
        }

        public VehicleMake() :
            this(VehicleMake.CreatePrimaryKey(), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public VehicleMake(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad VehicleMakeCode.
        /// </summary>
        /// <value>Propiedad VehicleMakeCode.</value>
        [
        DescriptionKey("VEHICLE_MAKE_CODE_PROPERTY"),
        PersistentProperty(IsKey = true, KeyType ="None"),
        ColumnMap(ColumnName = "VEHICLE_MAKE_CD", DbType = System.Data.DbType.String),
        ]
        public int VehicleMakeCode
        {
            get
            {
                return (int)this._primaryKey[Properties.VehicleMakeCode];
            }
            set
            {
                this._primaryKey[Properties.VehicleMakeCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad SmallDescription.
        /// </summary>
        /// <value>Propiedad SmallDescription.</value>
        [
        DescriptionKey("SMALL_DESCRIPTION_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "SMALL_DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string SmallDescription
        {
            get
            {
                return this._smallDescription;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.SmallDescription);
                }
                this._smallDescription = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IsFrequently.
        /// </summary>
        /// <value>Propiedad IsFrequently.</value>
        [
        DescriptionKey("IS_FREQUENTLY_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "IS_FREQUENTLY", DbType = System.Data.DbType.String),
        ]
        public bool IsFrequently
        {
            get
            {
                return this._isFrequently;
            }
            set
            {
                this._isFrequently = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad AtVehicleModelCode.
        /// </summary>
        /// <value>Propiedad AtVehicleModelCode.</value>
        [
        DescriptionKey("AT_VEHICLE_MODEL_CODE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "AT_VEHICLE_MODEL_CD", DbType = System.Data.DbType.String),
        ]
        public int? AtVehicleModelCode
        {
            get
            {
                return this._atVehicleModelCode;
            }
            set
            {
                this._atVehicleModelCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IaVehicleMakeCode.
        /// </summary>
        /// <value>Propiedad IaVehicleMakeCode.</value>
        [
        DescriptionKey("IA_VEHICLE_MAKE_CODE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "IA_VEHICLE_MAKE_CD", DbType = System.Data.DbType.String),
        ]
        public int? IaVehicleMakeCode
        {
            get
            {
                return this._iaVehicleMakeCode;
            }
            set
            {
                this._iaVehicleMakeCode = value;
            }
        }

    }
}