/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Common.CoPolicyType.dict v1.0
 * FileSize=7382 Header=249 CRC=1311956721
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.Common.Entities
{
    /// <summary>
    /// Definición de entidad CoPolicyType.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Common.CoPolicyType.dict"),
    Serializable(),
    DescriptionKey("CO_POLICY_TYPE_ENTITY"),
    TableMap(TableName = "CO_POLICY_TYPE", Schema = "COMM"),
    ]
    public partial class CoPolicyType :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string PrefixCode = "PrefixCode";
            public static readonly string PolicyTypeCode = "PolicyTypeCode";
            public static readonly string Description = "Description";
            public static readonly string SystemCode = "SystemCode";
            public static readonly string RiskTable = "RiskTable";
            public static readonly string Floating = "Floating";
            public static readonly string Administered = "Administered";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="prefixCode">Propiedad clave PrefixCode.</param>
        /// <param name="policyTypeCode">Propiedad clave PolicyTypeCode.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.PrefixCode, null);
            keys.Add(Properties.PolicyTypeCode, null);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="prefixCode">Propiedad clave PrefixCode.</param>
        /// <param name="policyTypeCode">Propiedad clave PolicyTypeCode.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int prefixCode, int policyTypeCode)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.PrefixCode, prefixCode);
            keys.Add(Properties.PolicyTypeCode, policyTypeCode);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="prefixCode">Propiedad clave PrefixCode.</param>
        /// <param name="policyTypeCode">Propiedad clave PolicyTypeCode.</param>
        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<CoPolicyType>();
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="prefixCode">Propiedad clave PrefixCode.</param>
        /// <param name="policyTypeCode">Propiedad clave PolicyTypeCode.</param>
        public static PrimaryKey CreatePrimaryKey(int prefixCode, int policyTypeCode)
        {
            return InternalCreatePrimaryKey<CoPolicyType>(prefixCode, policyTypeCode);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad Description.
        /// </summary>
        private string _description = null;
        /// <summary>
        /// Atributo para la propiedad SystemCode.
        /// </summary>
        private int? _systemCode = null;
        /// <summary>
        /// Atributo para la propiedad RiskTable.
        /// </summary>
        private bool _riskTable;
        /// <summary>
        /// Atributo para la propiedad Floating.
        /// </summary>
        private bool _floating;
        /// <summary>
        /// Atributo para la propiedad Administered.
        /// </summary>
        private bool? _administered;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="prefixCode">PrefixCode key property.</param>
        /// <param name="policyTypeCode">PolicyTypeCode key property.</param>
        public CoPolicyType() :
            this(CoPolicyType.CreatePrimaryKey(), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="prefixCode">PrefixCode key property.</param>
        /// <param name="policyTypeCode">PolicyTypeCode key property.</param>
        public CoPolicyType(int prefixCode, int policyTypeCode) :
            this(CoPolicyType.CreatePrimaryKey(prefixCode, policyTypeCode), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public CoPolicyType(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad PrefixCode.
        /// </summary>
        /// <value>Propiedad PrefixCode.</value>
        [
        DescriptionKey("PREFIX_CODE_PROPERTY"),
        PersistentProperty(IsKey = true, KeyType ="None"),
        ColumnMap(ColumnName = "PREFIX_CD", DbType = System.Data.DbType.String),
        ]
        public int PrefixCode
        {
            get
            {
                return (int)this._primaryKey[Properties.PrefixCode];
            }
            set
            {
                this._primaryKey[Properties.PrefixCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad PolicyTypeCode.
        /// </summary>
        /// <value>Propiedad PolicyTypeCode.</value>
        [
        DescriptionKey("POLICY_TYPE_CODE_PROPERTY"),
        PersistentProperty(IsKey = true, KeyType = "None"),
        ColumnMap(ColumnName = "POLICY_TYPE_CD", DbType = System.Data.DbType.String),
        ]
        public int PolicyTypeCode
        {
            get
            {
                return (int)this._primaryKey[Properties.PolicyTypeCode];
            }
            set
            {
                this._primaryKey[Properties.PolicyTypeCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Description.
        /// </summary>
        /// <value>Propiedad Description.</value>
        [
        DescriptionKey("DESCRIPTION_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad SystemCode.
        /// </summary>
        /// <value>Propiedad SystemCode.</value>
        [
        DescriptionKey("SYSTEM_CODE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "SYSTEM_CD", DbType = System.Data.DbType.String),
        ]
        public int? SystemCode
        {
            get
            {
                return this._systemCode;
            }
            set
            {
                this._systemCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad RiskTable.
        /// </summary>
        /// <value>Propiedad RiskTable.</value>
        [
        DescriptionKey("RISK_TABLE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "RISK_TABLE", DbType = System.Data.DbType.String),
        ]
        public bool RiskTable
        {
            get
            {
                return this._riskTable;
            }
            set
            {
                this._riskTable = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Floating.
        /// </summary>
        /// <value>Propiedad Floating.</value>
        [
        DescriptionKey("FLOATING_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "FLOATING", DbType = System.Data.DbType.String),
        ]
        public bool Floating
        {
            get
            {
                return this._floating;
            }
            set
            {
                this._floating = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Administered.
        /// </summary>
        /// <value>Propiedad Administered.</value>
        [
        DescriptionKey("ADMINISTERED_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "ADMINISTERED", DbType = System.Data.DbType.String),
        ]
        public bool? Administered
        {
            get
            {
                return this._administered;
            }
            set
            {
                this._administered = value;
            }
        }

    }
}