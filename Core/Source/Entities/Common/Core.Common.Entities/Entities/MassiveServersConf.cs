/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Common.MassiveServersConf.dict v1.0
 * FileSize=5780 Header=254 CRC=409459457
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.Common.Entities
{
    /// <summary>
    /// Definición de entidad MassiveServersConf.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Common.MassiveServersConf.dict"),
    Serializable(),
    DescriptionKey("MASSIVE_SERVERS_CONF_ENTITY"),
    TableMap(TableName = "MASSIVE_SERVERS_CONF", Schema = "COMM"),
    ]
    public partial class MassiveServersConf :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string Id = "Id";
            public static readonly string ServerName = "ServerName";
            public static readonly string MassiveServiceUrl = "MassiveServiceUrl";
            public static readonly string MaxThreadsNum = "MaxThreadsNum";
            public static readonly string IsEnabled = "IsEnabled";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<MassiveServersConf>();
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad Id.
        /// </summary>
        private int _id;
        /// <summary>
        /// Atributo para la propiedad ServerName.
        /// </summary>
        private string _serverName = null;
        /// <summary>
        /// Atributo para la propiedad MassiveServiceUrl.
        /// </summary>
        private string _massiveServiceUrl = null;
        /// <summary>
        /// Atributo para la propiedad MaxThreadsNum.
        /// </summary>
        private int _maxThreadsNum;
        /// <summary>
        /// Atributo para la propiedad IsEnabled.
        /// </summary>
        private bool _isEnabled;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        public MassiveServersConf() :
            this(MassiveServersConf.CreatePrimaryKey(), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public MassiveServersConf(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad Id.
        /// </summary>
        /// <value>Propiedad Id.</value>
        [
        DescriptionKey("ID_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "ID", DbType = System.Data.DbType.String),
        ]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ServerName.
        /// </summary>
        /// <value>Propiedad ServerName.</value>
        [
        DescriptionKey("SERVER_NAME_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "SERVER_NAME", DbType = System.Data.DbType.String),
        ]
        public string ServerName
        {
            get
            {
                return this._serverName;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.ServerName);
                }
                this._serverName = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad MassiveServiceUrl.
        /// </summary>
        /// <value>Propiedad MassiveServiceUrl.</value>
        [
        DescriptionKey("MASSIVE_SERVICE_URL_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "MASSIVE_SERVICE_URL", DbType = System.Data.DbType.String),
        ]
        public string MassiveServiceUrl
        {
            get
            {
                return this._massiveServiceUrl;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.MassiveServiceUrl);
                }
                this._massiveServiceUrl = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad MaxThreadsNum.
        /// </summary>
        /// <value>Propiedad MaxThreadsNum.</value>
        [
        DescriptionKey("MAX_THREADS_NUM_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "MAX_THREADS_NUM", DbType = System.Data.DbType.String),
        ]
        public int MaxThreadsNum
        {
            get
            {
                return this._maxThreadsNum;
            }
            set
            {
                this._maxThreadsNum = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IsEnabled.
        /// </summary>
        /// <value>Propiedad IsEnabled.</value>
        [
        DescriptionKey("IS_ENABLED_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "IS_ENABLED", DbType = System.Data.DbType.String),
        ]
        public bool IsEnabled
        {
            get
            {
                return this._isEnabled;
            }
            set
            {
                this._isEnabled = value;
            }
        }

    }
}