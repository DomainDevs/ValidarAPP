/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Common.City.dict v1.0
 * FileSize=7827 Header=241 CRC=3658397961
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.Common.Entities
{
    /// <summary>
    /// Definición de entidad City.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Common.City.dict"),
    Serializable(),
    DescriptionKey("CITY_ENTITY"),
    TableMap(TableName = "CITY", Schema = "COMM"),
    ]
    public partial class City :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string CityCode = "CityCode";
            public static readonly string CountryCode = "CountryCode";
            public static readonly string StateCode = "StateCode";
            public static readonly string Description = "Description";
            public static readonly string SmallDescription = "SmallDescription";
            public static readonly string BlockRegion = "BlockRegion";
            public static readonly string DivipolaId = "DivipolaId";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="cityCode">Propiedad clave CityCode.</param>
        /// <param name="countryCode">Propiedad clave CountryCode.</param>
        /// <param name="stateCode">Propiedad clave StateCode.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int countryCode, int cityCode, int stateCode)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.CityCode, cityCode);
            keys.Add(Properties.CountryCode, countryCode);
            keys.Add(Properties.StateCode, stateCode);

            return new PrimaryKey<T>(keys);
        }
        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.CityCode, null);
            keys.Add(Properties.CountryCode, null);
            keys.Add(Properties.StateCode, null);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="cityCode">Propiedad clave CityCode.</param>
        /// <param name="countryCode">Propiedad clave CountryCode.</param>
        /// <param name="stateCode">Propiedad clave StateCode.</param>
        public static PrimaryKey CreatePrimaryKey(int countryCode, int cityCode, int stateCode)
        {
            return InternalCreatePrimaryKey<City>(countryCode, cityCode, stateCode);
        }
        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<City>();
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad Description.
        /// </summary>
        private string _description = null;
        /// <summary>
        /// Atributo para la propiedad SmallDescription.
        /// </summary>
        private string _smallDescription = null;
        /// <summary>
        /// Atributo para la propiedad BlockRegion.
        /// </summary>
        private string _blockRegion = null;
        /// <summary>
        /// Atributo para la propiedad DivipolaId.
        /// </summary>
        private string _divipolaId = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="cityCode">CityCode key property.</param>
        /// <param name="countryCode">CountryCode key property.</param>
        /// <param name="stateCode">StateCode key property.</param>
        public City(int countryCode, int cityCode, int stateCode) :
            this(City.CreatePrimaryKey(countryCode, cityCode, stateCode), null)
        {
        }

        public City() :
            this(City.CreatePrimaryKey(), null)
        {
        }
        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public City(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad CityCode.
        /// </summary>
        /// <value>Propiedad CityCode.</value>
        [
        DescriptionKey("CITY_CODE_PROPERTY"),
        PersistentProperty(IsKey = true, KeyType = "None"),
        ColumnMap(ColumnName = "CITY_CD", DbType = System.Data.DbType.String),
        ]
        public int CityCode
        {
            get
            {
                return (int)this._primaryKey[Properties.CityCode];
            }
            set
            {
                this._primaryKey[Properties.CityCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad CountryCode.
        /// </summary>
        /// <value>Propiedad CountryCode.</value>
        [
        DescriptionKey("COUNTRY_CODE_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "COUNTRY_CD", DbType = System.Data.DbType.String),
        ]
        public int CountryCode
        {
            get
            {
                return (int)this._primaryKey[Properties.CountryCode];
            }
            set
            {
                this._primaryKey[Properties.CountryCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad StateCode.
        /// </summary>
        /// <value>Propiedad StateCode.</value>
        [
        DescriptionKey("STATE_CODE_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "STATE_CD", DbType = System.Data.DbType.String),
        ]
        public int StateCode
        {
            get
            {
                return (int)this._primaryKey[Properties.StateCode];
            }
            set
            {
                this._primaryKey[Properties.StateCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Description.
        /// </summary>
        /// <value>Propiedad Description.</value>
        [
        DescriptionKey("DESCRIPTION_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Description);
                }
                this._description = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad SmallDescription.
        /// </summary>
        /// <value>Propiedad SmallDescription.</value>
        [
        DescriptionKey("SMALL_DESCRIPTION_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "SMALL_DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string SmallDescription
        {
            get
            {
                return this._smallDescription;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.SmallDescription);
                }
                this._smallDescription = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad BlockRegion.
        /// </summary>
        /// <value>Propiedad BlockRegion.</value>
        [
        DescriptionKey("BLOCK_REGION_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "BLOCK_REGION", DbType = System.Data.DbType.String),
        ]
        public string BlockRegion
        {
            get
            {
                return this._blockRegion;
            }
            set
            {
                this._blockRegion = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad DivipolaId.
        /// </summary>
        /// <value>Propiedad DivipolaId.</value>
        [
        DescriptionKey("DIVIPOLA_ID_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "DIVIPOLA_ID", DbType = System.Data.DbType.String),
        ]
        public string DivipolaId
        {
            get
            {
                return this._divipolaId;
            }
            set
            {
                this._divipolaId = value;
            }
        }

    }
}