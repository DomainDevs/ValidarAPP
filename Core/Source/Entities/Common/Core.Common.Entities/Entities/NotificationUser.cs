/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Common.NotificationUser.dict v1.0
 * FileSize=6961 Header=252 CRC=346955030
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.Common.Entities
{
    /// <summary>
    /// Definición de entidad NotificationUser.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Common.NotificationUser.dict"),
    Serializable(),
    DescriptionKey("NOTIFICATION_USER_ENTITY"),
    TableMap(TableName = "NOTIFICATION_USER", Schema = "COMM"),
    ]
    public partial class NotificationUser :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string Id = "Id";
            public static readonly string NotificationType = "NotificationType";
            public static readonly string Message = "Message";
            public static readonly string UserId = "UserId";
            public static readonly string Enabled = "Enabled";
            public static readonly string Parameters = "Parameters";
            public static readonly string CreateDate = "CreateDate";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="id">Propiedad clave Id.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int id)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.Id, id);

            return new PrimaryKey<T>(keys);
        }


        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="id">Propiedad clave Id.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.Id, null);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="id">Propiedad clave Id.</param>
        public static PrimaryKey CreatePrimaryKey(int id)
        {
            return InternalCreatePrimaryKey<NotificationUser>(id);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="id">Propiedad clave Id.</param>
        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<NotificationUser>();
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad NotificationType.
        /// </summary>
        private int _notificationType;
        /// <summary>
        /// Atributo para la propiedad Message.
        /// </summary>
        private string _message = null;
        /// <summary>
        /// Atributo para la propiedad UserId.
        /// </summary>
        private int _userId;
        /// <summary>
        /// Atributo para la propiedad Enabled.
        /// </summary>
        private bool _enabled;
        /// <summary>
        /// Atributo para la propiedad Parameters.
        /// </summary>
        private string _parameters = null;
        /// <summary>
        /// Atributo para la propiedad CreateDate.
        /// </summary>
        private DateTime _createDate;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="id">Id key property.</param>
        public NotificationUser(int id) :
            this(NotificationUser.CreatePrimaryKey(id), null)
        {
        }
        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="id">Id key property.</param>
        public NotificationUser() :
            this(NotificationUser.CreatePrimaryKey(), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public NotificationUser(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad Id.
        /// </summary>
        /// <value>Propiedad Id.</value>
        [
        DescriptionKey("ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "ID", DbType = System.Data.DbType.String),
        ]
        public int Id
        {
            get
            {
                return (int)this._primaryKey[Properties.Id];
            }
            set
            {
                this._primaryKey[Properties.Id] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad NotificationType.
        /// </summary>
        /// <value>Propiedad NotificationType.</value>
        [
        DescriptionKey("NOTIFICATION_TYPE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "NOTIFICATION_TYPE", DbType = System.Data.DbType.String),
        ]
        public int NotificationType
        {
            get
            {
                return this._notificationType;
            }
            set
            {
                this._notificationType = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Message.
        /// </summary>
        /// <value>Propiedad Message.</value>
        [
        DescriptionKey("MESSAGE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "MESSAGE", DbType = System.Data.DbType.String),
        ]
        public string Message
        {
            get
            {
                return this._message;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Message);
                }
                this._message = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad UserId.
        /// </summary>
        /// <value>Propiedad UserId.</value>
        [
        DescriptionKey("USER_ID_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "USER_ID", DbType = System.Data.DbType.String),
        ]
        public int UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                this._userId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Enabled.
        /// </summary>
        /// <value>Propiedad Enabled.</value>
        [
        DescriptionKey("ENABLED_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "ENABLED", DbType = System.Data.DbType.String),
        ]
        public bool Enabled
        {
            get
            {
                return this._enabled;
            }
            set
            {
                this._enabled = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Parameters.
        /// </summary>
        /// <value>Propiedad Parameters.</value>
        [
        DescriptionKey("PARAMETERS_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "PARAMETERS", DbType = System.Data.DbType.String),
        ]
        public string Parameters
        {
            get
            {
                return this._parameters;
            }
            set
            {
                this._parameters = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad CreateDate.
        /// </summary>
        /// <value>Propiedad CreateDate.</value>
        [
        DescriptionKey("CREATE_DATE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "CREATE_DATE", DbType = System.Data.DbType.String),
        ]
        public DateTime CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }

    }
}