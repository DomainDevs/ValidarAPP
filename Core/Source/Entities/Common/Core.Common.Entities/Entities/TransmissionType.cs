/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Common.TransmissionType.dict v1.0
 * FileSize=4202 Header=253 CRC=2162203350
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.Common.Entities
{
    /// <summary>
    /// Definición de entidad TransmissionType.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Common.TransmissionType.dict"),
    Serializable(),
    DescriptionKey("TRANSMISSION_TYPE_ENTITY"),
    TableMap(TableName="TRANSMISSION_TYPE", Schema="COMM"),
    ]
    public partial class TransmissionType :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string TransmissionTypeCode = "TransmissionTypeCode";
			public static readonly string SmallDescription = "SmallDescription";
		}
        /// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="transmissionTypeCode">Propiedad clave TransmissionTypeCode.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.TransmissionTypeCode, null);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="transmissionTypeCode">Propiedad clave TransmissionTypeCode.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int transmissionTypeCode)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.TransmissionTypeCode, transmissionTypeCode);

		    return new PrimaryKey<T>(keys);
	    }
        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="transmissionTypeCode">Propiedad clave TransmissionTypeCode.</param>
        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<TransmissionType>();
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="transmissionTypeCode">Propiedad clave TransmissionTypeCode.</param>
        public static PrimaryKey CreatePrimaryKey(int transmissionTypeCode)
	    {
			return InternalCreatePrimaryKey<TransmissionType>(transmissionTypeCode);
		}
#endregion

	    //*** Object Attributes ********************************

		/// <summary>
		/// Atributo para la propiedad SmallDescription.
		/// </summary>
        private string _smallDescription = null;
        //*** Object Constructors ********************************
        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="transmissionTypeCode">TransmissionTypeCode key property.</param>
        public TransmissionType() :
            this(TransmissionType.CreatePrimaryKey(), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="transmissionTypeCode">TransmissionTypeCode key property.</param>
        public TransmissionType(int transmissionTypeCode):
			this(TransmissionType.CreatePrimaryKey(transmissionTypeCode), null)
	    {
	    }

		/// <summary>
		/// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
		/// </summary>
		/// <param name="key">
		/// Identificador de la instancia de la entidad.
		/// </param>
		/// <param name="initialValues">
		/// Valores para establecer el estado de la instancia.
		/// </param>
	    public TransmissionType(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad TransmissionTypeCode.
		/// </summary>
		/// <value>Propiedad TransmissionTypeCode.</value>
	    [
		DescriptionKey("TRANSMISSION_TYPE_CODE_PROPERTY"),
		PersistentProperty(IsKey = true, KeyType = "None"),//Cambios
        ColumnMap(ColumnName="TRANSMISSION_TYPE_CD", DbType=System.Data.DbType.String),
	    ]
        public int TransmissionTypeCode
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.TransmissionTypeCode];
		    }
		    set
		    {
				this._primaryKey[Properties.TransmissionTypeCode] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad SmallDescription.
		/// </summary>
		/// <value>Propiedad SmallDescription.</value>
	    [
		DescriptionKey("SMALL_DESCRIPTION_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="SMALL_DESCRIPTION", DbType=System.Data.DbType.String),
	    ]


















        public string SmallDescription
	    {
		    get
		    {
			    return this._smallDescription;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.SmallDescription);
				}
				this._smallDescription = value;
			}
	    }

    }
}