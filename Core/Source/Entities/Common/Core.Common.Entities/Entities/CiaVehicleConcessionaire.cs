/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Common.CiaVehicleConcessionaire.dict v1.0
 * FileSize=5638 Header=261 CRC=1342087184
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.Common.Entities
{
    /// <summary>
    /// Definición de entidad CiaVehicleConcessionaire.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Common.CiaVehicleConcessionaire.dict"),
    Serializable(),
    DescriptionKey("CIA_VEHICLE_CONCESSIONAIRE_ENTITY"),
    TableMap(TableName="CIA_VEHICLE_CONCESSIONAIRE", Schema="COMM"),
    ]
    public partial class CiaVehicleConcessionaire :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string ConcessionaireId = "ConcessionaireId";
			public static readonly string ConcessionaireDescription = "ConcessionaireDescription";
			public static readonly string VehicleMakeCode = "VehicleMakeCode";
			public static readonly string IsEnabled = "IsEnabled";
		}

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="concessionaireId">Propiedad clave ConcessionaireId.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>(int concessionaireId)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.ConcessionaireId, concessionaireId);

		    return new PrimaryKey<T>(keys);
	    }

        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.ConcessionaireId, null);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="concessionaireId">Propiedad clave ConcessionaireId.</param>
        public static PrimaryKey CreatePrimaryKey(int concessionaireId)
	    {
			return InternalCreatePrimaryKey<CiaVehicleConcessionaire>(concessionaireId);
		}

        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<CiaVehicleConcessionaire>();
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad ConcessionaireDescription.
        /// </summary>
        private string _concessionaireDescription = null;
		/// <summary>
		/// Atributo para la propiedad VehicleMakeCode.
		/// </summary>
        private int _vehicleMakeCode;
		/// <summary>
		/// Atributo para la propiedad IsEnabled.
		/// </summary>
        private bool _isEnabled;
	    //*** Object Constructors ********************************

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="concessionaireId">ConcessionaireId key property.</param>
	    public CiaVehicleConcessionaire(int concessionaireId):
			this(CiaVehicleConcessionaire.CreatePrimaryKey(concessionaireId), null)
	    {
	    }

        public CiaVehicleConcessionaire() :
        this(CiaVehicleConcessionaire.CreatePrimaryKey(), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public CiaVehicleConcessionaire(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad ConcessionaireId.
		/// </summary>
		/// <value>Propiedad ConcessionaireId.</value>
	    [
		DescriptionKey("CONCESSIONAIRE_ID_PROPERTY"),
		PersistentProperty(IsKey = true, KeyType = "Identity"),
        ColumnMap(ColumnName="CONCESSIONAIRE_ID", DbType=System.Data.DbType.String),
	    ]
        public int ConcessionaireId
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.ConcessionaireId];
		    }
		    set
		    {
				this._primaryKey[Properties.ConcessionaireId] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad ConcessionaireDescription.
		/// </summary>
		/// <value>Propiedad ConcessionaireDescription.</value>
	    [
		DescriptionKey("CONCESSIONAIRE_DESCRIPTION_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="CONCESSIONAIRE_DESCRIPTION", DbType=System.Data.DbType.String),
	    ]
        public string ConcessionaireDescription
	    {
		    get
		    {
			    return this._concessionaireDescription;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.ConcessionaireDescription);
				}
				this._concessionaireDescription = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad VehicleMakeCode.
		/// </summary>
		/// <value>Propiedad VehicleMakeCode.</value>
	    [
		DescriptionKey("VEHICLE_MAKE_CODE_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="VEHICLE_MAKE_CD", DbType=System.Data.DbType.String),
	    ]
        public int VehicleMakeCode
	    {
		    get
		    {
			    return this._vehicleMakeCode;
		    }
		    set
		    {
				this._vehicleMakeCode = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad IsEnabled.
		/// </summary>
		/// <value>Propiedad IsEnabled.</value>
	    [
		DescriptionKey("IS_ENABLED_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="IS_ENABLED", DbType=System.Data.DbType.String),
	    ]
        public bool IsEnabled
	    {
		    get
		    {
			    return this._isEnabled;
		    }
		    set
		    {
				this._isEnabled = value;
			}
	    }

    }
}
