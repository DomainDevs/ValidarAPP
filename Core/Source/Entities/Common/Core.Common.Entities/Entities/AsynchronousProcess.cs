/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Common.AsynchronousProcess.dict v1.0
 * FileSize=8444 Header=256 CRC=2970766112
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.Common.Entities
{
    /// <summary>
    /// Definición de entidad AsynchronousProcess.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Common.AsynchronousProcess.dict"),
    Serializable(),
    DescriptionKey("ASYNCHRONOUS_PROCESS_ENTITY"),
    TableMap(TableName = "ASYNCHRONOUS_PROCESS", Schema = "COMM"),
    ]
    public partial class AsynchronousProcess :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string ProcessId = "ProcessId";
            public static readonly string Description = "Description";
            public static readonly string BeginDate = "BeginDate";
            public static readonly string EndDate = "EndDate";
            public static readonly string UserId = "UserId";
            public static readonly string Status = "Status";
            public static readonly string HasError = "HasError";
            public static readonly string ErrorDescription = "ErrorDescription";
            public static readonly string IssuanceStatus = "IssuanceStatus";
            //public static readonly string Active = "Active";
            //public static readonly string StatusId = "StatusId";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="processId">Propiedad clave ProcessId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int processId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.ProcessId, processId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="processId">Propiedad clave ProcessId.</param>
        public static PrimaryKey CreatePrimaryKey(int processId)
        {
            return InternalCreatePrimaryKey<AsynchronousProcess>(processId);
        }

        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.ProcessId, null);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<AsynchronousProcess>();
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad Description.
        /// </summary>
        private string _description = null;
        /// <summary>
        /// Atributo para la propiedad BeginDate.
        /// </summary>
        private DateTime? _beginDate = null;
        /// <summary>
        /// Atributo para la propiedad EndDate.
        /// </summary>
        private DateTime? _endDate = null;
        /// <summary>
        /// Atributo para la propiedad UserId.
        /// </summary>
        private int? _userId = null;
        /// <summary>
        /// Atributo para la propiedad HasError.
        /// </summary>
        private bool? _hasError = null;
        /// <summary>
        /// Atributo para la propiedad ErrorDescription.
        /// </summary>
        private string _errorDescription = null;
        /// <summary>
        /// Atributo para la propiedad IssuanceStatus.
        /// </summary>
        private int? _issuanceStatus = null;
        /// <summary>
        /// Atributo para la propiedad Active.
        /// </summary>
        //private bool? _active = null;
        /// <summary>
        /// Atributo para la propiedad Status.
        /// </summary>
        private bool? _status = null;
        /// <summary>
        /// Atributo para la propiedad StatusId.
        /// </summary>
        //private int? _statusId = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="processId">ProcessId key property.</param>
        public AsynchronousProcess(int processId) :
            this(AsynchronousProcess.CreatePrimaryKey(processId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public AsynchronousProcess(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        public AsynchronousProcess() :
            this(AsynchronousProcess.CreatePrimaryKey(), null)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad ProcessId.
        /// </summary>
        /// <value>Propiedad ProcessId.</value>
        [
        DescriptionKey("PROCESS_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "PROCESS_ID", DbType = System.Data.DbType.String),
        ]
        public int ProcessId
        {
            get
            {
                return (int)this._primaryKey[Properties.ProcessId];
            }
            set
            {
                this._primaryKey[Properties.ProcessId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Description.
        /// </summary>
        /// <value>Propiedad Description.</value>
        [
        DescriptionKey("DESCRIPTION_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad BeginDate.
        /// </summary>
        /// <value>Propiedad BeginDate.</value>
        [
        DescriptionKey("BEGIN_DATE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "BEGIN_DATE", DbType = System.Data.DbType.String),
        ]
        public DateTime? BeginDate
        {
            get
            {
                return this._beginDate;
            }
            set
            {
                this._beginDate = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad EndDate.
        /// </summary>
        /// <value>Propiedad EndDate.</value>
        [
        DescriptionKey("END_DATE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "END_DATE", DbType = System.Data.DbType.String),
        ]
        public DateTime? EndDate
        {
            get
            {
                return this._endDate;
            }
            set
            {
                this._endDate = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad UserId.
        /// </summary>
        /// <value>Propiedad UserId.</value>
        [
        DescriptionKey("USER_ID_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "USER_ID", DbType = System.Data.DbType.String),
        ]
        public int? UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                this._userId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad HasError.
        /// </summary>
        /// <value>Propiedad HasError.</value>
        [
        DescriptionKey("HAS_ERROR_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "HAS_ERROR", DbType = System.Data.DbType.String),
        ]
        public bool? HasError
        {
            get
            {
                return this._hasError;
            }
            set
            {
                this._hasError = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ErrorDescription.
        /// </summary>
        /// <value>Propiedad ErrorDescription.</value>
        [
        DescriptionKey("ERROR_DESCRIPTION_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "ERROR_DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string ErrorDescription
        {
            get
            {
                return this._errorDescription;
            }
            set
            {
                this._errorDescription = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Active.
        /// </summary>
        /// <value>Propiedad Active.</value>
        //[
        //DescriptionKey("ACTIVE_PROPERTY"),
        //PersistentProperty(IsNullable = true),
        //ColumnMap(ColumnName = "ACTIVE", DbType = System.Data.DbType.String),
        //]
        //public bool? Active
        //{
        //    get
        //    {
        //        return this._active;
        //    }
        //    set
        //    {
        //        this._active = value;
        //    }
        //}

        /// <summary>
        /// Devuelve o setea el valor de la propiedad StatusId.
        /// </summary>
        /// <value>Propiedad StatusId.</value>
        //[
        //DescriptionKey("STATUS_ID_PROPERTY"),
        //PersistentProperty(IsNullable = true),
        //ColumnMap(ColumnName = "STATUS_ID", DbType = System.Data.DbType.String),
        //]
        //public int? StatusId
        //{
        //    get
        //    {
        //        return this._statusId;
        //    }
        //    set
        //    {
        //        this._statusId = value;
        //    }
        //}

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IssuanceStatus.
        /// </summary>
        /// <value>Propiedad IssuanceStatus.</value>
        [
        DescriptionKey("ISSUANCE_STATUS_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "ISSUANCE_STATUS", DbType = System.Data.DbType.String),
        ]
        public int? IssuanceStatus
        {
            get
            {
                return this._issuanceStatus;
            }
            set
            {
                this._issuanceStatus = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IssuanceStatus.
        /// </summary>
        /// <value>Propiedad IssuanceStatus.</value>
        [
        DescriptionKey("STATUS_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "STATUS", DbType = System.Data.DbType.String),
        ]
        public bool? Status
        {
            get
            {
                return this._status;
            }
            set
            {
                this._status = value;
            }
        }

    }
}