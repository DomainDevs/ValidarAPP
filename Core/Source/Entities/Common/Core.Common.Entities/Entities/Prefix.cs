/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Common.Prefix.dict v1.0
 * FileSize=8331 Header=243 CRC=2224861437
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.Common.Entities
{
    /// <summary>
    /// Definición de entidad Prefix.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Common.Prefix.dict"),
    Serializable(),
    DescriptionKey("PREFIX_ENTITY"),
    TableMap(TableName = "PREFIX", Schema = "COMM"),
    ]
    public partial class Prefix :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string PrefixCode = "PrefixCode";
            public static readonly string Description = "Description";
            public static readonly string SmallDescription = "SmallDescription";
            public static readonly string TinyDescription = "TinyDescription";
            public static readonly string HasDetailCommiss = "HasDetailCommiss";
            public static readonly string ProfitCenterCode = "ProfitCenterCode";
            public static readonly string PrefixTypeCode = "PrefixTypeCode";
            public static readonly string RuleSetId = "RuleSetId";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="prefixCode">Propiedad clave PrefixCode.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int prefixCode)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.PrefixCode, prefixCode);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <author>Kevin Vargas</author>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.PrefixCode, null);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="prefixCode">Propiedad clave PrefixCode.</param>
        public static PrimaryKey CreatePrimaryKey(int prefixCode)
        {
            return InternalCreatePrimaryKey<Prefix>(prefixCode);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <author>Kevin Vargas</author>
        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<Prefix>();
        }

        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad Description.
        /// </summary>
        private string _description = null;
        /// <summary>
        /// Atributo para la propiedad SmallDescription.
        /// </summary>
        private string _smallDescription = null;
        /// <summary>
        /// Atributo para la propiedad TinyDescription.
        /// </summary>
        private string _tinyDescription = null;
        /// <summary>
        /// Atributo para la propiedad HasDetailCommiss.
        /// </summary>
        private bool _hasDetailCommiss;
        /// <summary>
        /// Atributo para la propiedad ProfitCenterCode.
        /// </summary>
        private int _profitCenterCode;
        /// <summary>
        /// Atributo para la propiedad PrefixTypeCode.
        /// </summary>
        private int _prefixTypeCode;
        /// <summary>
        /// Atributo para la propiedad RuleSetId.
        /// </summary>
        private int? _ruleSetId = null;

        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="prefixCode">PrefixCode key property.</param>
        public Prefix(int prefixCode) :
            this(Prefix.CreatePrimaryKey(prefixCode), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="prefixCode">PrefixCode key property.</param>
        public Prefix() :
            this(Prefix.CreatePrimaryKey(), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public Prefix(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad PrefixCode.
        /// </summary>
        /// <value>Propiedad PrefixCode.</value>
        [
        DescriptionKey("PREFIX_CODE_PROPERTY"),
        PersistentProperty(IsKey = true, KeyType = "None"),
        ColumnMap(ColumnName = "PREFIX_CD", DbType = System.Data.DbType.String),
        ]
        public int PrefixCode
        {
            get
            {
                return (int)this._primaryKey[Properties.PrefixCode];
            }
            set
            {
                this._primaryKey[Properties.PrefixCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Description.
        /// </summary>
        /// <value>Propiedad Description.</value>
        [
        DescriptionKey("DESCRIPTION_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Description);
                }
                this._description = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad SmallDescription.
        /// </summary>
        /// <value>Propiedad SmallDescription.</value>
        [
        DescriptionKey("SMALL_DESCRIPTION_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "SMALL_DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string SmallDescription
        {
            get
            {
                return this._smallDescription;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.SmallDescription);
                }
                this._smallDescription = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad TinyDescription.
        /// </summary>
        /// <value>Propiedad TinyDescription.</value>
        [
        DescriptionKey("TINY_DESCRIPTION_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "TINY_DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string TinyDescription
        {
            get
            {
                return this._tinyDescription;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.TinyDescription);
                }
                this._tinyDescription = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad HasDetailCommiss.
        /// </summary>
        /// <value>Propiedad HasDetailCommiss.</value>
        [
        DescriptionKey("HAS_DETAIL_COMMISS_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "HAS_DETAIL_COMMISS", DbType = System.Data.DbType.String),
        ]
        public bool HasDetailCommiss
        {
            get
            {
                return this._hasDetailCommiss;
            }
            set
            {
                this._hasDetailCommiss = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ProfitCenterCode.
        /// </summary>
        /// <value>Propiedad ProfitCenterCode.</value>
        [
        DescriptionKey("PROFIT_CENTER_CODE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "PROFIT_CENTER_CD", DbType = System.Data.DbType.String),
        ]
        public int ProfitCenterCode
        {
            get
            {
                return this._profitCenterCode;
            }
            set
            {
                this._profitCenterCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad PrefixTypeCode.
        /// </summary>
        /// <value>Propiedad PrefixTypeCode.</value>
        [
        DescriptionKey("PREFIX_TYPE_CODE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "PREFIX_TYPE_CD", DbType = System.Data.DbType.String),
        ]
        public int PrefixTypeCode
        {
            get
            {
                return this._prefixTypeCode;
            }
            set
            {
                this._prefixTypeCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad RuleSetId.
        /// </summary>
        /// <value>Propiedad RuleSetId.</value>
        [
        DescriptionKey("RULE_SET_ID_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "RULE_SET_ID", DbType = System.Data.DbType.String),
        ]
        public int? RuleSetId
        {
            get
            {
                return this._ruleSetId;
            }
            set
            {
                this._ruleSetId = value;
            }
        }

    }
}