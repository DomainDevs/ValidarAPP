/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Common.CptAssistanceText.dict v1.0
 * FileSize=7271 Header=253 CRC=840795550
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.Common.Entities
{
    /// <summary>
    /// Definición de entidad CptAssistanceText.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Common.CptAssistanceText.dict"),
    Serializable(),
    DescriptionKey("CPT_ASSISTANCE_TEXT_ENTITY"),
    TableMap(TableName = "CPT_ASSISTANCE_TEXT", Schema = "COMM"),
    ]
    public partial class CptAssistanceText :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string AssistanceTextId = "AssistanceTextId";
            public static readonly string ClauseCd3g = "ClauseCd3g";
            public static readonly string ClauseCd2g = "ClauseCd2g";
            public static readonly string PrefixCode = "PrefixCode";
            public static readonly string AssistanceCode = "AssistanceCode";
            public static readonly string Text = "Text";
            public static readonly string Enable = "Enable";
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        public static new PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<CptAssistanceText>();
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.AssistanceTextId, null);

            return new PrimaryKey<T>(keys);
        }
        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="assistanceTextId">Propiedad clave AssistanceTextId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int? assistanceTextId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.AssistanceTextId, assistanceTextId);

            return new PrimaryKey<T>(keys);
        }



        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="assistanceTextId">Propiedad clave AssistanceTextId.</param>
        public static PrimaryKey CreatePrimaryKey(int? assistanceTextId)
        {
            return InternalCreatePrimaryKey<CptAssistanceText>(assistanceTextId);
        }


        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad ClauseCd3g.
        /// </summary>
        private int? _clauseCd3g = null;
        /// <summary>
        /// Atributo para la propiedad ClauseCd2g.
        /// </summary>
        private int? _clauseCd2g = null;
        /// <summary>
        /// Atributo para la propiedad PrefixCode.
        /// </summary>
        private int _prefixCode;
        /// <summary>
        /// Atributo para la propiedad AssistanceCode.
        /// </summary>
        private int _assistanceCode;
        /// <summary>
        /// Atributo para la propiedad Text.
        /// </summary>
        private string _text = null;
        /// <summary>
        /// Atributo para la propiedad Enable.
        /// </summary>
        private bool _enable;
        //*** Object Constructors ********************************



        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="assistanceTextId">AssistanceTextId key property.</param>
        public CptAssistanceText(int? assistanceTextId) :
            this(CptAssistanceText.CreatePrimaryKey(assistanceTextId), null)
        {
        }

        /// <summary>
        /// Constructor de entidad sin parametros<see cref="CptAssistanceText"/> class.
        /// </summary>
        public CptAssistanceText()
            : this(CreatePrimaryKey(), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public CptAssistanceText(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad AssistanceTextId.
        /// </summary>
        /// <value>Propiedad AssistanceTextId.</value>
        [
        DescriptionKey("ASSISTANCE_TEXT_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "ASSISTANCE_TEXT_ID", DbType = System.Data.DbType.String),
        ]
        public int? AssistanceTextId
        {
            get
            {
                return (int)this._primaryKey[Properties.AssistanceTextId];
            }
            set
            {
                this._primaryKey[Properties.AssistanceTextId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ClauseCd3g.
        /// </summary>
        /// <value>Propiedad ClauseCd3g.</value>
        [
        DescriptionKey("CLAUSE_CD3G_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "CLAUSE_CD_3G", DbType = System.Data.DbType.String),
        ]
        public int? ClauseCd3g
        {
            get
            {
                return this._clauseCd3g;
            }
            set
            {
                this._clauseCd3g = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ClauseCd2g.
        /// </summary>
        /// <value>Propiedad ClauseCd2g.</value>
        [
        DescriptionKey("CLAUSE_CD2G_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "CLAUSE_CD_2G", DbType = System.Data.DbType.String),
        ]
        public int? ClauseCd2g
        {
            get
            {
                return this._clauseCd2g;
            }
            set
            {
                this._clauseCd2g = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad PrefixCode.
        /// </summary>
        /// <value>Propiedad PrefixCode.</value>
        [
        DescriptionKey("PREFIX_CODE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "PREFIX_CD", DbType = System.Data.DbType.String),
        ]
        public int PrefixCode
        {
            get
            {
                return this._prefixCode;
            }
            set
            {
                this._prefixCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad AssistanceCode.
        /// </summary>
        /// <value>Propiedad AssistanceCode.</value>
        [
        DescriptionKey("ASSISTANCE_CODE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "ASSISTANCE_CD", DbType = System.Data.DbType.String),
        ]
        public int AssistanceCode
        {
            get
            {
                return this._assistanceCode;
            }
            set
            {
                this._assistanceCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Text.
        /// </summary>
        /// <value>Propiedad Text.</value>
        [
        DescriptionKey("TEXT_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "TEXT", DbType = System.Data.DbType.String),
        ]
        public string Text
        {
            get
            {
                return this._text;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Text);
                }
                this._text = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Enable.
        /// </summary>
        /// <value>Propiedad Enable.</value>
        [
        DescriptionKey("ENABLE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "ENABLE", DbType = System.Data.DbType.String),
        ]
        public bool Enable
        {
            get
            {
                return this._enable;
            }
            set
            {
                this._enable = value;
            }
        }

    }
}
