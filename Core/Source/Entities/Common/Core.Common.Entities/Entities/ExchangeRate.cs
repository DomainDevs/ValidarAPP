/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Common.ExchangeRate.dict v1.0
 * FileSize=5346 Header=249 CRC=2272762291
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.Common.Entities
{
    /// <summary>
    /// Definición de entidad ExchangeRate.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Common.ExchangeRate.dict"),
    Serializable(),
    DescriptionKey("EXCHANGE_RATE_ENTITY"),
    TableMap(TableName = "EXCHANGE_RATE", Schema = "COMM"),
    ]
    public partial class ExchangeRate :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string RateDate = "RateDate";
            public static readonly string CurrencyCode = "CurrencyCode";
            public static readonly string SellAmount = "SellAmount";
            public static readonly string BuyAmount = "BuyAmount";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="rateDate">Propiedad clave RateDate.</param>
        /// <param name="currencyCode">Propiedad clave CurrencyCode.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(DateTime rateDate, int currencyCode)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.RateDate, rateDate);
            keys.Add(Properties.CurrencyCode, currencyCode);

            return new PrimaryKey<T>(keys);
        }

        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.RateDate, null);
            keys.Add(Properties.CurrencyCode, null);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="rateDate">Propiedad clave RateDate.</param>
        /// <param name="currencyCode">Propiedad clave CurrencyCode.</param>
        public static PrimaryKey CreatePrimaryKey(DateTime rateDate, int currencyCode)
        {
            return InternalCreatePrimaryKey<ExchangeRate>(rateDate, currencyCode);
        }

        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<ExchangeRate>();
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad SellAmount.
        /// </summary>
        private decimal _sellAmount;
        /// <summary>
        /// Atributo para la propiedad BuyAmount.
        /// </summary>
        private decimal? _buyAmount = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="rateDate">RateDate key property.</param>
        /// <param name="currencyCode">CurrencyCode key property.</param>
        public ExchangeRate(DateTime rateDate, int currencyCode) :
            this(ExchangeRate.CreatePrimaryKey(rateDate, currencyCode), null)
        {
        }

        public ExchangeRate() :
           this(ExchangeRate.CreatePrimaryKey(), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public ExchangeRate(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad RateDate.
        /// </summary>
        /// <value>Propiedad RateDate.</value>
        [
        DescriptionKey("RATE_DATE_PROPERTY"),
        PersistentProperty(IsKey = true, KeyType ="None"),
        ColumnMap(ColumnName = "RATE_DATE", DbType = System.Data.DbType.String),
        ]
        public DateTime RateDate
        {
            get
            {
                return (DateTime)this._primaryKey[Properties.RateDate];
            }
            set
            {
                this._primaryKey[Properties.RateDate] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad CurrencyCode.
        /// </summary>
        /// <value>Propiedad CurrencyCode.</value>
        [
        DescriptionKey("CURRENCY_CODE_PROPERTY"),
        PersistentProperty(IsKey = true, KeyType ="None"),
        ColumnMap(ColumnName = "CURRENCY_CD", DbType = System.Data.DbType.String),
        ]
        public int CurrencyCode
        {
            get
            {
                return (int)this._primaryKey[Properties.CurrencyCode];
            }
            set
            {
                this._primaryKey[Properties.CurrencyCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad SellAmount.
        /// </summary>
        /// <value>Propiedad SellAmount.</value>
        [
        DescriptionKey("SELL_AMOUNT_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "SELL_AMT", DbType = System.Data.DbType.Decimal),
        ]
        public decimal SellAmount
        {
            get
            {
                return this._sellAmount;
            }
            set
            {
                this._sellAmount = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad BuyAmount.
        /// </summary>
        /// <value>Propiedad BuyAmount.</value>
        [
        DescriptionKey("BUY_AMOUNT_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "BUY_AMT", DbType = System.Data.DbType.Decimal),
        ]
        public decimal? BuyAmount
        {
            get
            {
                return this._buyAmount;
            }
            set
            {
                this._buyAmount = value;
            }
        }

    }
}