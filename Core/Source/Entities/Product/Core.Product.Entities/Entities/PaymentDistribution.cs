/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Product.PaymentDistribution.dict v1.0
 * FileSize=6405 Header=256 CRC=309728343
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.Product.Entities
{
    /// <summary>
    /// Definición de entidad PaymentDistribution.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Product.PaymentDistribution.dict"),
    Serializable(),
    DescriptionKey("PAYMENT_DISTRIBUTION_ENTITY"),
    TableMap(TableName = "PAYMENT_DISTRIBUTION", Schema = "PROD"),
    ]
    public partial class PaymentDistribution :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string PaymentScheduleId = "PaymentScheduleId";
            public static readonly string PaymentNumber = "PaymentNumber";
            public static readonly string GapUnitCode = "GapUnitCode";
            public static readonly string GapQuantity = "GapQuantity";
            public static readonly string PaymentPercentage = "PaymentPercentage";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="paymentScheduleId">Propiedad clave PaymentScheduleId.</param>
        /// <param name="paymentNumber">Propiedad clave PaymentNumber.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int paymentScheduleId, int paymentNumber)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.PaymentScheduleId, paymentScheduleId);
            keys.Add(Properties.PaymentNumber, paymentNumber);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="paymentScheduleId">Propiedad clave PaymentScheduleId.</param>
        /// <param name="paymentNumber">Propiedad clave PaymentNumber.</param>
        public static PrimaryKey CreatePrimaryKey(int paymentScheduleId, int paymentNumber)
        {
            return InternalCreatePrimaryKey<PaymentDistribution>(paymentScheduleId, paymentNumber);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad GapUnitCode.
        /// </summary>
        private int? _gapUnitCode = null;
        /// <summary>
        /// Atributo para la propiedad GapQuantity.
        /// </summary>
        private int? _gapQuantity = null;
        /// <summary>
        /// Atributo para la propiedad PaymentPercentage.
        /// </summary>
        private decimal? _paymentPercentage = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="paymentScheduleId">PaymentScheduleId key property.</param>
        /// <param name="paymentNumber">PaymentNumber key property.</param>
        public PaymentDistribution(int paymentScheduleId, int paymentNumber) :
            this(PaymentDistribution.CreatePrimaryKey(paymentScheduleId, paymentNumber), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public PaymentDistribution(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad PaymentScheduleId.
        /// </summary>
        /// <value>Propiedad PaymentScheduleId.</value>
        [
        DescriptionKey("PAYMENT_SCHEDULE_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "PAYMENT_SCHEDULE_ID", DbType = System.Data.DbType.String),
        ]
        public int PaymentScheduleId
        {
            get
            {
                return (int)this._primaryKey[Properties.PaymentScheduleId];
            }
            set
            {
                this._primaryKey[Properties.PaymentScheduleId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad PaymentNumber.
        /// </summary>
        /// <value>Propiedad PaymentNumber.</value>
        [
        DescriptionKey("PAYMENT_NUMBER_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "PAYMENT_NUMBER", DbType = System.Data.DbType.String),
        ]
        public int PaymentNumber
        {
            get
            {
                return (int)this._primaryKey[Properties.PaymentNumber];
            }
            set
            {
                this._primaryKey[Properties.PaymentNumber] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad GapUnitCode.
        /// </summary>
        /// <value>Propiedad GapUnitCode.</value>
        [
        DescriptionKey("GAP_UNIT_CODE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "GAP_UNIT_CD", DbType = System.Data.DbType.String),
        ]
        public int? GapUnitCode
        {
            get
            {
                return this._gapUnitCode;
            }
            set
            {
                this._gapUnitCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad GapQuantity.
        /// </summary>
        /// <value>Propiedad GapQuantity.</value>
        [
        DescriptionKey("GAP_QUANTITY_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "GAP_QTY", DbType = System.Data.DbType.String),
        ]
        public int? GapQuantity
        {
            get
            {
                return this._gapQuantity;
            }
            set
            {
                this._gapQuantity = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad PaymentPercentage.
        /// </summary>
        /// <value>Propiedad PaymentPercentage.</value>
        [
        DescriptionKey("PAYMENT_PERCENTAGE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "PAYMENT_PCT", DbType = System.Data.DbType.Decimal),
        ]
        public decimal? PaymentPercentage
        {
            get
            {
                return this._paymentPercentage;
            }
            set
            {
                this._paymentPercentage = value;
            }
        }

    }
}