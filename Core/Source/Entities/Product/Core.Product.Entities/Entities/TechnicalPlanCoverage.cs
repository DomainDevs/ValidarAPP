/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Product.TechnicalPlanCoverage.dict v1.0
 * FileSize=6377 Header=259 CRC=1011470168
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.Product.Entities
{
    /// <summary>
    /// Definición de entidad TechnicalPlanCoverage.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Product.TechnicalPlanCoverage.dict"),
    Serializable(),
    DescriptionKey("TECHNICAL_PLAN_COVERAGE_ENTITY"),
    TableMap(TableName = "TECHNICAL_PLAN_COVERAGE", Schema = "PROD"),
    ]
    public partial class TechnicalPlanCoverage :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string TechnicalPlanId = "TechnicalPlanId";
            public static readonly string CoverageId = "CoverageId";
            public static readonly string IsSublimit = "IsSublimit";
            public static readonly string MainCoverageId = "MainCoverageId";
            public static readonly string MainCoveragePercentage = "MainCoveragePercentage";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="technicalPlanId">Propiedad clave TechnicalPlanId.</param>
        /// <param name="coverageId">Propiedad clave CoverageId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int technicalPlanId, int coverageId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.TechnicalPlanId, technicalPlanId);
            keys.Add(Properties.CoverageId, coverageId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="technicalPlanId">Propiedad clave TechnicalPlanId.</param>
        /// <param name="coverageId">Propiedad clave CoverageId.</param>
        public static PrimaryKey CreatePrimaryKey(int technicalPlanId, int coverageId)
        {
            return InternalCreatePrimaryKey<TechnicalPlanCoverage>(technicalPlanId, coverageId);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad IsSublimit.
        /// </summary>
        private bool _isSublimit;
        /// <summary>
        /// Atributo para la propiedad MainCoverageId.
        /// </summary>
        private int? _mainCoverageId = null;
        /// <summary>
        /// Atributo para la propiedad MainCoveragePercentage.
        /// </summary>
        private decimal? _mainCoveragePercentage = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="technicalPlanId">TechnicalPlanId key property.</param>
        /// <param name="coverageId">CoverageId key property.</param>
        public TechnicalPlanCoverage(int technicalPlanId, int coverageId) :
            this(TechnicalPlanCoverage.CreatePrimaryKey(technicalPlanId, coverageId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public TechnicalPlanCoverage(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad TechnicalPlanId.
        /// </summary>
        /// <value>Propiedad TechnicalPlanId.</value>
        [
        DescriptionKey("TECHNICAL_PLAN_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "TECHNICAL_PLAN_ID", DbType = System.Data.DbType.String),
        ]
        public int TechnicalPlanId
        {
            get
            {
                return (int)this._primaryKey[Properties.TechnicalPlanId];
            }
            set
            {
                this._primaryKey[Properties.TechnicalPlanId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad CoverageId.
        /// </summary>
        /// <value>Propiedad CoverageId.</value>
        [
        DescriptionKey("COVERAGE_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "COVERAGE_ID", DbType = System.Data.DbType.String),
        ]
        public int CoverageId
        {
            get
            {
                return (int)this._primaryKey[Properties.CoverageId];
            }
            set
            {
                this._primaryKey[Properties.CoverageId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IsSublimit.
        /// </summary>
        /// <value>Propiedad IsSublimit.</value>
        [
        DescriptionKey("IS_SUBLIMIT_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "IS_SUBLIMIT", DbType = System.Data.DbType.String),
        ]
        public bool IsSublimit
        {
            get
            {
                return this._isSublimit;
            }
            set
            {
                this._isSublimit = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad MainCoverageId.
        /// </summary>
        /// <value>Propiedad MainCoverageId.</value>
        [
        DescriptionKey("MAIN_COVERAGE_ID_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "MAIN_COVERAGE_ID", DbType = System.Data.DbType.String),
        ]
        public int? MainCoverageId
        {
            get
            {
                return this._mainCoverageId;
            }
            set
            {
                this._mainCoverageId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad MainCoveragePercentage.
        /// </summary>
        /// <value>Propiedad MainCoveragePercentage.</value>
        [
        DescriptionKey("MAIN_COVERAGE_PERCENTAGE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "MAIN_COVERAGE_PCT", DbType = System.Data.DbType.Decimal),
        ]
        public decimal? MainCoveragePercentage
        {
            get
            {
                return this._mainCoveragePercentage;
            }
            set
            {
                this._mainCoveragePercentage = value;
            }
        }

    }
}