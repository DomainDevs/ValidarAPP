/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Product.TechnicalPlan.dict v1.0
 * FileSize=6962 Header=251 CRC=1292014624
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.Product.Entities
{
    /// <summary>
    /// Definición de entidad TechnicalPlan.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Product.TechnicalPlan.dict"),
    Serializable(),
    DescriptionKey("TECHNICAL_PLAN_ENTITY"),
    TableMap(TableName="TECHNICAL_PLAN", Schema="PROD"),
    ]
    public partial class TechnicalPlan :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string TechnicalPlanId = "TechnicalPlanId";
			public static readonly string Description = "Description";
			public static readonly string SmallDescription = "SmallDescription";
			public static readonly string CoveredRiskTypeCode = "CoveredRiskTypeCode";
			public static readonly string CurrentFrom = "CurrentFrom";
			public static readonly string CurrentTo = "CurrentTo";
		}

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="technicalPlanId">Propiedad clave TechnicalPlanId.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>(int technicalPlanId)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.TechnicalPlanId, technicalPlanId);

		    return new PrimaryKey<T>(keys);
	    }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.TechnicalPlanId, null);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="technicalPlanId">Propiedad clave TechnicalPlanId.</param>
        public static PrimaryKey CreatePrimaryKey(int technicalPlanId)
	    {
			return InternalCreatePrimaryKey<TechnicalPlan>(technicalPlanId);
		}

        /// <summary>
        /// Crea una clave primaria para esta clase sin parametros.
        /// </summary>
        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<TechnicalPlan>();
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad Description.
        /// </summary>
        private string _description = null;
		/// <summary>
		/// Atributo para la propiedad SmallDescription.
		/// </summary>
        private string _smallDescription = null;
		/// <summary>
		/// Atributo para la propiedad CoveredRiskTypeCode.
		/// </summary>
        private int _coveredRiskTypeCode;
		/// <summary>
		/// Atributo para la propiedad CurrentFrom.
		/// </summary>
        private DateTime _currentFrom;
		/// <summary>
		/// Atributo para la propiedad CurrentTo.
		/// </summary>
        private DateTime? _currentTo = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        public TechnicalPlan() :
            this(TechnicalPlan.CreatePrimaryKey(), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="technicalPlanId">TechnicalPlanId key property.</param>
        public TechnicalPlan(int technicalPlanId):
			this(TechnicalPlan.CreatePrimaryKey(technicalPlanId), null)
	    {
	    }

		/// <summary>
		/// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
		/// </summary>
		/// <param name="key">
		/// Identificador de la instancia de la entidad.
		/// </param>
		/// <param name="initialValues">
		/// Valores para establecer el estado de la instancia.
		/// </param>
	    public TechnicalPlan(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad TechnicalPlanId.
		/// </summary>
		/// <value>Propiedad TechnicalPlanId.</value>
	    [
		DescriptionKey("TECHNICAL_PLAN_ID_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="TECHNICAL_PLAN_ID", DbType=System.Data.DbType.String),
	    ]
        public int TechnicalPlanId
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.TechnicalPlanId];
		    }
		    set
		    {
				this._primaryKey[Properties.TechnicalPlanId] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Description.
		/// </summary>
		/// <value>Propiedad Description.</value>
	    [
		DescriptionKey("DESCRIPTION_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="DESCRIPTION", DbType=System.Data.DbType.String),
	    ]
        public string Description
	    {
		    get
		    {
			    return this._description;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.Description);
				}
				this._description = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad SmallDescription.
		/// </summary>
		/// <value>Propiedad SmallDescription.</value>
	    [
		DescriptionKey("SMALL_DESCRIPTION_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="SMALL_DESCRIPTION", DbType=System.Data.DbType.String),
	    ]
        public string SmallDescription
	    {
		    get
		    {
			    return this._smallDescription;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.SmallDescription);
				}
				this._smallDescription = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad CoveredRiskTypeCode.
		/// </summary>
		/// <value>Propiedad CoveredRiskTypeCode.</value>
	    [
		DescriptionKey("COVERED_RISK_TYPE_CODE_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="COVERED_RISK_TYPE_CD", DbType=System.Data.DbType.String),
	    ]
        public int CoveredRiskTypeCode
	    {
		    get
		    {
			    return this._coveredRiskTypeCode;
		    }
		    set
		    {
				this._coveredRiskTypeCode = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad CurrentFrom.
		/// </summary>
		/// <value>Propiedad CurrentFrom.</value>
	    [
		DescriptionKey("CURRENT_FROM_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="CURRENT_FROM", DbType=System.Data.DbType.String),
	    ]
        public DateTime CurrentFrom
	    {
		    get
		    {
			    return this._currentFrom;
		    }
		    set
		    {
				this._currentFrom = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad CurrentTo.
		/// </summary>
		/// <value>Propiedad CurrentTo.</value>
	    [
		DescriptionKey("CURRENT_TO_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="CURRENT_TO", DbType=System.Data.DbType.String),
	    ]
        public DateTime? CurrentTo
	    {
		    get
		    {
			    return this._currentTo;
		    }
		    set
		    {
				this._currentTo = value;
			}
	    }

    }
}