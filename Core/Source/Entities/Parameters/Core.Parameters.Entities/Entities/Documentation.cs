/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Parameters.Documentation.dict v1.0
 * FileSize=7303 Header=254 CRC=2661511813
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.Parameters.Entities
{
    /// <summary>
    /// Definición de entidad Documentation.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Parameters.Documentation.dict"),
    Serializable(),
    DescriptionKey("DOCUMENTATION_ENTITY"),
    TableMap(TableName = "DOCUMENTATION", Schema = "PARAM"),
    ]
    public partial class Documentation :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string DocumentationCode = "DocumentationCode";
            public static readonly string ModuleCode = "ModuleCode";
            public static readonly string SubmoduleCode = "SubmoduleCode";
            public static readonly string PrefixCode = "PrefixCode";
            public static readonly string Description = "Description";
            public static readonly string Enabled = "Enabled";
            public static readonly string IsRequired = "IsRequired";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="documentationCode">Propiedad clave DocumentationCode.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int documentationCode)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.DocumentationCode, documentationCode);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="documentationCode">Propiedad clave DocumentationCode.</param>
        public static PrimaryKey CreatePrimaryKey(int documentationCode)
        {
            return InternalCreatePrimaryKey<Documentation>(documentationCode);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad ModuleCode.
        /// </summary>
        private int? _moduleCode = null;
        /// <summary>
        /// Atributo para la propiedad SubmoduleCode.
        /// </summary>
        private int? _submoduleCode = null;
        /// <summary>
        /// Atributo para la propiedad PrefixCode.
        /// </summary>
        private int? _prefixCode = null;
        /// <summary>
        /// Atributo para la propiedad Description.
        /// </summary>
        private string _description = null;
        /// <summary>
        /// Atributo para la propiedad Enabled.
        /// </summary>
        private bool? _enabled = null;
        /// <summary>
        /// Atributo para la propiedad IsRequired.
        /// </summary>
        private bool? _isRequired = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="documentationCode">DocumentationCode key property.</param>
        public Documentation(int documentationCode) :
            this(Documentation.CreatePrimaryKey(documentationCode), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public Documentation(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad DocumentationCode.
        /// </summary>
        /// <value>Propiedad DocumentationCode.</value>
        [
        DescriptionKey("DOCUMENTATION_CODE_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "DOCUMENTATION_CD", DbType = System.Data.DbType.String),
        ]
        public int DocumentationCode
        {
            get
            {
                return (int)this._primaryKey[Properties.DocumentationCode];
            }
            set
            {
                this._primaryKey[Properties.DocumentationCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ModuleCode.
        /// </summary>
        /// <value>Propiedad ModuleCode.</value>
        [
        DescriptionKey("MODULE_CODE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "MODULE_CD", DbType = System.Data.DbType.String),
        ]
        public int? ModuleCode
        {
            get
            {
                return this._moduleCode;
            }
            set
            {
                this._moduleCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad SubmoduleCode.
        /// </summary>
        /// <value>Propiedad SubmoduleCode.</value>
        [
        DescriptionKey("SUBMODULE_CODE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "SUBMODULE_CD", DbType = System.Data.DbType.String),
        ]
        public int? SubmoduleCode
        {
            get
            {
                return this._submoduleCode;
            }
            set
            {
                this._submoduleCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad PrefixCode.
        /// </summary>
        /// <value>Propiedad PrefixCode.</value>
        [
        DescriptionKey("PREFIX_CODE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "PREFIX_CD", DbType = System.Data.DbType.String),
        ]
        public int? PrefixCode
        {
            get
            {
                return this._prefixCode;
            }
            set
            {
                this._prefixCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Description.
        /// </summary>
        /// <value>Propiedad Description.</value>
        [
        DescriptionKey("DESCRIPTION_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Enabled.
        /// </summary>
        /// <value>Propiedad Enabled.</value>
        [
        DescriptionKey("ENABLED_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "ENABLED", DbType = System.Data.DbType.String),
        ]
        public bool? Enabled
        {
            get
            {
                return this._enabled;
            }
            set
            {
                this._enabled = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IsRequired.
        /// </summary>
        /// <value>Propiedad IsRequired.</value>
        [
        DescriptionKey("IS_REQUIRED_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "IS_REQUIRED", DbType = System.Data.DbType.String),
        ]
        public bool? IsRequired
        {
            get
            {
                return this._isRequired;
            }
            set
            {
                this._isRequired = value;
            }
        }

    }
}