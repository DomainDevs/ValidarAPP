/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Parameters.DefaultValue.dict v1.0
 * FileSize=8285 Header=253 CRC=3402081325
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.Parameters.Entities
{
    /// <summary>
    /// Definición de entidad DefaultValue.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Parameters.DefaultValue.dict"),
    Serializable(),
    DescriptionKey("DEFAULT_VALUE_ENTITY"),
    TableMap(TableName = "DEFAULT_VALUE", Schema = "PARAM"),
    ]
    public partial class DefaultValue :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string ValueId = "ValueId";
            public static readonly string ProfileId = "ProfileId";
            public static readonly string UserId = "UserId";
            public static readonly string ModuleId = "ModuleId";
            public static readonly string SubmoduleId = "SubmoduleId";
            public static readonly string ViewName = "ViewName";
            public static readonly string ControlName = "ControlName";
            public static readonly string ControlValue = "ControlValue";
            public static readonly string ControlType = "ControlType";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="valueId">Propiedad clave ValueId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int valueId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.ValueId, valueId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="valueId">Propiedad clave ValueId.</param>
        public static PrimaryKey CreatePrimaryKey(int valueId)
        {
            return InternalCreatePrimaryKey<DefaultValue>(valueId);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad ProfileId.
        /// </summary>
        private int _profileId;
        /// <summary>
        /// Atributo para la propiedad UserId.
        /// </summary>
        private int _userId;
        /// <summary>
        /// Atributo para la propiedad ModuleId.
        /// </summary>
        private int _moduleId;
        /// <summary>
        /// Atributo para la propiedad SubmoduleId.
        /// </summary>
        private int _submoduleId;
        /// <summary>
        /// Atributo para la propiedad ViewName.
        /// </summary>
        private string _viewName = null;
        /// <summary>
        /// Atributo para la propiedad ControlName.
        /// </summary>
        private string _controlName = null;
        /// <summary>
        /// Atributo para la propiedad ControlValue.
        /// </summary>
        private string _controlValue = null;
        /// <summary>
        /// Atributo para la propiedad ControlType.
        /// </summary>
        private string _controlType = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="valueId">ValueId key property.</param>
        public DefaultValue(int valueId) :
            this(DefaultValue.CreatePrimaryKey(valueId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public DefaultValue(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad ValueId.
        /// </summary>
        /// <value>Propiedad ValueId.</value>
        [
        DescriptionKey("VALUE_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "VALUE_ID", DbType = System.Data.DbType.String),
        ]
        public int ValueId
        {
            get
            {
                return (int)this._primaryKey[Properties.ValueId];
            }
            set
            {
                this._primaryKey[Properties.ValueId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ProfileId.
        /// </summary>
        /// <value>Propiedad ProfileId.</value>
        [
        DescriptionKey("PROFILE_ID_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "PROFILE_ID", DbType = System.Data.DbType.String),
        ]
        public int ProfileId
        {
            get
            {
                return this._profileId;
            }
            set
            {
                this._profileId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad UserId.
        /// </summary>
        /// <value>Propiedad UserId.</value>
        [
        DescriptionKey("USER_ID_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "USER_ID", DbType = System.Data.DbType.String),
        ]
        public int UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                this._userId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ModuleId.
        /// </summary>
        /// <value>Propiedad ModuleId.</value>
        [
        DescriptionKey("MODULE_ID_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "MODULE_ID", DbType = System.Data.DbType.String),
        ]
        public int ModuleId
        {
            get
            {
                return this._moduleId;
            }
            set
            {
                this._moduleId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad SubmoduleId.
        /// </summary>
        /// <value>Propiedad SubmoduleId.</value>
        [
        DescriptionKey("SUBMODULE_ID_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "SUBMODULE_ID", DbType = System.Data.DbType.String),
        ]
        public int SubmoduleId
        {
            get
            {
                return this._submoduleId;
            }
            set
            {
                this._submoduleId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ViewName.
        /// </summary>
        /// <value>Propiedad ViewName.</value>
        [
        DescriptionKey("VIEW_NAME_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "VIEW_NAME", DbType = System.Data.DbType.String),
        ]
        public string ViewName
        {
            get
            {
                return this._viewName;
            }
            set
            {
                this._viewName = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ControlName.
        /// </summary>
        /// <value>Propiedad ControlName.</value>
        [
        DescriptionKey("CONTROL_NAME_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "CONTROL_NAME", DbType = System.Data.DbType.String),
        ]
        public string ControlName
        {
            get
            {
                return this._controlName;
            }
            set
            {
                this._controlName = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ControlValue.
        /// </summary>
        /// <value>Propiedad ControlValue.</value>
        [
        DescriptionKey("CONTROL_VALUE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "CONTROL_VALUE", DbType = System.Data.DbType.String),
        ]
        public string ControlValue
        {
            get
            {
                return this._controlValue;
            }
            set
            {
                this._controlValue = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ControlType.
        /// </summary>
        /// <value>Propiedad ControlType.</value>
        [
        DescriptionKey("CONTROL_TYPE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "CONTROL_TYPE", DbType = System.Data.DbType.String),
        ]
        public string ControlType
        {
            get
            {
                return this._controlType;
            }
            set
            {
                this._controlType = value;
            }
        }

    }
}