/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Parameters.NodeRulesetStatus.dict v1.0
 * FileSize=4968 Header=258 CRC=3571449478
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.Parameters.Entities
{
    /// <summary>
    /// Definición de entidad NodeRulesetStatus.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Parameters.NodeRulesetStatus.dict"),
    Serializable(),
    DescriptionKey("NODE_RULESET_STATUS_ENTITY"),
    TableMap(TableName = "NODE_RULESET_STATUS", Schema = "PARAM"),
    ]
    public partial class NodeRulesetStatus :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string Id = "Id";
            public static readonly string Node = "Node";
            public static readonly string Guid = "Guid";
            public static readonly string CreationDate = "CreationDate";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.Id, null);

            return new PrimaryKey<T>(keys);
        }
        /// <summary>
         /// Crea una clave primaria para una clase concreta.
         /// </summary>
         /// <param name="concreteClass">Clase concreta.</param>
         /// <param name="id">Propiedad clave Id.</param>
         /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int id)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.Id, id);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="id">Propiedad clave Id.</param>
        public static PrimaryKey CreatePrimaryKey(int id)
        {
            return InternalCreatePrimaryKey<NodeRulesetStatus>(id);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<NodeRulesetStatus>();
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad Node.
        /// </summary>
        private string _node = null;
        /// <summary>
        /// Atributo para la propiedad Guid.
        /// </summary>
        private string _guid = null;
        /// <summary>
        /// Atributo para la propiedad CreationDate.
        /// </summary>
        private DateTime _creationDate;
		/// <summary>
		/// Atributo para la propiedad FinishDate.
		/// </summary>
		private DateTime? _finishDate;
		//*** Object Constructors ********************************

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="id">Id key property.</param>
		public NodeRulesetStatus(int id) :
            this(NodeRulesetStatus.CreatePrimaryKey(id), null)
        {
        }


        /// <summary>
        /// Constructor de entidad sin parametros<see cref="BusinessConfiguration"/> class.
        /// </summary>
        public NodeRulesetStatus()
            : this(NodeRulesetStatus.CreatePrimaryKey(), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public NodeRulesetStatus(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad Id.
        /// </summary>
        /// <value>Propiedad Id.</value>
        [
        DescriptionKey("ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "ID", DbType = System.Data.DbType.String),
        ]
        public int Id
        {
            get
            {
                return (int)this._primaryKey[Properties.Id];
            }
            set
            {
                this._primaryKey[Properties.Id] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Node.
        /// </summary>
        /// <value>Propiedad Node.</value>
        [
        DescriptionKey("NODE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "NODE", DbType = System.Data.DbType.String),
        ]
        public string Node
        {
            get
            {
                return this._node;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Node);
                }
                this._node = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Guid.
        /// </summary>
        /// <value>Propiedad Guid.</value>
        [
        DescriptionKey("GUID_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "GUID", DbType = System.Data.DbType.String),
        ]
        public string Guid
        {
            get
            {
                return this._guid;
            }
            set
            {
                this._guid = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad CreationDate.
        /// </summary>
        /// <value>Propiedad CreationDate.</value>
        [
        DescriptionKey("CREATION_DATE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "CREATION_DATE", DbType = System.Data.DbType.String),
        ]
        public DateTime CreationDate
        {
            get
            {
                return this._creationDate;
            }
            set
            {
                this._creationDate = value;
            }
        }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad FinishDate.
		/// </summary>
		/// <value>Propiedad FinishDate.</value>
		[
		DescriptionKey("FINISH_DATE_PROPERTY"),
		PersistentProperty(IsNullable = true),
		ColumnMap(ColumnName = "FINISH_DATE", DbType = System.Data.DbType.String),
		]
		public DateTime? FinishDate
		{
			get
			{
				return this._finishDate;
			}
			set
			{
				this._finishDate = value;
			}
		}

	}
}