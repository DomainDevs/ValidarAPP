/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Parameters.MonthlyExchangeRate.dict v1.0
 * FileSize=5412 Header=260 CRC=3174507244
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.Parameters.Entities
{
    /// <summary>
    /// Definición de entidad MonthlyExchangeRate.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Parameters.MonthlyExchangeRate.dict"),
    Serializable(),
    DescriptionKey("MONTHLY_EXCHANGE_RATE_ENTITY"),
    TableMap(TableName="MONTHLY_EXCHANGE_RATE", Schema="PARAM"),
    ]
    public partial class MonthlyExchangeRate :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string CurrencyCode = "CurrencyCode";
			public static readonly string Year = "Year";
			public static readonly string Month = "Month";
			public static readonly string AmtRate = "AmtRate";
		}

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="currencyCode">Propiedad clave CurrencyCode.</param>
		/// <param name="year">Propiedad clave Year.</param>
		/// <param name="month">Propiedad clave Month.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>(int currencyCode, int year, int month)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.CurrencyCode, currencyCode);
		    keys.Add(Properties.Year, year);
		    keys.Add(Properties.Month, month);

		    return new PrimaryKey<T>(keys);
	    }

        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.CurrencyCode, null);
            keys.Add(Properties.Year, null);
            keys.Add(Properties.Month, null);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="currencyCode">Propiedad clave CurrencyCode.</param>
        /// <param name="year">Propiedad clave Year.</param>
        /// <param name="month">Propiedad clave Month.</param>
        public static PrimaryKey CreatePrimaryKey(int currencyCode, int year, int month)
	    {
			return InternalCreatePrimaryKey<MonthlyExchangeRate>(currencyCode, year, month);
		}
        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<MonthlyExchangeRate>();
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad AmtRate.
        /// </summary>
        private decimal _amtRate;
	    //*** Object Constructors ********************************

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="currencyCode">CurrencyCode key property.</param>
		/// <param name="year">Year key property.</param>
		/// <param name="month">Month key property.</param>
	    public MonthlyExchangeRate(int currencyCode, int year, int month):
			this(MonthlyExchangeRate.CreatePrimaryKey(currencyCode, year, month), null)
	    {
	    }

        public MonthlyExchangeRate() :
            this(MonthlyExchangeRate.CreatePrimaryKey(), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public MonthlyExchangeRate(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad CurrencyCode.
		/// </summary>
		/// <value>Propiedad CurrencyCode.</value>
	    [
		DescriptionKey("CURRENCY_CODE_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="CURRENCY_CD", DbType=System.Data.DbType.String),
	    ]
        public int CurrencyCode
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.CurrencyCode];
		    }
		    set
		    {
				this._primaryKey[Properties.CurrencyCode] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Year.
		/// </summary>
		/// <value>Propiedad Year.</value>
	    [
		DescriptionKey("YEAR_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="YEAR", DbType=System.Data.DbType.String),
	    ]
        public int Year
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.Year];
		    }
		    set
		    {
				this._primaryKey[Properties.Year] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Month.
		/// </summary>
		/// <value>Propiedad Month.</value>
	    [
		DescriptionKey("MONTH_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="MONTH", DbType=System.Data.DbType.String),
	    ]
        public int Month
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.Month];
		    }
		    set
		    {
				this._primaryKey[Properties.Month] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad AmtRate.
		/// </summary>
		/// <value>Propiedad AmtRate.</value>
	    [
		DescriptionKey("AMT_RATE_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="AMT_RATE", DbType=System.Data.DbType.Decimal),
	    ]
        public decimal AmtRate
	    {
		    get
		    {
			    return this._amtRate;
		    }
		    set
		    {
				this._amtRate = value;
			}
	    }

    }
}