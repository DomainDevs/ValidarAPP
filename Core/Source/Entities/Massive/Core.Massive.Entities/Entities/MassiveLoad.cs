/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Massive.MassiveLoad.dict v1.0
 * FileSize=14345 Header=250 CRC=1328141834
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.Massive.Entities
{
    /// <summary>
    /// Definición de entidad MassiveLoad.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Massive.MassiveLoad.dict"),
    Serializable(),
    DescriptionKey("MASSIVE_LOAD_ENTITY"),
    TableMap(TableName = "MASSIVE_LOAD", Schema = "MSV"),
    ]
    public partial class MassiveLoad :
         BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string Id = "Id";
            public static readonly string Description = "Description";
            public static readonly string FileName = "FileName";
            public static readonly string UserId = "UserId";
            public static readonly string StatusId = "StatusId";
            public static readonly string HasError = "HasError";
            public static readonly string ErrorDescription = "ErrorDescription";
            public static readonly string TotalRows = "TotalRows";
            public static readonly string LoadTypeId = "LoadTypeId";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="id">Propiedad clave Id.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int id)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.Id, id);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="id">Propiedad clave Id.</param>
        public static PrimaryKey CreatePrimaryKey(int id)
        {
            return InternalCreatePrimaryKey<MassiveLoad>(id);
        }

        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.Id, null);

            return new PrimaryKey<T>(keys);
        }

        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<MassiveLoad>();
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad Description.
        /// </summary>
        private string _description = null;
        /// <summary>
        /// Atributo para la propiedad FileName.
        /// </summary>
        private string _fileName = null;
        /// <summary>
        /// Atributo para la propiedad UserId.
        /// </summary>
        private int _userId;
        /// <summary>
        /// Atributo para la propiedad StatusId.
        /// </summary>
        private int _statusId;
        /// <summary>
        /// Atributo para la propiedad HasError.
        /// </summary>
        private bool _hasError;
        /// <summary>
        /// Atributo para la propiedad ErrorDescription.
        /// </summary>
        private string _errorDescription = null;
        /// <summary>
        /// Atributo para la propiedad TotalRows.
        /// </summary>
        private int? _totalRows = null;
        /// <summary>
        /// Atributo para la propiedad MassiveFileId.
        /// </summary>
        private int? _loadTypeId;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="id">Id key property.</param>
        public MassiveLoad(int id) :
            this(MassiveLoad.CreatePrimaryKey(id), null)
        {
        }

        public MassiveLoad() :
            this(MassiveLoad.CreatePrimaryKey(), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public MassiveLoad(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad Id.
        /// </summary>
        /// <value>Propiedad Id.</value>
        [
        DescriptionKey("ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "ID", DbType = System.Data.DbType.String),
        ]
        public int Id
        {
            get
            {
                return (int)this._primaryKey[Properties.Id];
            }
            set
            {
                this._primaryKey[Properties.Id] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Description.
        /// </summary>
        /// <value>Propiedad Description.</value>
        [
        DescriptionKey("DESCRIPTION_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Description);
                }
                this._description = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad FileName.
        /// </summary>
        /// <value>Propiedad FileName.</value>
        [
        DescriptionKey("FILE_NAME_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "FILE_NAME", DbType = System.Data.DbType.String),
        ]
        public string FileName
        {
            get
            {
                return this._fileName;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.FileName);
                }
                this._fileName = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad UserId.
        /// </summary>
        /// <value>Propiedad UserId.</value>
        [
        DescriptionKey("USER_ID_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "USER_ID", DbType = System.Data.DbType.String),
        ]
        public int UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                this._userId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad StatusId.
        /// </summary>
        /// <value>Propiedad StatusId.</value>
        [
        DescriptionKey("STATUS_ID_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "STATUS_ID", DbType = System.Data.DbType.String),
        ]
        public int StatusId
        {
            get
            {
                return this._statusId;
            }
            set
            {
                this._statusId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad HasError.
        /// </summary>
        /// <value>Propiedad HasError.</value>
        [
        DescriptionKey("HAS_ERROR_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "HAS_ERROR", DbType = System.Data.DbType.String),
        ]
        public bool HasError
        {
            get
            {
                return this._hasError;
            }
            set
            {
                this._hasError = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ErrorDescription.
        /// </summary>
        /// <value>Propiedad ErrorDescription.</value>
        [
        DescriptionKey("ERROR_DESCRIPTION_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "ERROR_DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string ErrorDescription
        {
            get
            {
                return this._errorDescription;
            }
            set
            {
                this._errorDescription = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad TotalRows.
        /// </summary>
        /// <value>Propiedad TotalRows.</value>
        [
        DescriptionKey("TOTAL_ROWS_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "TOTAL_ROWS", DbType = System.Data.DbType.String),
        ]
        public int? TotalRows
        {
            get
            {
                return this._totalRows;
            }
            set
            {
                this._totalRows = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad MassiveFileId.
        /// </summary>
        /// <value>Propiedad MassiveFileId.</value>
        [
        DescriptionKey("LOAD_TYPE_ID_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "LOAD_TYPE_ID", DbType = System.Data.DbType.String),
        ]
        public int? LoadTypeId
        {
            get
            {
                return this._loadTypeId;
            }
            set
            {
                this._loadTypeId = value;
            }
        }
    }
}