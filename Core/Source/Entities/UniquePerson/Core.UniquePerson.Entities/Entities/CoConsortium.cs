/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: CoConsortium.CoConsortium.dict v1.0
 * FileSize=7296 Header=230 CRC=3301925613
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.UniquePerson.Entities
{
    /// <summary>
    /// Definición de entidad CoConsortium.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.UniquePerson.CoConsortium.dict"),
    Serializable(),
    DescriptionKey("CO_CONSORTIUM_ENTITY"),
    TableMap(TableName = "CO_CONSORTIUM", Schema = "UP"),
    ]
    public partial class CoConsortium :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string InsuredCode = "InsuredCode";
            public static readonly string IndividualId = "IndividualId";
            public static readonly string ConsortiumId = "ConsortiumId";
            public static readonly string IsMain = "IsMain";
            public static readonly string ParticipationRate = "ParticipationRate";
            public static readonly string StartDate = "StartDate";
            public static readonly string Enabled = "Enabled";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="insuredCode">Propiedad clave InsuredCode.</param>
        /// <param name="individualId">Propiedad clave IndividualId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int insuredCode, int individualId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.InsuredCode, insuredCode);
            keys.Add(Properties.IndividualId, individualId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="insuredCode">Propiedad clave InsuredCode.</param>
        /// <param name="individualId">Propiedad clave IndividualId.</param>
        public static PrimaryKey CreatePrimaryKey(int insuredCode, int individualId)
        {
            return InternalCreatePrimaryKey<CoConsortium>(insuredCode, individualId);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad ConsortiumId.
        /// </summary>
        private int _consortiumId;
        /// <summary>
        /// Atributo para la propiedad IsMain.
        /// </summary>
        private bool _isMain;
        /// <summary>
        /// Atributo para la propiedad ParticipationRate.
        /// </summary>
        private decimal _participationRate;
        /// <summary>
        /// Atributo para la propiedad StartDate.
        /// </summary>
        private DateTime _startDate;
        /// <summary>
        /// Atributo para la propiedad Enabled.
        /// </summary>
        private bool _enabled;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="insuredCode">InsuredCode key property.</param>
        /// <param name="individualId">IndividualId key property.</param>
        public CoConsortium(int insuredCode, int individualId) :
            this(CoConsortium.CreatePrimaryKey(insuredCode, individualId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public CoConsortium(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }


        /// <summary>
        /// Devuelve o setea el valor de la propiedad InsuredCode.
        /// </summary>
        /// <value>Propiedad InsuredCode.</value>
        [
        DescriptionKey("INSURED_CODE_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "INSURED_CD", DbType = System.Data.DbType.String),
        ]
        public int InsuredCode
        {
            get
            {
                return (int)this._primaryKey[Properties.InsuredCode];
            }
            set
            {
                this._primaryKey[Properties.InsuredCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IndividualId.
        /// </summary>
        /// <value>Propiedad IndividualId.</value>
        [
        DescriptionKey("INDIVIDUAL_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "INDIVIDUAL_ID", DbType = System.Data.DbType.String),
        ]
        public int IndividualId
        {
            get
            {
                return (int)this._primaryKey[Properties.IndividualId];
            }
            set
            {
                this._primaryKey[Properties.IndividualId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ConsortiumId.
        /// </summary>
        /// <value>Propiedad ConsortiumId.</value>
        [
        DescriptionKey("CONSORTIUM_ID_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "CONSORTIUM_ID", DbType = System.Data.DbType.String),
        ]
        public int ConsortiumId
        {
            get
            {
                return this._consortiumId;
            }
            set
            {
                this._consortiumId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IsMain.
        /// </summary>
        /// <value>Propiedad IsMain.</value>
        [
        DescriptionKey("IS_MAIN_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "IS_MAIN", DbType = System.Data.DbType.String),
        ]
        public bool IsMain
        {
            get
            {
                return this._isMain;
            }
            set
            {
                this._isMain = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ParticipationRate.
        /// </summary>
        /// <value>Propiedad ParticipationRate.</value>
        [
        DescriptionKey("PARTICIPATION_RATE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "PARTICIPATION_RATE", DbType = System.Data.DbType.Decimal),
        ]
        public decimal ParticipationRate
        {
            get
            {
                return this._participationRate;
            }
            set
            {
                this._participationRate = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad StartDate.
        /// </summary>
        /// <value>Propiedad StartDate.</value>
        [
        DescriptionKey("START_DATE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "START_DATE", DbType = System.Data.DbType.String),
        ]
        public DateTime StartDate
        {
            get
            {
                return this._startDate;
            }
            set
            {
                this._startDate = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Enabled.
        /// </summary>
        /// <value>Propiedad Enabled.</value>
        [
        DescriptionKey("ENABLED_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "ENABLED", DbType = System.Data.DbType.String),
        ]
        public bool Enabled
        {
            get
            {
                return this._enabled;
            }
            set
            {
                this._enabled = value;
            }
        }

    }
}