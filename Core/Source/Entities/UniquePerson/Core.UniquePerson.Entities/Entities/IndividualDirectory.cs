/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.UnderwritingServices.IndividualDirectory.dict v1.0
 * FileSize=5791 Header=270 CRC=1870812279
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.UniquePerson.Entities
{
    /// <summary>
    /// Definición de entidad IndividualDirectory.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.UniquePerson.IndividualDirectory.dict"),
    Serializable(),
    DescriptionKey("INDIVIDUAL_DIRECTORY_ENTITY"),
    TableMap(TableName = "INDIVIDUAL_DIRECTORY", Schema = "UP"),
    ]
    public partial class IndividualDirectory :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string IndividualId = "IndividualId";
            public static readonly string DataId = "DataId";
            public static readonly string DirectoryTypeCode = "DirectoryTypeCode";
            public static readonly string TypeNumber = "TypeNumber";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="individualId">Propiedad clave IndividualId.</param>
        /// <param name="dataId">Propiedad clave DataId.</param>
        /// <param name="directoryTypeCode">Propiedad clave DirectoryTypeCode.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int individualId, int dataId, int directoryTypeCode)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.IndividualId, individualId);
            keys.Add(Properties.DataId, dataId);
            keys.Add(Properties.DirectoryTypeCode, directoryTypeCode);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="individualId">Propiedad clave IndividualId.</param>
        /// <param name="dataId">Propiedad clave DataId.</param>
        /// <param name="directoryTypeCode">Propiedad clave DirectoryTypeCode.</param>
        public static PrimaryKey CreatePrimaryKey(int individualId, int dataId, int directoryTypeCode)
        {
            return InternalCreatePrimaryKey<IndividualDirectory>(individualId, dataId, directoryTypeCode);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad TypeNumber.
        /// </summary>
        private int? _typeNumber = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="individualId">IndividualId key property.</param>
        /// <param name="dataId">DataId key property.</param>
        /// <param name="directoryTypeCode">DirectoryTypeCode key property.</param>
        public IndividualDirectory(int individualId, int dataId, int directoryTypeCode) :
            this(IndividualDirectory.CreatePrimaryKey(individualId, dataId, directoryTypeCode), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public IndividualDirectory(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }


        /// <summary>
        /// Devuelve o setea el valor de la propiedad IndividualId.
        /// </summary>
        /// <value>Propiedad IndividualId.</value>
        [
        DescriptionKey("INDIVIDUAL_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "INDIVIDUAL_ID", DbType = System.Data.DbType.String),
        ]
        public int IndividualId
        {
            get
            {
                return (int)this._primaryKey[Properties.IndividualId];
            }
            set
            {
                this._primaryKey[Properties.IndividualId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad DataId.
        /// </summary>
        /// <value>Propiedad DataId.</value>
        [
        DescriptionKey("DATA_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "DATA_ID", DbType = System.Data.DbType.String),
        ]
        public int DataId
        {
            get
            {
                return (int)this._primaryKey[Properties.DataId];
            }
            set
            {
                this._primaryKey[Properties.DataId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad DirectoryTypeCode.
        /// </summary>
        /// <value>Propiedad DirectoryTypeCode.</value>
        [
        DescriptionKey("DIRECTORY_TYPE_CODE_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "DIRECTORY_TYPE_CD", DbType = System.Data.DbType.String),
        ]
        public int DirectoryTypeCode
        {
            get
            {
                return (int)this._primaryKey[Properties.DirectoryTypeCode];
            }
            set
            {
                this._primaryKey[Properties.DirectoryTypeCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad TypeNumber.
        /// </summary>
        /// <value>Propiedad TypeNumber.</value>
        [
        DescriptionKey("TYPE_NUMBER_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "TYPE_NUMBER", DbType = System.Data.DbType.String),
        ]
        public int? TypeNumber
        {
            get
            {
                return this._typeNumber;
            }
            set
            {
                this._typeNumber = value;
            }
        }

    }
}