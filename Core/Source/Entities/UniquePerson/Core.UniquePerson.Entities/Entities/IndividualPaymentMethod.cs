/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.UniquePerson.IndividualPaymentMethod.dict v1.0
 * FileSize=6359 Header=272 CRC=489507898
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.UniquePerson.Entities
{
    /// <summary>
    /// Definición de entidad IndividualPaymentMethod.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.UniquePerson.IndividualPaymentMethod.dict"),
    Serializable(),
    DescriptionKey("INDIVIDUAL_PAYMENT_METHOD_ENTITY"),
    TableMap(TableName = "INDIVIDUAL_PAYMENT_METHOD", Schema = "UP"),
    ]
    public partial class IndividualPaymentMethod :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string IndividualId = "IndividualId";
            public static readonly string PaymentId = "PaymentId";
            public static readonly string RoleCode = "RoleCode";
            public static readonly string PaymentMethodCode = "PaymentMethodCode";
            public static readonly string Enabled = "Enabled";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="individualId">Propiedad clave IndividualId.</param>
        /// <param name="paymentId">Propiedad clave PaymentId.</param>
        /// <param name="roleCode">Propiedad clave RoleCode.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int individualId, int paymentId, int roleCode)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.IndividualId, individualId);
            keys.Add(Properties.PaymentId, paymentId);
            keys.Add(Properties.RoleCode, roleCode);

            return new PrimaryKey<T>(keys);
        }

        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.IndividualId, null);
            keys.Add(Properties.PaymentId, null);
            keys.Add(Properties.RoleCode, null);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="individualId">Propiedad clave IndividualId.</param>
        /// <param name="paymentId">Propiedad clave PaymentId.</param>
        /// <param name="roleCode">Propiedad clave RoleCode.</param>
        public static PrimaryKey CreatePrimaryKey(int individualId, int paymentId, int roleCode)
        {
            return InternalCreatePrimaryKey<IndividualPaymentMethod>(individualId, paymentId, roleCode);
        }

        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<IndividualPaymentMethod>();
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad PaymentMethodCode.
        /// </summary>
        private int _paymentMethodCode;
        /// <summary>
        /// Atributo para la propiedad Enabled.
        /// </summary>
        private bool _enabled;
        //*** Object Constructors ********************************
        public IndividualPaymentMethod() :
         this(IndividualPaymentMethod.CreatePrimaryKey(), null)
        {
        }



        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="individualId">IndividualId key property.</param>
        /// <param name="paymentId">PaymentId key property.</param>
        /// <param name="roleCode">RoleCode key property.</param>
        public IndividualPaymentMethod(int individualId, int paymentId, int roleCode) :
            this(IndividualPaymentMethod.CreatePrimaryKey(individualId, paymentId, roleCode), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public IndividualPaymentMethod(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }


        /// <summary>
        /// Devuelve o setea el valor de la propiedad IndividualId.
        /// </summary>
        /// <value>Propiedad IndividualId.</value>
        [
        DescriptionKey("INDIVIDUAL_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "INDIVIDUAL_ID", DbType = System.Data.DbType.String),
        ]
        public int IndividualId
        {
            get
            {
                return (int)this._primaryKey[Properties.IndividualId];
            }
            set
            {
                this._primaryKey[Properties.IndividualId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad PaymentId.
        /// </summary>
        /// <value>Propiedad PaymentId.</value>
        [
        DescriptionKey("PAYMENT_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "PAYMENT_ID", DbType = System.Data.DbType.String),
        ]
        public int PaymentId
        {
            get
            {
                return (int)this._primaryKey[Properties.PaymentId];
            }
            set
            {
                this._primaryKey[Properties.PaymentId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad RoleCode.
        /// </summary>
        /// <value>Propiedad RoleCode.</value>
        [
        DescriptionKey("ROLE_CODE_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "ROLE_CD", DbType = System.Data.DbType.String),
        ]
        public int RoleCode
        {
            get
            {
                return (int)this._primaryKey[Properties.RoleCode];
            }
            set
            {
                this._primaryKey[Properties.RoleCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad PaymentMethodCode.
        /// </summary>
        /// <value>Propiedad PaymentMethodCode.</value>
        [
        DescriptionKey("PAYMENT_METHOD_CODE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "PAYMENT_METHOD_CD", DbType = System.Data.DbType.String),
        ]
        public int PaymentMethodCode
        {
            get
            {
                return this._paymentMethodCode;
            }
            set
            {
                this._paymentMethodCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Enabled.
        /// </summary>
        /// <value>Propiedad Enabled.</value>
        [
        DescriptionKey("ENABLED_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "ENABLED", DbType = System.Data.DbType.String),
        ]
        public bool Enabled
        {
            get
            {
                return this._enabled;
            }
            set
            {
                this._enabled = value;
            }
        }

    }
}