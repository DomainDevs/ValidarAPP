/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Company.CoCompanyName.dict v1.0
 * FileSize=9430 Header=226 CRC=2782986452
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.UniquePerson.Entities
{
    /// <summary>
    /// Definición de entidad CoCompanyName.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.UniquePerson.CoCompanyName.dict"),
    Serializable(),
    DescriptionKey("CO_COMPANY_NAME_ENTITY"),
    TableMap(TableName = "CO_COMPANY_NAME", Schema = "UP"),
    ]
    public partial class CoCompanyName :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string IndividualId = "IndividualId";
            public static readonly string NameNum = "NameNum";
            public static readonly string TradeName = "TradeName";
            public static readonly string IsMain = "IsMain";
            public static readonly string PhoneDataCode = "PhoneDataCode";
            public static readonly string AddressDataCode = "AddressDataCode";
            public static readonly string EmailDataCode = "EmailDataCode";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="individualId">Propiedad clave IndividualId.</param>
        /// <param name="nameNum">Propiedad clave NameNum.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int individualId, int nameNum)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.IndividualId, individualId);
            keys.Add(Properties.NameNum, nameNum);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="individualId">Propiedad clave IndividualId.</param>
        /// <param name="nameNum">Propiedad clave NameNum.</param>
        public static PrimaryKey CreatePrimaryKey(int individualId, int nameNum)
        {
            return InternalCreatePrimaryKey<CoCompanyName>(individualId, nameNum);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad TradeName.
        /// </summary>
        private string _tradeName = null;
        /// <summary>
        /// Atributo para la propiedad IsMain.
        /// </summary>
        private bool _isMain;
        /// <summary>
        /// Atributo para la propiedad PhoneDataCode.
        /// </summary>
        private int? _phoneDataCode = null;
        /// <summary>
        /// Atributo para la propiedad AddressDataCode.
        /// </summary>
        private int? _addressDataCode = null;
        /// <summary>
        /// Atributo para la propiedad EmailDataCode.
        /// </summary>
        private int? _emailDataCode = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="individualId">IndividualId key property.</param>
        /// <param name="nameNum">NameNum key property.</param>
        public CoCompanyName(int individualId, int nameNum) :
            this(CoCompanyName.CreatePrimaryKey(individualId, nameNum), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public CoCompanyName(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad IndividualId.
        /// </summary>
        /// <value>Propiedad IndividualId.</value>
        [
        DescriptionKey("INDIVIDUAL_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "INDIVIDUAL_ID", DbType = System.Data.DbType.String),
        ]
        public int IndividualId
        {
            get
            {
                return (int)this._primaryKey[Properties.IndividualId];
            }
            set
            {
                this._primaryKey[Properties.IndividualId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad NameNum.
        /// </summary>
        /// <value>Propiedad NameNum.</value>
        [
        DescriptionKey("NAME_NUM_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "NAME_NUM", DbType = System.Data.DbType.String),
        ]
        public int NameNum
        {
            get
            {
                return (int)this._primaryKey[Properties.NameNum];
            }
            set
            {
                this._primaryKey[Properties.NameNum] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad TradeName.
        /// </summary>
        /// <value>Propiedad TradeName.</value>
        [
        DescriptionKey("TRADE_NAME_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "TRADE_NAME", DbType = System.Data.DbType.String),
        ]
        public string TradeName
        {
            get
            {
                return this._tradeName;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.TradeName);
                }
                this._tradeName = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IsMain.
        /// </summary>
        /// <value>Propiedad IsMain.</value>
        [
        DescriptionKey("IS_MAIN_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "IS_MAIN", DbType = System.Data.DbType.String),
        ]
        public bool IsMain
        {
            get
            {
                return this._isMain;
            }
            set
            {
                this._isMain = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad PhoneDataCode.
        /// </summary>
        /// <value>Propiedad PhoneDataCode.</value>
        [
        DescriptionKey("PHONE_DATA_CODE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "PHONE_DATA_CD", DbType = System.Data.DbType.String),
        ]
        public int? PhoneDataCode
        {
            get
            {
                return this._phoneDataCode;
            }
            set
            {
                this._phoneDataCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad AddressDataCode.
        /// </summary>
        /// <value>Propiedad AddressDataCode.</value>
        [
        DescriptionKey("ADDRESS_DATA_CODE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "ADDRESS_DATA_CD", DbType = System.Data.DbType.String),
        ]
        public int? AddressDataCode
        {
            get
            {
                return this._addressDataCode;
            }
            set
            {
                this._addressDataCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad EmailDataCode.
        /// </summary>
        /// <value>Propiedad EmailDataCode.</value>
        [
        DescriptionKey("EMAIL_DATA_CODE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "EMAIL_DATA_CD", DbType = System.Data.DbType.String),
        ]
        public int? EmailDataCode
        {
            get
            {
                return this._emailDataCode;
            }
            set
            {
                this._emailDataCode = value;
            }
        }

    }
}