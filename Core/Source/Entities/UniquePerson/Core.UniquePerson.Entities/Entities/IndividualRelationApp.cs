/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.UniquePerson.IndividualRelationApp.dict v1.0
 * FileSize=6341 Header=269 CRC=30018326
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.UniquePerson.Entities
{
    /// <summary>
    /// Definición de entidad IndividualRelationApp.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.UniquePerson.IndividualRelationApp.dict"),
    Serializable(),
    DescriptionKey("INDIVIDUAL_RELATION_APP_ENTITY"),
    TableMap(TableName = "INDIVIDUAL_RELATION_APP", Schema = "UP"),
    ]
    public partial class IndividualRelationApp :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string IndividualRelationAppId = "IndividualRelationAppId";
            public static readonly string ParentIndividualId = "ParentIndividualId";
            public static readonly string ChildIndividualId = "ChildIndividualId";
            public static readonly string RelationTypeCode = "RelationTypeCode";
            public static readonly string AgentAgencyId = "AgentAgencyId";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="individualRelationAppId">Propiedad clave IndividualRelationAppId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int individualRelationAppId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.IndividualRelationAppId, individualRelationAppId);

            return new PrimaryKey<T>(keys);
        }
        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.IndividualRelationAppId, null);

            return new PrimaryKey<T>(keys);
        }
        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="userId">Propiedad clave UserId.</param>
        /// <param name="moduleCode">Propiedad clave ModuleCode.</param>
        /// <param name="submoduleCode">Propiedad clave SubmoduleCode.</param>
        /// <param name="hierarchyCode">Propiedad clave HierarchyCode.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int parentIndividualId, int childIndividualId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.ParentIndividualId, parentIndividualId);
            keys.Add(Properties.ChildIndividualId, childIndividualId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="individualRelationAppId">Propiedad clave IndividualRelationAppId.</param>
        public static PrimaryKey CreatePrimaryKey(int individualRelationAppId)
        {
            return InternalCreatePrimaryKey<IndividualRelationApp>(individualRelationAppId);
        }
        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<IndividualRelationApp>();
        }
        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="userId">Propiedad clave UserId.</param>
        /// <param name="moduleCode">Propiedad clave ModuleCode.</param>
        /// <param name="submoduleCode">Propiedad clave SubmoduleCode.</param>
        /// <param name="hierarchyCode">Propiedad clave HierarchyCode.</param>
        public static PrimaryKey CreatePrimaryKey(int parentIndividualId, int childIndividualId)
        {
            return InternalCreatePrimaryKey<IndividualRelationApp>(parentIndividualId, childIndividualId);
        }

        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad ParentIndividualId.
        /// </summary>
        private int _parentIndividualId;
        /// <summary>
        /// Atributo para la propiedad ChildIndividualId.
        /// </summary>
        private int _childIndividualId;
        /// <summary>
        /// Atributo para la propiedad RelationTypeCode.
        /// </summary>
        private int _relationTypeCode;
        /// <summary>
        /// Atributo para la propiedad AgentAgencyId.
        /// </summary>
        private int _agentAgencyId;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="individualRelationAppId">IndividualRelationAppId key property.</param>
        public IndividualRelationApp(int individualRelationAppId) :
            this(IndividualRelationApp.CreatePrimaryKey(individualRelationAppId), null)
        {
        }
        public IndividualRelationApp() :
            this(IndividualRelationApp.CreatePrimaryKey(), null)
        {
        }
        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public IndividualRelationApp(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }


        /// <summary>
        /// Devuelve o setea el valor de la propiedad IndividualRelationAppId.
        /// </summary>
        /// <value>Propiedad IndividualRelationAppId.</value>
        [
        DescriptionKey("INDIVIDUAL_RELATION_APP_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "INDIVIDUAL_RELATION_APP_ID", DbType = System.Data.DbType.String),
        ]
        public int IndividualRelationAppId
        {
            get
            {
                return (int)this._primaryKey[Properties.IndividualRelationAppId];
            }
            set
            {
                this._primaryKey[Properties.IndividualRelationAppId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ParentIndividualId.
        /// </summary>
        /// <value>Propiedad ParentIndividualId.</value>
        [
        DescriptionKey("PARENT_INDIVIDUAL_ID_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "PARENT_INDIVIDUAL_ID", DbType = System.Data.DbType.String),
        ]
        public int ParentIndividualId
        {
            get
            {
                return this._parentIndividualId;
            }
            set
            {
                this._parentIndividualId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ChildIndividualId.
        /// </summary>
        /// <value>Propiedad ChildIndividualId.</value>
        [
        DescriptionKey("CHILD_INDIVIDUAL_ID_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "CHILD_INDIVIDUAL_ID", DbType = System.Data.DbType.String),
        ]
        public int ChildIndividualId
        {
            get
            {
                return this._childIndividualId;
            }
            set
            {
                this._childIndividualId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad RelationTypeCode.
        /// </summary>
        /// <value>Propiedad RelationTypeCode.</value>
        [
        DescriptionKey("RELATION_TYPE_CODE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "RELATION_TYPE_CD", DbType = System.Data.DbType.String),
        ]
        public int RelationTypeCode
        {
            get
            {
                return this._relationTypeCode;
            }
            set
            {
                this._relationTypeCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad AgentAgencyId.
        /// </summary>
        /// <value>Propiedad AgentAgencyId.</value>
        [
        DescriptionKey("AGENT_AGENCY_ID_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "AGENT_AGENCY_ID", DbType = System.Data.DbType.String),
        ]
        public int AgentAgencyId
        {
            get
            {
                return this._agentAgencyId;
            }
            set
            {
                this._agentAgencyId = value;
            }
        }

    }
}