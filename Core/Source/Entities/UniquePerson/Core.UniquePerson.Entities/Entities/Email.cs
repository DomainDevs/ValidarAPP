/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: namespaceses.Email.dict v1.0
 * FileSize=6004 Header=221 CRC=64695520
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.UniquePerson.Entities
{
    /// <summary>
    /// Definición de entidad Email.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.UniquePerson.Email.dict"),
    Serializable(),
    DescriptionKey("EMAIL_ENTITY")
    ]
    public partial class Email : BusinessObject
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string IndividualId = "IndividualId";
            public static readonly string DataId = "DataId";
            public static readonly string Address = "Address";
            public static readonly string EmailTypeCode = "EmailTypeCode";
            public static readonly string IsMailingAddress = "IsMailingAddress";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.IndividualId, null);
            keys.Add(Properties.DataId, null);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="individualId">Propiedad clave IndividualId.</param>
        /// <param name="dataId">Propiedad clave DataId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int individualId, int dataId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.IndividualId, individualId);
            keys.Add(Properties.DataId, dataId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<Email>();
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="individualId">Propiedad clave IndividualId.</param>
        /// <param name="dataId">Propiedad clave DataId.</param>
        public static PrimaryKey CreatePrimaryKey(int individualId, int dataId)
        {
            return InternalCreatePrimaryKey<Email>(individualId, dataId);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad Address.
        /// </summary>
        private string _address = null;
        /// <summary>
        /// Atributo para la propiedad EmailTypeCode.
        /// </summary>
        private int _emailTypeCode;
        /// <summary>
        /// Atributo para la propiedad IsMailingAddress.
        /// </summary>
        private bool _isMailingAddress;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase
        /// </summary>
        public Email() :
            this(Email.CreatePrimaryKey(), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="individualId">IndividualId key property.</param>
        /// <param name="dataId">DataId key property.</param>
        public Email(int individualId, int dataId) :
            this(Email.CreatePrimaryKey(individualId, dataId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public Email(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }


        /// <summary>
        /// Devuelve o setea el valor de la propiedad IndividualId.
        /// </summary>
        /// <value>Propiedad IndividualId.</value>
        [
        DescriptionKey("INDIVIDUAL_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "INDIVIDUAL_ID", DbType = System.Data.DbType.String),
        ]
        public int IndividualId
        {
            get
            {
                return (int)this._primaryKey[Properties.IndividualId];
            }
            set
            {
                this._primaryKey[Properties.IndividualId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad DataId.
        /// </summary>
        /// <value>Propiedad DataId.</value>
        [
        DescriptionKey("DATA_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "DATA_ID", DbType = System.Data.DbType.String),
        ]
        public int DataId
        {
            get
            {
                return (int)this._primaryKey[Properties.DataId];
            }
            set
            {
                this._primaryKey[Properties.DataId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Address.
        /// </summary>
        /// <value>Propiedad Address.</value>
        [
        DescriptionKey("ADDRESS_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "ADDRESS", DbType = System.Data.DbType.String),
        ]
        public string Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Address);
                }
                this._address = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad EmailTypeCode.
        /// </summary>
        /// <value>Propiedad EmailTypeCode.</value>
        [
        DescriptionKey("EMAIL_TYPE_CODE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "EMAIL_TYPE_CD", DbType = System.Data.DbType.String),
        ]
        public int EmailTypeCode
        {
            get
            {
                return this._emailTypeCode;
            }
            set
            {
                this._emailTypeCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IsMailingAddress.
        /// </summary>
        /// <value>Propiedad IsMailingAddress.</value>
        [
        DescriptionKey("IS_MAILING_ADDRESS_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "IS_MAILING_ADDRESS", DbType = System.Data.DbType.String),
        ]
        public bool IsMailingAddress
        {
            get
            {
                return this._isMailingAddress;
            }
            set
            {
                this._isMailingAddress = value;
            }
        }

    }
}