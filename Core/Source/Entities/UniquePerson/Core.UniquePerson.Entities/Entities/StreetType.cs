/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.UniquePerson.StreetType.dict v1.0
 * FileSize=6360 Header=253 CRC=2379329884
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.UniquePerson.Entities
{
    /// <summary>
    /// Definición de entidad StreetType.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.UniquePerson.StreetType.dict"),
    Serializable(),
    DescriptionKey("STREET_TYPE_ENTITY"),
    TableMap(TableName = "STREET_TYPE", Schema = "UP"),
    ]
    public partial class StreetType :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string StreetTypeCode = "StreetTypeCode";
            public static readonly string TinyDescription = "TinyDescription";
            public static readonly string SmallDescription = "SmallDescription";
            public static readonly string SimilarStreetTypeCode = "SimilarStreetTypeCode";
            public static readonly string ViaTypeCode = "ViaTypeCode";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="streetTypeCode">Propiedad clave StreetTypeCode.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int streetTypeCode)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.StreetTypeCode, streetTypeCode);

            return new PrimaryKey<T>(keys);
        }

        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.StreetTypeCode, null);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="streetTypeCode">Propiedad clave StreetTypeCode.</param>
        public static PrimaryKey CreatePrimaryKey(int streetTypeCode)
        {
            return InternalCreatePrimaryKey<StreetType>(streetTypeCode);
        }

        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<StreetType>();
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad TinyDescription.
        /// </summary>
        private string _tinyDescription = null;
        /// <summary>
        /// Atributo para la propiedad SmallDescription.
        /// </summary>
        private string _smallDescription = null;
        /// <summary>
        /// Atributo para la propiedad SimilarStreetTypeCode.
        /// </summary>
        private int? _similarStreetTypeCode = null;
        /// <summary>
        /// Atributo para la propiedad ViaTypeCode.
        /// </summary>
        private int? _viaTypeCode = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="streetTypeCode">StreetTypeCode key property.</param>
        public StreetType(int streetTypeCode) :
            this(StreetType.CreatePrimaryKey(streetTypeCode), null)
        {
        }

        public StreetType() :
            this(StreetType.CreatePrimaryKey(), null)
        {
        }
        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public StreetType(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad StreetTypeCode.
        /// </summary>
        /// <value>Propiedad StreetTypeCode.</value>
        [
        DescriptionKey("STREET_TYPE_CODE_PROPERTY"),
        PersistentProperty(IsKey = true, KeyType ="None"),
        ColumnMap(ColumnName = "STREET_TYPE_CD", DbType = System.Data.DbType.String),
        ]
        public int StreetTypeCode
        {
            get
            {
                return (int)this._primaryKey[Properties.StreetTypeCode];
            }
            set
            {
                this._primaryKey[Properties.StreetTypeCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad TinyDescription.
        /// </summary>
        /// <value>Propiedad TinyDescription.</value>
        [
        DescriptionKey("TINY_DESCRIPTION_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "TINY_DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string TinyDescription
        {
            get
            {
                return this._tinyDescription;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.TinyDescription);
                }
                this._tinyDescription = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad SmallDescription.
        /// </summary>
        /// <value>Propiedad SmallDescription.</value>
        [
        DescriptionKey("SMALL_DESCRIPTION_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "SMALL_DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string SmallDescription
        {
            get
            {
                return this._smallDescription;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.SmallDescription);
                }
                this._smallDescription = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad SimilarStreetTypeCode.
        /// </summary>
        /// <value>Propiedad SimilarStreetTypeCode.</value>
        [
        DescriptionKey("SIMILAR_STREET_TYPE_CODE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "SIMILAR_STREET_TYPE_CD", DbType = System.Data.DbType.String),
        ]
        public int? SimilarStreetTypeCode
        {
            get
            {
                return this._similarStreetTypeCode;
            }
            set
            {
                this._similarStreetTypeCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ViaTypeCode.
        /// </summary>
        /// <value>Propiedad ViaTypeCode.</value>
        [
        DescriptionKey("VIA_TYPE_CODE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "VIA_TYPE_CD", DbType = System.Data.DbType.String),
        ]
        public int? ViaTypeCode
        {
            get
            {
                return this._viaTypeCode;
            }
            set
            {
                this._viaTypeCode = value;
            }
        }

    }
}