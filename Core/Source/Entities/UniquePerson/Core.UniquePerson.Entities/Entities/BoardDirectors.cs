/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.UniquePerson.BoardDirectors.dict v1.0
 * FileSize=6074 Header=257 CRC=3996423067
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.UniquePerson.Entities
{
    /// <summary>
    /// Definición de entidad BoardDirectors.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.UniquePerson.BoardDirectors.dict"),
    Serializable(),
    DescriptionKey("BOARD_DIRECTORS_ENTITY"),
    TableMap(TableName = "BOARD_DIRECTORS", Schema = "UP"),
    ]
    public partial class BoardDirectors :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string BoardDirectorsCode = "BoardDirectorsCode";
            public static readonly string TechnicalCardId = "TechnicalCardId";
            public static readonly string BoardMemberName = "BoardMemberName";
            public static readonly string BoardMemberJobTitle = "BoardMemberJobTitle";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="boardDirectorsCode">Propiedad clave BoardDirectorsCode.</param>
        /// <param name="technicalCardId">Propiedad clave TechnicalCardId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int boardDirectorsCode, int technicalCardId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.BoardDirectorsCode, boardDirectorsCode);
            keys.Add(Properties.TechnicalCardId, technicalCardId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="boardDirectorsCode">Propiedad clave BoardDirectorsCode.</param>
        /// <param name="technicalCardId">Propiedad clave TechnicalCardId.</param>
        public static PrimaryKey CreatePrimaryKey(int boardDirectorsCode, int technicalCardId)
        {
            return InternalCreatePrimaryKey<BoardDirectors>(boardDirectorsCode, technicalCardId);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad BoardMemberName.
        /// </summary>
        private string _boardMemberName = null;
        /// <summary>
        /// Atributo para la propiedad BoardMemberJobTitle.
        /// </summary>
        private string _boardMemberJobTitle = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="boardDirectorsCode">BoardDirectorsCode key property.</param>
        /// <param name="technicalCardId">TechnicalCardId key property.</param>
        public BoardDirectors(int boardDirectorsCode, int technicalCardId) :
            this(BoardDirectors.CreatePrimaryKey(boardDirectorsCode, technicalCardId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public BoardDirectors(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad BoardDirectorsCode.
        /// </summary>
        /// <value>Propiedad BoardDirectorsCode.</value>
        [
        DescriptionKey("BOARD_DIRECTORS_CODE_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "BOARD_DIRECTORS_CD", DbType = System.Data.DbType.String),
        ]
        public int BoardDirectorsCode
        {
            get
            {
                return (int)this._primaryKey[Properties.BoardDirectorsCode];
            }
            set
            {
                this._primaryKey[Properties.BoardDirectorsCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad TechnicalCardId.
        /// </summary>
        /// <value>Propiedad TechnicalCardId.</value>
        [
        DescriptionKey("TECHNICAL_CARD_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "TECHNICAL_CARD_ID", DbType = System.Data.DbType.String),
        ]
        public int TechnicalCardId
        {
            get
            {
                return (int)this._primaryKey[Properties.TechnicalCardId];
            }
            set
            {
                this._primaryKey[Properties.TechnicalCardId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad BoardMemberName.
        /// </summary>
        /// <value>Propiedad BoardMemberName.</value>
        [
        DescriptionKey("BOARD_MEMBER_NAME_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "BOARD_MEMBER_NAME", DbType = System.Data.DbType.String),
        ]
        public string BoardMemberName
        {
            get
            {
                return this._boardMemberName;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.BoardMemberName);
                }
                this._boardMemberName = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad BoardMemberJobTitle.
        /// </summary>
        /// <value>Propiedad BoardMemberJobTitle.</value>
        [
        DescriptionKey("BOARD_MEMBER_JOB_TITLE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "BOARD_MEMBER_JOB_TITLE", DbType = System.Data.DbType.String),
        ]
        public string BoardMemberJobTitle
        {
            get
            {
                return this._boardMemberJobTitle;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.BoardMemberJobTitle);
                }
                this._boardMemberJobTitle = value;
            }
        }

    }
}