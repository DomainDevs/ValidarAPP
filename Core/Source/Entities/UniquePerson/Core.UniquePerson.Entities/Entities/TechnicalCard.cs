/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.UniquePerson.TechnicalCard.dict v1.0
 * FileSize=15833 Header=257 CRC=1937051201
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.UniquePerson.Entities
{
    /// <summary>
    /// Definición de entidad TechnicalCard.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.UniquePerson.TechnicalCard.dict"),
    Serializable(),
    DescriptionKey("TECHNICAL_CARD_ENTITY"),
    TableMap(TableName = "TECHNICAL_CARD", Schema = "UP"),
    ]
    public partial class TechnicalCard :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string TechnicalCardId = "TechnicalCardId";
            public static readonly string IndividualId = "IndividualId";
            public static readonly string ExperienceTypeCode = "ExperienceTypeCode";
            public static readonly string AuthorizedCapitalAmount = "AuthorizedCapitalAmount";
            public static readonly string CurrentPileAmount = "CurrentPileAmount";
            public static readonly string EnrollmentNum = "EnrollmentNum";
            public static readonly string EnrollmentFrom = "EnrollmentFrom";
            public static readonly string EnrollmentTo = "EnrollmentTo";
            public static readonly string TechnicalCardLocation = "TechnicalCardLocation";
            public static readonly string TaxInspector = "TaxInspector";
            public static readonly string CorporatePurpose = "CorporatePurpose";
            public static readonly string References = "References";
            public static readonly string FinancialConcept = "FinancialConcept";
            public static readonly string PileDescription = "PileDescription";
            public static readonly string Experience = "Experience";
            public static readonly string RegistrationDate = "RegistrationDate";
            public static readonly string RegisteredUserId = "RegisteredUserId";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="technicalCardId">Propiedad clave TechnicalCardId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int technicalCardId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.TechnicalCardId, technicalCardId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="technicalCardId">Propiedad clave TechnicalCardId.</param>
        public static PrimaryKey CreatePrimaryKey(int technicalCardId)
        {
            return InternalCreatePrimaryKey<TechnicalCard>(technicalCardId);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad IndividualId.
        /// </summary>
        private int? _individualId = null;
        /// <summary>
        /// Atributo para la propiedad ExperienceTypeCode.
        /// </summary>
        private int _experienceTypeCode;
        /// <summary>
        /// Atributo para la propiedad AuthorizedCapitalAmount.
        /// </summary>
        private decimal _authorizedCapitalAmount;
        /// <summary>
        /// Atributo para la propiedad CurrentPileAmount.
        /// </summary>
        private decimal? _currentPileAmount = null;
        /// <summary>
        /// Atributo para la propiedad EnrollmentNum.
        /// </summary>
        private string _enrollmentNum = null;
        /// <summary>
        /// Atributo para la propiedad EnrollmentFrom.
        /// </summary>
        private DateTime _enrollmentFrom;
        /// <summary>
        /// Atributo para la propiedad EnrollmentTo.
        /// </summary>
        private DateTime? _enrollmentTo = null;
        /// <summary>
        /// Atributo para la propiedad TechnicalCardLocation.
        /// </summary>
        private string _technicalCardLocation = null;
        /// <summary>
        /// Atributo para la propiedad TaxInspector.
        /// </summary>
        private string _taxInspector = null;
        /// <summary>
        /// Atributo para la propiedad CorporatePurpose.
        /// </summary>
        private string _corporatePurpose = null;
        /// <summary>
        /// Atributo para la propiedad References.
        /// </summary>
        private string _references = null;
        /// <summary>
        /// Atributo para la propiedad FinancialConcept.
        /// </summary>
        private string _financialConcept = null;
        /// <summary>
        /// Atributo para la propiedad PileDescription.
        /// </summary>
        private string _pileDescription = null;
        /// <summary>
        /// Atributo para la propiedad Experience.
        /// </summary>
        private string _experience = null;
        /// <summary>
        /// Atributo para la propiedad RegistrationDate.
        /// </summary>
        private DateTime? _registrationDate = null;
        /// <summary>
        /// Atributo para la propiedad RegisteredUserId.
        /// </summary>
        private int? _registeredUserId = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="technicalCardId">TechnicalCardId key property.</param>
        public TechnicalCard(int technicalCardId) :
            this(TechnicalCard.CreatePrimaryKey(technicalCardId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public TechnicalCard(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad TechnicalCardId.
        /// </summary>
        /// <value>Propiedad TechnicalCardId.</value>
        [
        DescriptionKey("TECHNICAL_CARD_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "TECHNICAL_CARD_ID", DbType = System.Data.DbType.String),
        ]
        public int TechnicalCardId
        {
            get
            {
                return (int)this._primaryKey[Properties.TechnicalCardId];
            }
            set
            {
                this._primaryKey[Properties.TechnicalCardId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IndividualId.
        /// </summary>
        /// <value>Propiedad IndividualId.</value>
        [
        DescriptionKey("INDIVIDUAL_ID_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "INDIVIDUAL_ID", DbType = System.Data.DbType.String),
        ]
        public int? IndividualId
        {
            get
            {
                return this._individualId;
            }
            set
            {
                this._individualId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ExperienceTypeCode.
        /// </summary>
        /// <value>Propiedad ExperienceTypeCode.</value>
        [
        DescriptionKey("EXPERIENCE_TYPE_CODE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "EXPERIENCE_TYPE_CD", DbType = System.Data.DbType.String),
        ]
        public int ExperienceTypeCode
        {
            get
            {
                return this._experienceTypeCode;
            }
            set
            {
                this._experienceTypeCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad AuthorizedCapitalAmount.
        /// </summary>
        /// <value>Propiedad AuthorizedCapitalAmount.</value>
        [
        DescriptionKey("AUTHORIZED_CAPITAL_AMOUNT_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "AUTHORIZED_CAPITAL_AMT", DbType = System.Data.DbType.Decimal),
        ]
        public decimal AuthorizedCapitalAmount
        {
            get
            {
                return this._authorizedCapitalAmount;
            }
            set
            {
                this._authorizedCapitalAmount = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad CurrentPileAmount.
        /// </summary>
        /// <value>Propiedad CurrentPileAmount.</value>
        [
        DescriptionKey("CURRENT_PILE_AMOUNT_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "CURRENT_PILE_AMT", DbType = System.Data.DbType.Decimal),
        ]
        public decimal? CurrentPileAmount
        {
            get
            {
                return this._currentPileAmount;
            }
            set
            {
                this._currentPileAmount = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad EnrollmentNum.
        /// </summary>
        /// <value>Propiedad EnrollmentNum.</value>
        [
        DescriptionKey("ENROLLMENT_NUM_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "ENROLLMENT_NUM", DbType = System.Data.DbType.String),
        ]
        public string EnrollmentNum
        {
            get
            {
                return this._enrollmentNum;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.EnrollmentNum);
                }
                this._enrollmentNum = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad EnrollmentFrom.
        /// </summary>
        /// <value>Propiedad EnrollmentFrom.</value>
        [
        DescriptionKey("ENROLLMENT_FROM_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "ENROLLMENT_FROM", DbType = System.Data.DbType.String),
        ]
        public DateTime EnrollmentFrom
        {
            get
            {
                return this._enrollmentFrom;
            }
            set
            {
                this._enrollmentFrom = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad EnrollmentTo.
        /// </summary>
        /// <value>Propiedad EnrollmentTo.</value>
        [
        DescriptionKey("ENROLLMENT_TO_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "ENROLLMENT_TO", DbType = System.Data.DbType.String),
        ]
        public DateTime? EnrollmentTo
        {
            get
            {
                return this._enrollmentTo;
            }
            set
            {
                this._enrollmentTo = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad TechnicalCardLocation.
        /// </summary>
        /// <value>Propiedad TechnicalCardLocation.</value>
        [
        DescriptionKey("TECHNICAL_CARD_LOCATION_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "TECHNICAL_CARD_LOCATION", DbType = System.Data.DbType.String),
        ]
        public string TechnicalCardLocation
        {
            get
            {
                return this._technicalCardLocation;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.TechnicalCardLocation);
                }
                this._technicalCardLocation = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad TaxInspector.
        /// </summary>
        /// <value>Propiedad TaxInspector.</value>
        [
        DescriptionKey("TAX_INSPECTOR_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "TAX_INSPECTOR", DbType = System.Data.DbType.String),
        ]
        public string TaxInspector
        {
            get
            {
                return this._taxInspector;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.TaxInspector);
                }
                this._taxInspector = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad CorporatePurpose.
        /// </summary>
        /// <value>Propiedad CorporatePurpose.</value>
        [
        DescriptionKey("CORPORATE_PURPOSE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "CORPORATE_PURPOSE", DbType = System.Data.DbType.String),
        ]
        public string CorporatePurpose
        {
            get
            {
                return this._corporatePurpose;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.CorporatePurpose);
                }
                this._corporatePurpose = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad References.
        /// </summary>
        /// <value>Propiedad References.</value>
        [
        DescriptionKey("REFERENCES_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "REFERENCES", DbType = System.Data.DbType.String),
        ]
        public string References
        {
            get
            {
                return this._references;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.References);
                }
                this._references = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad FinancialConcept.
        /// </summary>
        /// <value>Propiedad FinancialConcept.</value>
        [
        DescriptionKey("FINANCIAL_CONCEPT_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "FINANCIAL_CONCEPT", DbType = System.Data.DbType.String),
        ]
        public string FinancialConcept
        {
            get
            {
                return this._financialConcept;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.FinancialConcept);
                }
                this._financialConcept = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad PileDescription.
        /// </summary>
        /// <value>Propiedad PileDescription.</value>
        [
        DescriptionKey("PILE_DESCRIPTION_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "PILE_DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string PileDescription
        {
            get
            {
                return this._pileDescription;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.PileDescription);
                }
                this._pileDescription = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Experience.
        /// </summary>
        /// <value>Propiedad Experience.</value>
        [
        DescriptionKey("EXPERIENCE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "EXPERIENCE", DbType = System.Data.DbType.String),
        ]
        public string Experience
        {
            get
            {
                return this._experience;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Experience);
                }
                this._experience = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad RegistrationDate.
        /// </summary>
        /// <value>Propiedad RegistrationDate.</value>
        [
        DescriptionKey("REGISTRATION_DATE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "REGISTRATION_DATE", DbType = System.Data.DbType.String),
        ]
        public DateTime? RegistrationDate
        {
            get
            {
                return this._registrationDate;
            }
            set
            {
                this._registrationDate = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad RegisteredUserId.
        /// </summary>
        /// <value>Propiedad RegisteredUserId.</value>
        [
        DescriptionKey("REGISTERED_USER_ID_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "REGISTERED_USER_ID", DbType = System.Data.DbType.String),
        ]
        public int? RegisteredUserId
        {
            get
            {
                return this._registeredUserId;
            }
            set
            {
                this._registeredUserId = value;
            }
        }

    }
}