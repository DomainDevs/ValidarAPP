/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.UniqueUser.AccessProfiles.dict v1.0
 * FileSize=6219 Header=255 CRC=1247954424
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.UniqueUser.Entities
{
    /// <summary>
    /// Definición de entidad AccessProfiles.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.UniqueUser.AccessProfiles.dict"),
    Serializable(),
    DescriptionKey("ACCESS_PROFILES_ENTITY"),
    TableMap(TableName = "ACCESS_PROFILES", Schema = "UU"),
    ]
    public partial class AccessProfiles :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string ProfileId = "ProfileId";
            public static readonly string AccessId = "AccessId";
            public static readonly string DatabaseId = "DatabaseId";
            public static readonly string ExpirationDate = "ExpirationDate";
            public static readonly string Enabled = "Enabled";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="profileId">Propiedad clave ProfileId.</param>
        /// <param name="accessId">Propiedad clave AccessId.</param>
        /// <param name="databaseId">Propiedad clave DatabaseId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int profileId, int accessId, int databaseId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.ProfileId, profileId);
            keys.Add(Properties.AccessId, accessId);
            keys.Add(Properties.DatabaseId, databaseId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="profileId">Propiedad clave ProfileId.</param>
        /// <param name="accessId">Propiedad clave AccessId.</param>
        /// <param name="databaseId">Propiedad clave DatabaseId.</param>
        public static PrimaryKey CreatePrimaryKey(int profileId, int accessId, int databaseId)
        {
            return InternalCreatePrimaryKey<AccessProfiles>(profileId, accessId, databaseId);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad ExpirationDate.
        /// </summary>
        private DateTime? _expirationDate = null;
        /// <summary>
        /// Indicate if ExpirationDate property value is null.
        /// </summary>
        private bool _isExpirationDateNull = true;
        /// <summary>
        /// Atributo para la propiedad Enabled.
        /// </summary>
        private bool _enabled;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="profileId">ProfileId key property.</param>
        /// <param name="accessId">AccessId key property.</param>
        /// <param name="databaseId">DatabaseId key property.</param>
        public AccessProfiles(int profileId, int accessId, int databaseId) :
            this(AccessProfiles.CreatePrimaryKey(profileId, accessId, databaseId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public AccessProfiles(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad ProfileId.
        /// </summary>
        /// <value>Propiedad ProfileId.</value>
        [
        DescriptionKey("PROFILE_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "PROFILE_ID", DbType = System.Data.DbType.String),
        ]
        public int ProfileId
        {
            get
            {
                return (int)this._primaryKey[Properties.ProfileId];
            }
            set
            {
                this._primaryKey[Properties.ProfileId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad AccessId.
        /// </summary>
        /// <value>Propiedad AccessId.</value>
        [
        DescriptionKey("ACCESS_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "ACCESS_ID", DbType = System.Data.DbType.String),
        ]
        public int AccessId
        {
            get
            {
                return (int)this._primaryKey[Properties.AccessId];
            }
            set
            {
                this._primaryKey[Properties.AccessId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad DatabaseId.
        /// </summary>
        /// <value>Propiedad DatabaseId.</value>
        [
        DescriptionKey("DATABASE_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "DATABASE_ID", DbType = System.Data.DbType.String),
        ]
        public int DatabaseId
        {
            get
            {
                return (int)this._primaryKey[Properties.DatabaseId];
            }
            set
            {
                this._primaryKey[Properties.DatabaseId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ExpirationDate.
        /// </summary>
        /// <value>Propiedad ExpirationDate.</value>
        [
        DescriptionKey("EXPIRATION_DATE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "EXPIRATION_DATE", DbType = System.Data.DbType.String),
        ]
        public DateTime? ExpirationDate
        {
            get
            {
                if (this._isExpirationDateNull)
                {
                    throw new InvalidUseOfNullPropertyException(
                        this.GetType().FullName,
                        "ExpirationDate");
                }
                return this._expirationDate;
            }
            set
            {
                this._expirationDate = value;
                this._isExpirationDateNull = false;
            }
        }

        /// <summary>
        /// La propiedad ExpirationDate puede tener un valor nulo. 
        /// Esta propiedad indica si el valor de ExpirationDate es 
        /// nulo o no.
        /// </summary>
        /// <exception 
        /// cref="Sistran.Core.Framework.InvalidPropertyValueException">
        /// Si se intenta asignar True a la propiedad, ya que el True se 
        /// establece al asignar un valor en la propiedad 
        /// ExpirationDate.
        /// </exception>
        /// <value>true si ExpirationDate es null, sino false.</value>
        public bool IsExpirationDateNull
        {
            get
            {
                return this._isExpirationDateNull;
            }
            set
            {
                if (!value)
                {
                    throw new InvalidPropertyValueException(
                        this.GetType().FullName,
                        "IsExpirationDateNull",
                        value);
                }
                this._isExpirationDateNull = true;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Enabled.
        /// </summary>
        /// <value>Propiedad Enabled.</value>
        [
        DescriptionKey("ENABLED_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "ENABLED", DbType = System.Data.DbType.String),
        ]
        public bool Enabled
        {
            get
            {
                return this._enabled;
            }
            set
            {
                this._enabled = value;
            }
        }

    }
}