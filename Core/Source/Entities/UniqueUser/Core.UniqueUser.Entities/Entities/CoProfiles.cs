/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.UniqueUser.CoProfiles.dict v1.0
 * FileSize=4981 Header=251 CRC=1401544279
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.UniqueUser.Entities
{
    /// <summary>
    /// Definición de entidad CoProfiles.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.UniqueUser.CoProfiles.dict"),
    Serializable(),
    DescriptionKey("CO_PROFILES_ENTITY"),
    TableMap(TableName="CO_PROFILES", Schema="UU"),
    ]
    public partial class CoProfiles :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string ProfileId = "ProfileId";
			public static readonly string Multibranch = "Multibranch";
			public static readonly string Intermediary = "Intermediary";
			public static readonly string Quoted = "Quoted";
		}

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="profileId">Propiedad clave ProfileId.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>(int profileId)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.ProfileId, profileId);

		    return new PrimaryKey<T>(keys);
	    }

		/// <summary>
		/// Crea una clave primaria para esta clase.
		/// </summary>
		/// <param name="profileId">Propiedad clave ProfileId.</param>
		public static PrimaryKey CreatePrimaryKey(int profileId)
	    {
			return InternalCreatePrimaryKey<CoProfiles>(profileId);
		}
#endregion

	    //*** Object Attributes ********************************

		/// <summary>
		/// Atributo para la propiedad Multibranch.
		/// </summary>
        private bool _multibranch;
		/// <summary>
		/// Atributo para la propiedad Intermediary.
		/// </summary>
        private bool _intermediary;
		/// <summary>
		/// Atributo para la propiedad Quoted.
		/// </summary>
        private bool _quoted;
	    //*** Object Constructors ********************************

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="profileId">ProfileId key property.</param>
	    public CoProfiles(int profileId):
			this(CoProfiles.CreatePrimaryKey(profileId), null)
	    {
	    }

		/// <summary>
		/// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
		/// </summary>
		/// <param name="key">
		/// Identificador de la instancia de la entidad.
		/// </param>
		/// <param name="initialValues">
		/// Valores para establecer el estado de la instancia.
		/// </param>
	    public CoProfiles(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad ProfileId.
		/// </summary>
		/// <value>Propiedad ProfileId.</value>
	    [
		DescriptionKey("PROFILE_ID_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="PROFILE_ID", DbType=System.Data.DbType.String),
	    ]
        public int ProfileId
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.ProfileId];
		    }
		    set
		    {
				this._primaryKey[Properties.ProfileId] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Multibranch.
		/// </summary>
		/// <value>Propiedad Multibranch.</value>
	    [
		DescriptionKey("MULTIBRANCH_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="MULTIBRANCH", DbType=System.Data.DbType.String),
	    ]
        public bool Multibranch
	    {
		    get
		    {
			    return this._multibranch;
		    }
		    set
		    {
				this._multibranch = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Intermediary.
		/// </summary>
		/// <value>Propiedad Intermediary.</value>
	    [
		DescriptionKey("INTERMEDIARY_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="INTERMEDIARY", DbType=System.Data.DbType.String),
	    ]
        public bool Intermediary
	    {
		    get
		    {
			    return this._intermediary;
		    }
		    set
		    {
				this._intermediary = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Quoted.
		/// </summary>
		/// <value>Propiedad Quoted.</value>
	    [
		DescriptionKey("QUOTED_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="QUOTED", DbType=System.Data.DbType.String),
	    ]
        public bool Quoted
	    {
		    get
		    {
			    return this._quoted;
		    }
		    set
		    {
				this._quoted = value;
			}
	    }

    }
}