/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.UniqueUser.UniqueUsers.dict v1.0
 * FileSize=12171 Header=253 CRC=2519958188
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.UniqueUser.Entities
{
    /// <summary>
    /// Definición de entidad UniqueUsers.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.UniqueUser.UniqueUsers.dict"),
    Serializable(),
    DescriptionKey("UNIQUE_USERS_ENTITY"),
    TableMap(TableName = "UNIQUE_USERS", Schema = "UU"),
    ]
    public partial class UniqueUsers :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string UserId = "UserId";
            public static readonly string AccountName = "AccountName";
            public static readonly string PersonId = "PersonId";
            public static readonly string AuthenticationTypeCode = "AuthenticationTypeCode";
            public static readonly string UserDomain = "UserDomain";
            public static readonly string DisabledDate = "DisabledDate";
            public static readonly string LockDate = "LockDate";
            public static readonly string ExpirationDate = "ExpirationDate";
            public static readonly string LockPassword = "LockPassword";
            public static readonly string ActivationDate = "ActivationDate";
            public static readonly string CreatedDate = "CreatedDate";
            public static readonly string CreatedUserId = "CreatedUserId";
            public static readonly string ModifiedDate = "ModifiedDate";
            public static readonly string ModifiedUserId = "ModifiedUserId";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="userId">Propiedad clave UserId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int userId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.UserId, userId);

            return new PrimaryKey<T>(keys);
        }
        protected static PrimaryKey InternalCreatePrimaryKey<T>(string accountName)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.AccountName, accountName);

            return new PrimaryKey<T>(keys);
        }
        /// <summary>
        /// Internals the create primary key.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <returns></returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.UserId, null);
            return new PrimaryKey<T>(keys);
        }
        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="userId">Propiedad clave UserId.</param>
        public static PrimaryKey CreatePrimaryKey(int userId)
        {
            return InternalCreatePrimaryKey<UniqueUsers>(userId);
        }
        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<UniqueUsers>();
        }
        public static PrimaryKey CreatePrimaryKey(string accountName)
        {
            return InternalCreatePrimaryKey<UniqueUsers>(accountName);
        }
        #endregion

        //*** Object Attributes ********************************
        /// <summary>
        /// Atributo para la propiedad _userId.
        /// </summary>
        private string _userId = null;
        /// <summary>
        /// Atributo para la propiedad AccountName.
        /// </summary>
        private string _accountName = null;
        /// <summary>
        /// Atributo para la propiedad PersonId.
        /// </summary>
        private int _personId;
        /// <summary>
        /// Atributo para la propiedad AuthenticationTypeCode.
        /// </summary>
        private int _authenticationTypeCode;
        /// <summary>
        /// Atributo para la propiedad UserDomain.
        /// </summary>
        private string _userDomain = null;
        /// <summary>
        /// Atributo para la propiedad DisabledDate.
        /// </summary>
        private DateTime? _disabledDate = null;
        /// <summary>
        /// Atributo para la propiedad LockDate.
        /// </summary>
        private DateTime? _lockDate = null;
        /// <summary>
        /// Atributo para la propiedad ExpirationDate.
        /// </summary>
        private DateTime? _expirationDate = null;
        /// <summary>
        /// Atributo para la propiedad LockPassword.
        /// </summary>
        private bool _lockPassword;
        /// <summary>
        /// Atributo para la propiedad ActivationDate.
        /// </summary>
        private bool _activationDate;
        /// <summary>
        /// Atributo para la propiedad CreatedDate.
        /// </summary>
        private DateTime? _createdDate = null;
        /// <summary>
        /// Atributo para la propiedad CreatedUserId.
        /// </summary>
        private int? _createdUserId = null;
        /// <summary>
        /// Atributo para la propiedad ModifiedDate.
        /// </summary>
        private DateTime? _modifiedDate = null;
        /// <summary>
        /// Atributo para la propiedad ModifiedUserId.
        /// </summary>
        private int? _modifiedUserId = null;
        /// <summary>
        /// Indicate if ExpirationDate property value is null.
        /// </summary>
        private bool _isExpirationDateNull = true;
        /// <summary>
        /// Indicate if CreateDate property value is null.
        /// </summary>
        private bool _isCreatedDateNull = true;
        /// <summary>
        /// Indicate if CreatedUserId property value is null.
        /// </summary>
        private bool _isCreatedUserIdNull = true;
        /// <summary>
        /// Indicate if ModifiedDate property value is null.
        /// </summary>
        private bool _isModifiedDateNull = true;
        /// <summary>
        /// Indicate if ModifiedUserId property value is null.
        /// </summary>
        private bool _isModifiedUserIdNull = true;
        /// <summary>
        /// Indicate if LockDate property value is null.
        /// </summary>
        private bool _isLockDateNull = true;
        /// <summary>
        /// Indicate if DisabledDate property value is null.
        /// </summary>
        private bool _isDisabledDateNull = true;
        //*** Object Constructors ********************************
        /// <returns>Primary key.</returns>
        public UniqueUsers() :
            this(UniqueUsers.CreatePrimaryKey(), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="userId">UserId key property.</param>
        public UniqueUsers(int userId) :
            this(UniqueUsers.CreatePrimaryKey(userId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public UniqueUsers(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad UserId.
        /// </summary>
        /// <value>Propiedad UserId.</value>
        [
        DescriptionKey("USER_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "USER_ID", DbType = System.Data.DbType.String),
        ]
        public int UserId
        {
            get
            {
                return (int)this._primaryKey[Properties.UserId];
            }
            set
            {
                this._primaryKey[Properties.UserId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad AccountName.
        /// </summary>
        /// <value>Propiedad AccountName.</value>
        [
        DescriptionKey("ACCOUNT_NAME_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "ACCOUNT_NAME", DbType = System.Data.DbType.String),
        ]
        public string AccountName
        {
            get
            {
                return this._accountName;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.AccountName);
                }
                this._accountName = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad PersonId.
        /// </summary>
        /// <value>Propiedad PersonId.</value>
        [
        DescriptionKey("PERSON_ID_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "PERSON_ID", DbType = System.Data.DbType.String),
        ]
        public int PersonId
        {
            get
            {
                return this._personId;
            }
            set
            {
                this._personId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad AuthenticationTypeCode.
        /// </summary>
        /// <value>Propiedad AuthenticationTypeCode.</value>
        [
        DescriptionKey("AUTHENTICATION_TYPE_CODE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "AUTHENTICATION_TYPE_CD", DbType = System.Data.DbType.String),
        ]
        public int AuthenticationTypeCode
        {
            get
            {
                return this._authenticationTypeCode;
            }
            set
            {
                this._authenticationTypeCode = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad UserDomain.
        /// </summary>
        /// <value>Propiedad UserDomain.</value>
        [
        DescriptionKey("USER_DOMAIN_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "USER_DOMAIN", DbType = System.Data.DbType.String),
        ]
        public string UserDomain
        {
            get
            {
                return this._userDomain;
            }
            set
            {
                this._userDomain = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad DisabledDate.
        /// </summary>
        /// <value>Propiedad DisabledDate.</value>
        [
        DescriptionKey("DISABLED_DATE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "DISABLED_DATE", DbType = System.Data.DbType.String),
        ]
        public DateTime? DisabledDate
        {
            get
            {
                if (this._isDisabledDateNull)
                {
                    throw new InvalidUseOfNullPropertyException(
                        this.GetType().FullName,
                        "DisabledDate");
                }
                return this._disabledDate;
            }
            set
            {
                this._disabledDate = value;
                this._isDisabledDateNull = false;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad LockDate.
        /// </summary>
        /// <value>Propiedad LockDate.</value>
        [
        DescriptionKey("LOCK_DATE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "LOCK_DATE", DbType = System.Data.DbType.String),
        ]
        public DateTime? LockDate
        {
            get
            {
                if (this._isLockDateNull)
                {
                    throw new InvalidUseOfNullPropertyException(
                        this.GetType().FullName,
                        "LockDate");
                }
                return this._lockDate;
            }
            set
            {
                this._lockDate = value;
                this._isLockDateNull = false;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ExpirationDate.
        /// </summary>
        /// <value>Propiedad ExpirationDate.</value>
        [
        DescriptionKey("EXPIRATION_DATE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "EXPIRATION_DATE", DbType = System.Data.DbType.String),
        ]
        public DateTime? ExpirationDate
        {
            get
            {
                if (this._isExpirationDateNull)
                {
                    throw new InvalidUseOfNullPropertyException(
                        this.GetType().FullName,
                        "ExpirationDate");
                }
                return this._expirationDate;
            }
            set
            {
                this._expirationDate = value;
                this._isExpirationDateNull = false;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad LockPassword.
        /// </summary>
        /// <value>Propiedad LockPassword.</value>
        [
        DescriptionKey("LOCK_PASSWORD_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "LOCK_PASSWORD", DbType = System.Data.DbType.String),
        ]
        public bool LockPassword
        {
            get
            {
                return this._lockPassword;
            }
            set
            {
                this._lockPassword = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ActivationDate.
        /// </summary>
        /// <value>Propiedad ActivationDate.</value>
        [
        DescriptionKey("ACTIVATION_DATE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "ACTIVATION_DATE", DbType = System.Data.DbType.String),
        ]
        public bool ActivationDate
        {
            get
            {
                return this._activationDate;
            }
            set
            {
                this._activationDate = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad CreatedDate.
        /// </summary>
        /// <value>Propiedad CreatedDate.</value>
        [
        DescriptionKey("CREATED_DATE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "CREATED_DATE", DbType = System.Data.DbType.String),
        ]
        public DateTime? CreatedDate
        {
            get
            {
                return this._createdDate;
            }
            set
            {
                this._createdDate = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad CreatedUserId.
        /// </summary>
        /// <value>Propiedad CreatedUserId.</value>
        [
        DescriptionKey("CREATED_USER_ID_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "CREATED_USER_ID", DbType = System.Data.DbType.String),
        ]
        public int? CreatedUserId
        {
            get
            {
                return this._createdUserId;
            }
            set
            {
                this._createdUserId = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ModifiedDate.
        /// </summary>
        /// <value>Propiedad ModifiedDate.</value>
        [
        DescriptionKey("MODIFIED_DATE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "MODIFIED_DATE", DbType = System.Data.DbType.String),
        ]
        public DateTime? ModifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this._modifiedDate = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ModifiedUserId.
        /// </summary>
        /// <value>Propiedad ModifiedUserId.</value>
        [
        DescriptionKey("MODIFIED_USER_ID_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "MODIFIED_USER_ID", DbType = System.Data.DbType.String),
        ]
        public int? ModifiedUserId
        {
            get
            {
                return this._modifiedUserId;
            }
            set
            {
                this._modifiedUserId = value;
            }
        }
        /// <summary>
        /// La propiedad DisabledDate puede tener un valor nulo. Esta propiedad
        /// indica si el valor de DisabledDate es nulo o no.
        /// </summary>
        /// <value>
        /// La propiedad DisabledDate puede tener un valor nulo. Esta propiedad
        /// indica si el valor de DisabledDate es nulo o no.
        /// </value>
        /// <exception 
        /// cref="Sistran.Core.Framework.InvalidPropertyValueException">
        /// Si se intenta asignar False a esta propiedad, ya que el False se 
        /// establece automáticamente al asignar un valor no nulo a la propiedad
        /// DisabledDate.
        /// </exception>
        public bool IsDisabledDateNull
        {
            get
            {
                return this._isDisabledDateNull;
            }
            set
            {
                if (!value)
                {
                    throw new InvalidPropertyValueException(
                        this.GetType().FullName, "IsDisabledDateNull", value);
                }
                this._isDisabledDateNull = true;
            }
        }
        /// <summary>
        /// La propiedad ExpirationDate puede tener un valor nulo. Esta
        /// propiedad indica si el valor de ExpirationDate es nulo o no.
        /// </summary>
        /// <value>
        /// True si la propiedad ExpirationDate es nula, False en caso 
        /// contrario.
        /// </value>
        /// <exception 
        /// cref="Sistran.Core.Framework.InvalidPropertyValueException">
        /// Si se intenta asignar False a la propiedad, ya que el False se 
        /// establece al asignar un valor en la propiedad ExpirationDate.
        /// </exception>
        public bool IsExpirationDateNull
        {
            get
            {
                return this._isExpirationDateNull;
            }
            set
            {
                if (!value)
                {
                    throw new InvalidPropertyValueException(
                        this.GetType().FullName, "IsExpirationDateNull", value);
                }
                this._isExpirationDateNull = true;
            }
        }
        /// <summary>
        /// La propiedad LockDate puede tener un valor nulo. Esta propiedad
        /// indica si el valor de LockDate es nulo o no.
        /// </summary>
        /// <value>
        /// True : El User no está bloqueado, False: El User tiene fecha de 
        /// bloqueo etablecida.
        /// </value>
        /// <exception 
        /// cref="Sistran.Core.Framework.InvalidPropertyValueException">
        /// Si se intenta asignar False a la propiedad, ya que el False se 
        /// establece al asignar un valor en la propiedad LockDate.
        /// </exception>
        public bool IsLockDateNull
        {
            get
            {
                return this._isLockDateNull;
            }
            set
            {
                if (!value)
                {
                    throw new InvalidPropertyValueException(
                        this.GetType().FullName, "IsLockDateNull", value);
                }
                this._isLockDateNull = true;
            }
        }

    }
}