/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.UniqueUser.Entities.AccessObjects.dict v1.0
 * FileSize=5526 Header=262 CRC=785913374
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.UniqueUser.Entities
{
    /// <summary>
    /// Definición de entidad AccessObjects.
    /// </summary>
    [
        PersistentClass("Sistran.Core.Application.UniqueUser.AccessObjects.dict"),
        Serializable(),
        DescriptionKey("ACCESS_OBJECTS_ENTITY"),
        TableMap(TableName = "ACCESS_OBJECTS", Schema = "UU"),
    ]
    public partial class AccessObjects :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string AccessObjectId = "AccessObjectId";
            public static readonly string ObjectName = "ObjectName";
            public static readonly string Description = "Description";
            public static readonly string AccessObjTypeCode = "AccessObjTypeCode";
        }

        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.AccessObjectId, null);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<AccessObjects>();
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="accessObjectId">Propiedad clave AccessObjectId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int accessObjectId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.AccessObjectId, accessObjectId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="accessObjectId">Propiedad clave AccessObjectId.</param>
        public static PrimaryKey CreatePrimaryKey(int accessObjectId)
        {
            return InternalCreatePrimaryKey<AccessObjects>(accessObjectId);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad ObjectName.
        /// </summary>
        private string _objectName = null;
        /// <summary>
        /// Atributo para la propiedad Description.
        /// </summary>
        private string _description = null;
        /// <summary>
        /// Atributo para la propiedad AccessObjTypeCode.
        /// </summary>
        private int _accessObjTypeCode;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        public AccessObjects() :
            this(AccessObjects.CreatePrimaryKey(), null)
        {
        }


        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="accessObjectId">AccessObjectId key property.</param>
        public AccessObjects(int accessObjectId) :
            this(AccessObjects.CreatePrimaryKey(accessObjectId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public AccessObjects(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad AccessObjectId.
        /// </summary>
        /// <value>Propiedad AccessObjectId.</value>
        [
            DescriptionKey("ACCESS_OBJECT_ID_PROPERTY"),
            PersistentProperty(IsKey = true),
            ColumnMap(ColumnName = "ACCESS_OBJECT_ID", DbType = System.Data.DbType.String),
        ]
        public int AccessObjectId
        {
            get
            {
                return (int)this._primaryKey[Properties.AccessObjectId];
            }
            set
            {
                this._primaryKey[Properties.AccessObjectId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ObjectName.
        /// </summary>
        /// <value>Propiedad ObjectName.</value>
        [
            DescriptionKey("OBJECT_NAME_PROPERTY"),
            PersistentProperty(),
            ColumnMap(ColumnName = "OBJECT_NAME", DbType = System.Data.DbType.String),
        ]
        public string ObjectName
        {
            get
            {
                return this._objectName;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.ObjectName);
                }
                this._objectName = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Description.
        /// </summary>
        /// <value>Propiedad Description.</value>
        [
            DescriptionKey("DESCRIPTION_PROPERTY"),
            PersistentProperty(),
            ColumnMap(ColumnName = "DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Description);
                }
                this._description = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad AccessObjTypeCode.
        /// </summary>
        /// <value>Propiedad AccessObjTypeCode.</value>
        [
            DescriptionKey("ACCESS_OBJ_TYPE_CODE_PROPERTY"),
            PersistentProperty(),
            ColumnMap(ColumnName = "ACCESS_OBJ_TYPE_CD", DbType = System.Data.DbType.String),
        ]
        public int AccessObjTypeCode
        {
            get
            {
                return this._accessObjTypeCode;
            }
            set
            {
                this._accessObjTypeCode = value;
            }
        }

    }
}