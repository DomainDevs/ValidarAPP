/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.UniqueUser.LogPasswordFailed.dict v1.0
 * FileSize=5244 Header=258 CRC=2718246879
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.UniqueUser.Entities
{
    /// <summary>
    /// Definición de entidad LogPasswordFailed.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.UniqueUser.LogPasswordFailed.dict"),
    Serializable(),
    DescriptionKey("LOG_PASSWORD_FAILED_ENTITY"),
    TableMap(TableName = "LOG_PASSWORD_FAILED", Schema = "UU"),
    ]
    public partial class LogPasswordFailed :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string UserId = "UserId";
            public static readonly string SessionId = "SessionId";
            public static readonly string Attempts = "Attempts";
            public static readonly string LockDate = "LockDate";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="userId">Propiedad clave UserId.</param>
        /// <param name="sessionId">Propiedad clave SessionId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int userId, string sessionId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.UserId, userId);
            keys.Add(Properties.SessionId, sessionId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="userId">Propiedad clave UserId.</param>
        /// <param name="sessionId">Propiedad clave SessionId.</param>
        public static PrimaryKey CreatePrimaryKey(int userId, string sessionId)
        {
            return InternalCreatePrimaryKey<LogPasswordFailed>(userId, sessionId);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad Attempts.
        /// </summary>
        private int _attempts;
        /// <summary>
        /// Atributo para la propiedad LockDate.
        /// </summary>
        private DateTime? _lockDate = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="userId">UserId key property.</param>
        /// <param name="sessionId">SessionId key property.</param>
        public LogPasswordFailed(int userId, string sessionId) :
            this(LogPasswordFailed.CreatePrimaryKey(userId, sessionId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public LogPasswordFailed(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad UserId.
        /// </summary>
        /// <value>Propiedad UserId.</value>
        [
        DescriptionKey("USER_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "USER_ID", DbType = System.Data.DbType.String),
        ]
        public int UserId
        {
            get
            {
                return (int)this._primaryKey[Properties.UserId];
            }
            set
            {
                this._primaryKey[Properties.UserId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad SessionId.
        /// </summary>
        /// <value>Propiedad SessionId.</value>
        [
        DescriptionKey("SESSION_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "SESSION_ID", DbType = System.Data.DbType.String),
        ]
        public string SessionId
        {
            get
            {
                return (string)this._primaryKey[Properties.SessionId];
            }
            set
            {
                this._primaryKey[Properties.SessionId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Attempts.
        /// </summary>
        /// <value>Propiedad Attempts.</value>
        [
        DescriptionKey("ATTEMPTS_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "ATTEMPTS", DbType = System.Data.DbType.String),
        ]
        public int Attempts
        {
            get
            {
                return this._attempts;
            }
            set
            {
                this._attempts = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad LockDate.
        /// </summary>
        /// <value>Propiedad LockDate.</value>
        [
        DescriptionKey("LOCK_DATE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "LOCK_DATE", DbType = System.Data.DbType.String),
        ]
        public DateTime? LockDate
        {
            get
            {
                return this._lockDate;
            }
            set
            {
                this._lockDate = value;
            }
        }

    }
}