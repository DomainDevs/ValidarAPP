/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.UniqueUser.ProfileUniqueUser.dict v1.0
 * FileSize=4671 Header=258 CRC=3556113512
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.UniqueUser.Entities
{
    /// <summary>
    /// Definición de entidad ProfileUniqueUser.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.UniqueUser.ProfileUniqueUser.dict"),
    Serializable(),
    DescriptionKey("PROFILE_UNIQUE_USER_ENTITY"),
    TableMap(TableName = "PROFILE_UNIQUE_USER", Schema = "UU"),
    ]
    public partial class ProfileUniqueUser :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string UserId = "UserId";
            public static readonly string ProfileId = "ProfileId";
            public static readonly string ExpirationDate = "ExpirationDate";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="userId">Propiedad clave UserId.</param>
        /// <param name="profileId">Propiedad clave ProfileId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int userId, int profileId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.UserId, userId);
            keys.Add(Properties.ProfileId, profileId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="userId">Propiedad clave UserId.</param>
        /// <param name="profileId">Propiedad clave ProfileId.</param>
        public static PrimaryKey CreatePrimaryKey(int userId, int profileId)
        {
            return InternalCreatePrimaryKey<ProfileUniqueUser>(userId, profileId);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad ExpirationDate.
        /// </summary>
        private DateTime? _expirationDate = null;
        /// <summary>
        /// Indicate if ExpirationDate property value is null.
        /// </summary>
        private bool _isExpirationDateNull = true;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="userId">UserId key property.</param>
        /// <param name="profileId">ProfileId key property.</param>
        public ProfileUniqueUser(int userId, int profileId) :
            this(ProfileUniqueUser.CreatePrimaryKey(userId, profileId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public ProfileUniqueUser(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad UserId.
        /// </summary>
        /// <value>Propiedad UserId.</value>
        [
        DescriptionKey("USER_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "USER_ID", DbType = System.Data.DbType.String),
        ]
        public int UserId
        {
            get
            {
                return (int)this._primaryKey[Properties.UserId];
            }
            set
            {
                this._primaryKey[Properties.UserId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ProfileId.
        /// </summary>
        /// <value>Propiedad ProfileId.</value>
        [
        DescriptionKey("PROFILE_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "PROFILE_ID", DbType = System.Data.DbType.String),
        ]
        public int ProfileId
        {
            get
            {
                return (int)this._primaryKey[Properties.ProfileId];
            }
            set
            {
                this._primaryKey[Properties.ProfileId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad ExpirationDate.
        /// </summary>
        /// <value>Propiedad ExpirationDate.</value>
        [
        DescriptionKey("EXPIRATION_DATE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "EXPIRATION_DATE", DbType = System.Data.DbType.String),
        ]
        public DateTime? ExpirationDate
        {
            get
            {
                return this._expirationDate;
            }
            set
            {
                this._expirationDate = value;
            }
        }

        /// <summary>
        /// La propiedad ExpirationDate puede tener un valor nulo. 
        /// Esta propiedad indica si el valor de ExpirationDate es nulo o no.
        /// </summary>
        /// <value>
        /// True : No tiene Fecha de expiración, False : El submódulo tiene 
        /// fecha de expiración.
        /// </value>
        /// <exception 
        /// cref="Sistran.Core.Framework.InvalidPropertyValueException">
        /// Si se intenta asignar False a esta propiedad, ya que el False se 
        /// establece automáticamente al asignar un valor no nulo a la propiedad
        /// ExpirationDate.
        /// </exception>
        public bool IsExpirationDateNull
        {
            get
            {
                return this._isExpirationDateNull;
            }
            set
            {
                if (!value)
                {
                    throw new InvalidPropertyValueException(
                        this.GetType().FullName,
                        "IsExpirationDateNull",
                        value);
                }
                this._isExpirationDateNull = true;
            }
        }

    }
}