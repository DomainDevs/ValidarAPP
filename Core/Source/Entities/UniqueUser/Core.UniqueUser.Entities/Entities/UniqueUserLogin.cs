/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.UniqueUser.UniqueUserLogin.dict v1.0
 * FileSize=10408 Header=257 CRC=1496744497
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.UniqueUser.Entities
{
    /// <summary>
    /// Definición de entidad UniqueUserLogin.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.UniqueUser.UniqueUserLogin.dict"),
    Serializable(),
    DescriptionKey("UNIQUE_USER_LOGIN_ENTITY"),
    TableMap(TableName = "UNIQUE_USER_LOGIN", Schema = "UU"),
    ]
    public partial class UniqueUserLogin :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string UserId = "UserId";
            public static readonly string Password = "Password";
            public static readonly string PasswordExpirationDate = "PasswordExpirationDate";
            public static readonly string PasswordExpirationDays = "PasswordExpirationDays";
            public static readonly string PasswordNeverExpire = "PasswordNeverExpire";
            public static readonly string MustChangePassword = "MustChangePassword";
            public static readonly string CanChangePassword = "CanChangePassword";
            public static readonly string Salt = "Salt";
            public static readonly string LoginAttempts = "LoginAttempts";
            public static readonly string LockPasswordDate = "LockPasswordDate";
            public static readonly string LockPassword = "LockPassword";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="userId">Propiedad clave UserId.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int userId)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.UserId, userId);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="userId">Propiedad clave UserId.</param>
        public static PrimaryKey CreatePrimaryKey(int userId)
        {
            return InternalCreatePrimaryKey<UniqueUserLogin>(userId);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad Password.
        /// </summary>
        private string _password = null;
        /// <summary>
        /// Atributo para la propiedad PasswordExpirationDate.
        /// </summary>
        private DateTime? _passwordExpirationDate = null;
        /// <summary>
        /// Atributo para la propiedad PasswordExpirationDays.
        /// </summary>
        private int? _passwordExpirationDays = null;
        /// <summary>
        /// Atributo para la propiedad PasswordNeverExpire.
        /// </summary>
        private bool? _passwordNeverExpire;
        /// <summary>
        /// Atributo para la propiedad MustChangePassword.
        /// </summary>
        private bool? _mustChangePassword;
        /// <summary>
        /// Atributo para la propiedad CanChangePassword.
        /// </summary>
        private bool? _canChangePassword;
        /// <summary>
        /// Atributo para la propiedad Salt.
        /// </summary>
        private string _salt = null;
        /// <summary>
        /// Atributo para la propiedad LoginAttempts.
        /// </summary>
        private int? _loginAttempts = null;
        /// <summary>
        /// Atributo para la propiedad LockPasswordDate.
        /// </summary>
        private DateTime? _lockPasswordDate = null;
        /// <summary>
        /// Atributo para la propiedad LockPassword.
        /// </summary>
        private bool? _lockPassword = null;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="userId">UserId key property.</param>
        public UniqueUserLogin(int userId) :
            this(UniqueUserLogin.CreatePrimaryKey(userId), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public UniqueUserLogin(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad UserId.
        /// </summary>
        /// <value>Propiedad UserId.</value>
        [
        DescriptionKey("USER_ID_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "USER_ID", DbType = System.Data.DbType.String),
        ]
        public int UserId
        {
            get
            {
                return (int)this._primaryKey[Properties.UserId];
            }
            set
            {
                this._primaryKey[Properties.UserId] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Password.
        /// </summary>
        /// <value>Propiedad Password.</value>
        [
        DescriptionKey("PASSWORD_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "PASSWORD", DbType = System.Data.DbType.String),
        ]
        public string Password
        {
            get
            {
                return this._password;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Password);
                }
                this._password = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad PasswordExpirationDate.
        /// </summary>
        /// <value>Propiedad PasswordExpirationDate.</value>
        [
        DescriptionKey("PASSWORD_EXPIRATION_DATE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "PASSWORD_EXPIRATION_DATE", DbType = System.Data.DbType.String),
        ]
        public DateTime? PasswordExpirationDate
        {
            get
            {
                return this._passwordExpirationDate;
            }
            set
            {
                this._passwordExpirationDate = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad PasswordExpirationDays.
        /// </summary>
        /// <value>Propiedad PasswordExpirationDays.</value>
        [
        DescriptionKey("PASSWORD_EXPIRATION_DAYS_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "PASSWORD_EXPIRATION_DAYS", DbType = System.Data.DbType.String),
        ]
        public int? PasswordExpirationDays
        {
            get
            {
                return this._passwordExpirationDays;
            }
            set
            {
                this._passwordExpirationDays = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad PasswordNeverExpire.
        /// </summary>
        /// <value>Propiedad PasswordNeverExpire.</value>
        [
        DescriptionKey("PASSWORD_NEVER_EXPIRE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "PASSWORD_NEVER_EXPIRE", DbType = System.Data.DbType.String),
        ]
        public bool? PasswordNeverExpire
        {
            get
            {
                return this._passwordNeverExpire;
            }
            set
            {
                this._passwordNeverExpire = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad MustChangePassword.
        /// </summary>
        /// <value>Propiedad MustChangePassword.</value>
        [
        DescriptionKey("MUST_CHANGE_PASSWORD_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "MUST_CHANGE_PASSWORD", DbType = System.Data.DbType.String),
        ]
        public bool? MustChangePassword
        {
            get
            {
                return this._mustChangePassword;
            }
            set
            {
                this._mustChangePassword = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad CanChangePassword.
        /// </summary>
        /// <value>Propiedad CanChangePassword.</value>
        [
        DescriptionKey("CAN_CHANGE_PASSWORD_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "CAN_CHANGE_PASSWORD", DbType = System.Data.DbType.String),
        ]
        public bool? CanChangePassword
        {
            get
            {
                return this._canChangePassword;
            }
            set
            {
                this._canChangePassword = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Salt.
        /// </summary>
        /// <value>Propiedad Salt.</value>
        [
        DescriptionKey("SALT_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "SALT", DbType = System.Data.DbType.String),
        ]
        public string Salt
        {
            get
            {
                return this._salt;
            }
            set
            {
                this._salt = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad LoginAttempts.
        /// </summary>
        /// <value>Propiedad LoginAttempts.</value>
        [
        DescriptionKey("LOGIN_ATTEMPTS_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "LOGIN_ATTEMPTS", DbType = System.Data.DbType.String),
        ]
        public int? LoginAttempts
        {
            get
            {
                return this._loginAttempts;
            }
            set
            {
                this._loginAttempts = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad LockPasswordDate.
        /// </summary>
        /// <value>Propiedad LockPasswordDate.</value>
        [
        DescriptionKey("LOCK_PASSWORD_DATE_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "LOCK_PASSWORD_DATE", DbType = System.Data.DbType.String),
        ]
        public DateTime? LockPasswordDate
        {
            get
            {
                return this._lockPasswordDate;
            }
            set
            {
                this._lockPasswordDate = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad LockPassword.
        /// </summary>
        /// <value>Propiedad LockPassword.</value>
        [
        DescriptionKey("LOCK_PASSWORD_PROPERTY"),
        PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName = "LOCK_PASSWORD", DbType = System.Data.DbType.String),
        ]
        public bool? LockPassword
        {
            get
            {
                return this._lockPassword;
            }
            set
            {
                this._lockPassword = value;
            }
        }

    }
}