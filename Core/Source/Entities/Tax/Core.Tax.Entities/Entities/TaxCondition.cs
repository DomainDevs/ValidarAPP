/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Tax.TaxCondition.dict v1.0
 * FileSize=6888 Header=246 CRC=4027061383
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.Tax.Entities
{
    /// <summary>
    /// Definición de entidad TaxCondition.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Tax.TaxCondition.dict"),
    Serializable(),
    DescriptionKey("TAX_CONDITION_ENTITY"),
    TableMap(TableName = "TAX_CONDITION", Schema = "TAX"),
    ]
    public partial class TaxCondition :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string TaxCode = "TaxCode";
            public static readonly string TaxConditionCode = "TaxConditionCode";
            public static readonly string Description = "Description";
            public static readonly string HasNationalRate = "HasNationalRate";
            public static readonly string IsIndependent = "IsIndependent";
            public static readonly string IsDefault = "IsDefault";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="taxCode">Propiedad clave TaxCode.</param>
        /// <param name="taxConditionCode">Propiedad clave TaxConditionCode.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int taxCode, int taxConditionCode)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.TaxCode, taxCode);
            keys.Add(Properties.TaxConditionCode, taxConditionCode);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.TaxCode, null);
            keys.Add(Properties.TaxConditionCode, null);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="taxCode">Propiedad clave TaxCode.</param>
        /// <param name="taxConditionCode">Propiedad clave TaxConditionCode.</param>
        public static PrimaryKey CreatePrimaryKey(int taxCode, int taxConditionCode)
        {
            return InternalCreatePrimaryKey<TaxCondition>(taxCode, taxConditionCode);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
         public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<TaxCondition>();
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad Description.
        /// </summary>
        private string _description = null;
        /// <summary>
        /// Atributo para la propiedad HasNationalRate.
        /// </summary>
        private bool _hasNationalRate;
        /// <summary>
        /// Atributo para la propiedad IsIndependent.
        /// </summary>
        private bool _isIndependent;
        /// <summary>
        /// Atributo para la propiedad IsDefault.
        /// </summary>
        private bool _isDefault;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="taxCode">TaxCode key property.</param>
        /// <param name="taxConditionCode">TaxConditionCode key property.</param>
        public TaxCondition(int taxCode, int taxConditionCode) :
            this(TaxCondition.CreatePrimaryKey(taxCode, taxConditionCode), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        public TaxCondition() :
            this(TaxCondition.CreatePrimaryKey(), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public TaxCondition(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad TaxCode.
        /// </summary>
        /// <value>Propiedad TaxCode.</value>
        [
        DescriptionKey("TAX_CODE_PROPERTY"),
        PersistentProperty(IsKey = true, KeyType = "None"),
        ColumnMap(ColumnName = "TAX_CD", DbType = System.Data.DbType.String),
        ]
        public int TaxCode
        {
            get
            {
                return (int)this._primaryKey[Properties.TaxCode];
            }
            set
            {
                this._primaryKey[Properties.TaxCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad TaxConditionCode.
        /// </summary>
        /// <value>Propiedad TaxConditionCode.</value>
        [
        DescriptionKey("TAX_CONDITION_CODE_PROPERTY"),
        PersistentProperty(IsKey = true, KeyType = "None"),
        ColumnMap(ColumnName = "TAX_CONDITION_CD", DbType = System.Data.DbType.String),
        ]
        public int TaxConditionCode
        {
            get
            {
                return (int)this._primaryKey[Properties.TaxConditionCode];
            }
            set
            {
                this._primaryKey[Properties.TaxConditionCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad Description.
        /// </summary>
        /// <value>Propiedad Description.</value>
        [
        DescriptionKey("DESCRIPTION_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "DESCRIPTION", DbType = System.Data.DbType.String),
        ]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if (value == null)
                {
                    throw new PropertyNotNullableException(this.GetType().FullName, Properties.Description);
                }
                this._description = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad HasNationalRate.
        /// </summary>
        /// <value>Propiedad HasNationalRate.</value>
        [
        DescriptionKey("HAS_NATIONAL_RATE_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "HAS_NATIONAL_RATE", DbType = System.Data.DbType.String),
        ]
        public bool HasNationalRate
        {
            get
            {
                return this._hasNationalRate;
            }
            set
            {
                this._hasNationalRate = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IsIndependent.
        /// </summary>
        /// <value>Propiedad IsIndependent.</value>
        [
        DescriptionKey("IS_INDEPENDENT_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "IS_INDEPENDENT", DbType = System.Data.DbType.String),
        ]
        public bool IsIndependent
        {
            get
            {
                return this._isIndependent;
            }
            set
            {
                this._isIndependent = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IsDefault.
        /// </summary>
        /// <value>Propiedad IsDefault.</value>
        [
        DescriptionKey("IS_DEFAULT_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "IS_DEFAULT", DbType = System.Data.DbType.String),
        ]
        public bool IsDefault
        {
            get
            {
                return this._isDefault;
            }
            set
            {
                this._isDefault = value;
            }
        }

    }
}