/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Tax.AccountingConceptTax.dict v1.0
 * FileSize=7613 Header=253 CRC=538509108
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.Tax.Entities
{
    /// <summary>
    /// Definición de entidad AccountingConceptTax.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Tax.AccountingConceptTax.dict"),
    Serializable(),
    DescriptionKey("ACCOUNTING_CONCEPT_TAX_ENTITY"),
    TableMap(TableName="ACCOUNTING_CONCEPT_TAX", Schema="TAX"),
    ]
    public partial class AccountingConceptTax :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string AccountingConceptTaxCode = "AccountingConceptTaxCode";
			public static readonly string AccountingConceptCode = "AccountingConceptCode";
			public static readonly string TaxCode = "TaxCode";
			public static readonly string TaxCategoryCode = "TaxCategoryCode";
			public static readonly string BranchCode = "BranchCode";
			public static readonly string EnableAddExpense = "EnableAddExpense";
			public static readonly string EnableAutomatic = "EnableAutomatic";
		}

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="accountingConceptTaxCode">Propiedad clave AccountingConceptTaxCode.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>(int accountingConceptTaxCode)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.AccountingConceptTaxCode, accountingConceptTaxCode);

		    return new PrimaryKey<T>(keys);
	    }

        protected static PrimaryKey InternalCreatePrimaryKey<T>()
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.AccountingConceptTaxCode, null);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="accountingConceptTaxCode">Propiedad clave AccountingConceptTaxCode.</param>
        public static PrimaryKey CreatePrimaryKey(int accountingConceptTaxCode)
	    {
			return InternalCreatePrimaryKey<AccountingConceptTax>(accountingConceptTaxCode);
		}

        public static PrimaryKey CreatePrimaryKey()
        {
            return InternalCreatePrimaryKey<AccountingConceptTax>();
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad AccountingConceptCode.
        /// </summary>
        private int _accountingConceptCode;
		/// <summary>
		/// Atributo para la propiedad TaxCode.
		/// </summary>
        private int _taxCode;
		/// <summary>
		/// Atributo para la propiedad TaxCategoryCode.
		/// </summary>
        private int _taxCategoryCode;
		/// <summary>
		/// Atributo para la propiedad BranchCode.
		/// </summary>
        private int _branchCode;
		/// <summary>
		/// Atributo para la propiedad EnableAddExpense.
		/// </summary>
        private bool _enableAddExpense;
		/// <summary>
		/// Atributo para la propiedad EnableAutomatic.
		/// </summary>
        private bool _enableAutomatic;
	    //*** Object Constructors ********************************

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="accountingConceptTaxCode">AccountingConceptTaxCode key property.</param>
	    public AccountingConceptTax(int accountingConceptTaxCode):
			this(AccountingConceptTax.CreatePrimaryKey(accountingConceptTaxCode), null)
	    {
	    }
        public AccountingConceptTax() :
            this(AccountingConceptTax.CreatePrimaryKey(), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public AccountingConceptTax(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad AccountingConceptTaxCode.
		/// </summary>
		/// <value>Propiedad AccountingConceptTaxCode.</value>
	    [
		DescriptionKey("ACCOUNTING_CONCEPT_TAX_CODE_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="ACCOUNTING_CONCEPT_TAX_CD", DbType=System.Data.DbType.String),
	    ]
        public int AccountingConceptTaxCode
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.AccountingConceptTaxCode];
		    }
		    set
		    {
				this._primaryKey[Properties.AccountingConceptTaxCode] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad AccountingConceptCode.
		/// </summary>
		/// <value>Propiedad AccountingConceptCode.</value>
	    [
		DescriptionKey("ACCOUNTING_CONCEPT_CODE_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="ACCOUNTING_CONCEPT_CD", DbType=System.Data.DbType.String),
	    ]
        public int AccountingConceptCode
	    {
		    get
		    {
			    return this._accountingConceptCode;
		    }
		    set
		    {
				this._accountingConceptCode = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad TaxCode.
		/// </summary>
		/// <value>Propiedad TaxCode.</value>
	    [
		DescriptionKey("TAX_CODE_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="TAX_CD", DbType=System.Data.DbType.String),
	    ]
        public int TaxCode
	    {
		    get
		    {
			    return this._taxCode;
		    }
		    set
		    {
				this._taxCode = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad TaxCategoryCode.
		/// </summary>
		/// <value>Propiedad TaxCategoryCode.</value>
	    [
		DescriptionKey("TAX_CATEGORY_CODE_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="TAX_CATEGORY_CD", DbType=System.Data.DbType.String),
	    ]
        public int TaxCategoryCode
	    {
		    get
		    {
			    return this._taxCategoryCode;
		    }
		    set
		    {
				this._taxCategoryCode = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad BranchCode.
		/// </summary>
		/// <value>Propiedad BranchCode.</value>
	    [
		DescriptionKey("BRANCH_CODE_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="BRANCH_CD", DbType=System.Data.DbType.String),
	    ]
        public int BranchCode
	    {
		    get
		    {
			    return this._branchCode;
		    }
		    set
		    {
				this._branchCode = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad EnableAddExpense.
		/// </summary>
		/// <value>Propiedad EnableAddExpense.</value>
	    [
		DescriptionKey("ENABLE_ADD_EXPENSE_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="ENABLE_ADD_EXPENSE", DbType=System.Data.DbType.String),
	    ]
        public bool EnableAddExpense
	    {
		    get
		    {
			    return this._enableAddExpense;
		    }
		    set
		    {
				this._enableAddExpense = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad EnableAutomatic.
		/// </summary>
		/// <value>Propiedad EnableAutomatic.</value>
	    [
		DescriptionKey("ENABLE_AUTOMATIC_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="ENABLE_AUTOMATIC", DbType=System.Data.DbType.String),
	    ]
        public bool EnableAutomatic
	    {
		    get
		    {
			    return this._enableAutomatic;
		    }
		    set
		    {
				this._enableAutomatic = value;
			}
	    }

    }
}