/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.Tax.BaseAmtComponent.dict v1.0
 * FileSize=4947 Header=250 CRC=3789318208
 ******************************************/
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sistran.Core.Application.Tax.Entities
{
    /// <summary>
    /// Definición de entidad BaseAmtComponent.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.Tax.BaseAmtComponent.dict"),
    Serializable(),
    DescriptionKey("BASE_AMT_COMPONENT_ENTITY"),
    TableMap(TableName = "BASE_AMT_COMPONENT", Schema = "TAX"),
    ]
    public partial class BaseAmtComponent :
        BusinessObject2
    {
        #region static
        /// <summary>
        /// Propiedades públicas de la entidad.
        /// </summary>
        public static class Properties
        {
            public static readonly string ComponentCode = "ComponentCode";
            public static readonly string BaseAmountCode = "BaseAmountCode";
            public static readonly string IsAdditionalRateUsed = "IsAdditionalRateUsed";
        }

        /// <summary>
        /// Crea una clave primaria para una clase concreta.
        /// </summary>
        /// <param name="concreteClass">Clase concreta.</param>
        /// <param name="componentCode">Propiedad clave ComponentCode.</param>
        /// <param name="baseAmountCode">Propiedad clave BaseAmountCode.</param>
        /// <returns>Clave primaria.</returns>
        protected static PrimaryKey InternalCreatePrimaryKey<T>(int componentCode, int baseAmountCode)
        {
            Dictionary<string, object> keys = new Dictionary<string, object>();
            keys.Add(Properties.ComponentCode, componentCode);
            keys.Add(Properties.BaseAmountCode, baseAmountCode);

            return new PrimaryKey<T>(keys);
        }

        /// <summary>
        /// Crea una clave primaria para esta clase.
        /// </summary>
        /// <param name="componentCode">Propiedad clave ComponentCode.</param>
        /// <param name="baseAmountCode">Propiedad clave BaseAmountCode.</param>
        public static PrimaryKey CreatePrimaryKey(int componentCode, int baseAmountCode)
        {
            return InternalCreatePrimaryKey<BaseAmtComponent>(componentCode, baseAmountCode);
        }
        #endregion

        //*** Object Attributes ********************************

        /// <summary>
        /// Atributo para la propiedad IsAdditionalRateUsed.
        /// </summary>
        private bool _isAdditionalRateUsed;
        //*** Object Constructors ********************************

        /// <summary>
        /// Constructor de instancia de la clase en base a las propiedades claves.
        /// </summary>
        /// <param name="componentCode">ComponentCode key property.</param>
        /// <param name="baseAmountCode">BaseAmountCode key property.</param>
        public BaseAmtComponent(int componentCode, int baseAmountCode) :
            this(BaseAmtComponent.CreatePrimaryKey(componentCode, baseAmountCode), null)
        {
        }

        /// <summary>
        /// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
        /// </summary>
        /// <param name="key">
        /// Identificador de la instancia de la entidad.
        /// </param>
        /// <param name="initialValues">
        /// Valores para establecer el estado de la instancia.
        /// </param>
        public BaseAmtComponent(PrimaryKey key, IDictionary initialValues) :
            base(key, initialValues)
        {
        }

        /*** Object Properties ********************************/
        /// <summary>
        /// Devuelve o setea el valor de la propiedad ComponentCode.
        /// </summary>
        /// <value>Propiedad ComponentCode.</value>
        [
        DescriptionKey("COMPONENT_CODE_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "COMPONENT_CD", DbType = System.Data.DbType.String),
        ]
        public int ComponentCode
        {
            get
            {
                return (int)this._primaryKey[Properties.ComponentCode];
            }
            set
            {
                this._primaryKey[Properties.ComponentCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad BaseAmountCode.
        /// </summary>
        /// <value>Propiedad BaseAmountCode.</value>
        [
        DescriptionKey("BASE_AMOUNT_CODE_PROPERTY"),
        PersistentProperty(IsKey = true),
        ColumnMap(ColumnName = "BASE_AMOUNT_CD", DbType = System.Data.DbType.String),
        ]
        public int BaseAmountCode
        {
            get
            {
                return (int)this._primaryKey[Properties.BaseAmountCode];
            }
            set
            {
                this._primaryKey[Properties.BaseAmountCode] = value;
            }
        }

        /// <summary>
        /// Devuelve o setea el valor de la propiedad IsAdditionalRateUsed.
        /// </summary>
        /// <value>Propiedad IsAdditionalRateUsed.</value>
        [
        DescriptionKey("IS_ADDITIONAL_RATE_USED_PROPERTY"),
        PersistentProperty(),
        ColumnMap(ColumnName = "IS_ADDITIONAL_RATE_USED", DbType = System.Data.DbType.String),
        ]
        public bool IsAdditionalRateUsed
        {
            get
            {
                return this._isAdditionalRateUsed;
            }
            set
            {
                this._isAdditionalRateUsed = value;
            }
        }

    }
}