<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrorCreateEndorsementControl" xml:space="preserve">
    <value>Error al guardar control de endoso</value>
  </data>
  <data name="ErrorCreateFile" xml:space="preserve">
    <value>Error creando archivo </value>
  </data>
  <data name="ErrorCreateFileByType" xml:space="preserve">
    <value>Error creando archivos por tipo </value>
  </data>
  <data name="ErrorDecimalPropertyLength" xml:space="preserve">
    <value>Error solo permite decimales</value>
  </data>
  <data name="ErrorDeleteEndorsementControl" xml:space="preserve">
    <value>Error al eliminar control de endoso</value>
  </data>
  <data name="ErrorDeleteJSON" xml:space="preserve">
    <value>Error eliminando JSON</value>
  </data>
  <data name="ErrorDoesntAllowSpecialCharacters" xml:space="preserve">
    <value>El campo {0} no permite caracteres especiales</value>
  </data>
  <data name="ErrorDuplicateIdentifiers" xml:space="preserve">
    <value>Error identificacion duplicada</value>
  </data>
  <data name="ErrorFieldIsMandatory" xml:space="preserve">
    <value>La columna: {0} es campo obligatorio de la hoja: {1} </value>
  </data>
  <data name="ErrorFieldNotMatch" xml:space="preserve">
    <value>La columna {0} de la hoja {1} no corresponde a la parametrizada</value>
  </data>
  <data name="ErrorFileLoaded" xml:space="preserve">
    <value>Error cargando la plantilla</value>
  </data>
  <data name="ErrorFindTemporalPolicies" xml:space="preserve">
    <value>Error al validar temporales</value>
  </data>
  <data name="ErrorGenerateAsynchronousProcessId" xml:space="preserve">
    <value>Error al generar Id proceso asíncrono</value>
  </data>
  <data name="ErrorGetAsynchronousProcessByIdentifier" xml:space="preserve">
    <value>Error al obtener proceso asíncrono por identificador</value>
  </data>
  <data name="ErrorGetCollectiveFile" xml:space="preserve">
    <value>Error obteniendo archivos colectivos </value>
  </data>
  <data name="ErrorGetEndorsementControl" xml:space="preserve">
    <value>Error obtniendo control de endoso</value>
  </data>
  <data name="ErrorGetFields" xml:space="preserve">
    <value>Error obteniendo archivos</value>
  </data>
  <data name="ErrorGetFileByDescription" xml:space="preserve">
    <value>Error obteniendo archivos por descripcion </value>
  </data>
  <data name="ErrorGetFileByFileId" xml:space="preserve">
    <value>Error obteniendo archivos </value>
  </data>
  <data name="ErrorGetFileByFilters" xml:space="preserve">
    <value>Error obteniendo archivos por filtro</value>
  </data>
  <data name="ErrorGetFiles" xml:space="preserve">
    <value>Error obteniendo archivos</value>
  </data>
  <data name="ErrorGetJSON" xml:space="preserve">
    <value>Error obteniendo JSON</value>
  </data>
  <data name="ErrorGetJSONChild" xml:space="preserve">
    <value>Error obteniendo hijos de JSON</value>
  </data>
  <data name="ErrorGetListJSON" xml:space="preserve">
    <value>Error obteniendo lista de JSON</value>
  </data>
  <data name="ErrorGetTemplates" xml:space="preserve">
    <value>Error obteniendo planillas </value>
  </data>
  <data name="ErrorGetValueByField" xml:space="preserve">
    <value>Error obteniendo valores de archivos</value>
  </data>
  <data name="ErrorLengthOfDigits" xml:space="preserve">
    <value>Error longitud de digitios</value>
  </data>
  <data name="ErrorNegativeValuesAreNotAccepted" xml:space="preserve">
    <value>No se aceptan valores negativos {0} {1}</value>
  </data>
  <data name="ErrorOnlyAllowsBoolean" xml:space="preserve">
    <value>Error solo permite tipos booleano {0} {1}</value>
  </data>
  <data name="ErrorOnlyAllowsDateTime" xml:space="preserve">
    <value>Error solo permite tipo fecha {0} {1}</value>
  </data>
  <data name="ErrorOnlyAllowsDecimal" xml:space="preserve">
    <value>La columna {0} de la plantilla {1} permite únicamente decimales </value>
  </data>
  <data name="ErrorOnlyAllowsInt16" xml:space="preserve">
    <value>La columna {0} de la plantilla {1} permite únicamente  enteros 16 </value>
  </data>
  <data name="ErrorOnlyAllowsInt32" xml:space="preserve">
    <value>La columna {0} de la plantilla {1} permite únicamente  enteros 32 </value>
  </data>
  <data name="ErrorOnlyAllowsInt64" xml:space="preserve">
    <value>La columna {0} de la plantilla {1} permite únicamente  enteros 64  </value>
  </data>
  <data name="ErrorOnlyAllowsInt8" xml:space="preserve">
    <value>La columna {0} de la plantilla {1} permite únicamente  enteros 8 </value>
  </data>
  <data name="ErrorSaveJSON" xml:space="preserve">
    <value>Error al guardar JSON</value>
  </data>
  <data name="ErrorSendEmail" xml:space="preserve">
    <value>Error enviando Email</value>
  </data>
  <data name="ErrorStringLength" xml:space="preserve">
    <value>Error en el tamaño del texto en la columna {0} de la hoja {1}</value>
  </data>
  <data name="ErrorTemplateIsMandatory" xml:space="preserve">
    <value>La plantilla {0} es obligatoria</value>
  </data>
  <data name="ErrorTemplateIsMandatoryData" xml:space="preserve">
    <value>La plantilla {0} no tiene datos</value>
  </data>
  <data name="ErrorTemplateName" xml:space="preserve">
    <value>Error nombre de plantilla</value>
  </data>
  <data name="ErrorTemplateNotMatch" xml:space="preserve">
    <value>La plantilla {0} tiene menos columnas de las parametrizadas</value>
  </data>
  <data name="ErrorTempleteNotExist" xml:space="preserve">
    <value>Error plantilla no existe</value>
  </data>
  <data name="ErrorUpdateAsynchronousProcess" xml:space="preserve">
    <value>Error actualizando proceso asíncrono</value>
  </data>
  <data name="ErrorUpdateFile" xml:space="preserve">
    <value>Error actualizando archivo</value>
  </data>
  <data name="ErrorUpdateJSON" xml:space="preserve">
    <value>Error al actualizar JSON</value>
  </data>
  <data name="ErrorValidateFile" xml:space="preserve">
    <value>Error validando archivos</value>
  </data>
  <data name="ErrorValidatePhoneType" xml:space="preserve">
    <value>El campo {0} ingresado no tiene el formato correcto</value>
  </data>
  <data name="ErrorValidateRegularExpression" xml:space="preserve">
    <value>El campo {0} ingresado no tiene el formato correcto</value>
  </data>
</root>