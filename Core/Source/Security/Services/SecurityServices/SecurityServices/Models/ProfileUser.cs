/**********************************
 * Code generated by DictEditor v1.0.1.1
 * Template: Sistran.Core.Application.UniqueUser.ProfileUser.dict v0.0
 **********************************/
using System;
using System.Collections;
using System.Collections.Specialized;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.UniqueUser.Entities
{
	/// <summary>
	/// Entidad ProfileUser : Modeliza la asociación de Perfiles a Usuarios.
	/// </summary>
	[PersistentClass("Sistran.Core.Application.UniqueUser.ProfileUser.dict"),
	Serializable()]
    public class ProfileUser : BusinessObject
    {
#region static
		/// <summary>
		/// Crear una clave única a partir de una clase concreta.
		/// </summary>
		/// <param name="concreteClass">
		/// Clase concreta.</param>
		/// <param name="userId">
		/// Identificador del usuario al que se asigna el perfil.
		/// </param>
		/// <param name="profileId">
		/// Identificador del perfil asignado al usuario.
		/// </param>
		/// <returns>
		/// Identificador unívoco para una asociación perfil-usuario.
		/// </returns>
		protected static PrimaryKey InternalCreatePrimaryKey(
			Type concreteClass, 
			int userId, 
			int profileId)
	    {
		    ListDictionary keys = new ListDictionary();
		    keys.Add("UserId", userId);
		    keys.Add("ProfileId", profileId);

		    return new PrimaryKey(concreteClass, keys);
	    }

		/// <summary>
		/// Crear una clave única a partir de una clase concreta.
		/// </summary>
		/// <remarks>
		/// Se asume "ProfileUser" como clase concreta.
		/// </remarks>
		/// <param name="userId">
		/// Identificador del usuario al que se asigna el perfil.
		/// </param>
		/// <param name="profileId">
		/// Identificador del perfil asignado al usuario.
		/// </param>
		/// <returns>
		/// Identificador unívoco para una asociación perfil-usuario.
		/// </returns>
		public static PrimaryKey CreatePrimaryKey(int userId, int profileId)
	    {
			return InternalCreatePrimaryKey(
				typeof(ProfileUser), userId, profileId);
		}
#endregion

	    //*** Object Attributes ********************************

		/// <summary>
		/// UserId property attribute.
		/// </summary>
        private int _userId;
		/// <summary>
		/// ProfileId property attribute.
		/// </summary>
        private int _profileId;
		/// <summary>
		/// ExpirationDate property attribute.
		/// </summary>
        private DateTime _expirationDate;
		/// <summary>
		/// Indicate if ExpirationDate property value is null.
		/// </summary>
		private bool _isExpirationDateNull = true;
	    //*** Object Constructors ********************************

		/// <summary>
		/// Construir una instancia de la clase ProfileUser con la clave 
		/// primaria específica y el Motor asociado.
		/// </summary>
		/// <param name="key">Clave primaria del objeto.</param>
		/// <param name="initialValues">Valores para completar el estado del
		/// objeto
		/// </param>
		public ProfileUser(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {}

	    /*** Object Properties ********************************/

		/// <summary>
		/// Identificador del User al que se asigna el Perfil.
		/// </summary>
		/// <remarks>
		/// La asociación de Perfiles a usuarios está determinada por un
		/// identificador de User (UserId) y otro de Profile (ProfileId), 
		/// de esta manera es posible asignar más de un perfil a un mismo
		/// usuario.
		/// </remarks>
		/// <value>
		/// Identificador del User asignado.
		/// </value>
		[PersistentProperty(IsKey = true)]
        public int UserId
	    {
		    get
		    {
			    return this._userId;
		    }
            set
            {
                this._userId = value;
            }
	    }

		/// <summary>
		/// Identificador del Perfil que se asigna al Usuario.
		/// </summary>
		/// <remarks>
		/// La asociación de Perfiles a usuarios está determinada por un
		/// identificador de User (UserId) y otro de Profile (ProfileId), 
		/// de esta manera es posible asignar más de un perfil a un mismo
		/// usuario.
		/// </remarks>
		/// <value>
		/// Identificador del Profile asignado.
		/// </value>
		[PersistentProperty(IsKey = true)]
        public int ProfileId
	    {
		    get
		    {
			    return this._profileId;
		    }
            set
            {
                this._profileId = value;
            }
	    }

		/// <summary>
		/// Es posible asociar una fecha de caducidad a la asignación de un
		/// perfil a un usuario, de esta manera se puede realizar asignaciones
		/// de perfiles por un período que dependa de la fecha contenida en
		/// la propiedad ExpirationDate.
		/// </summary>
		/// <value>
		/// Fecha de expiración o caducidad de la asignación.
		/// </value>
		/// <exception 
		/// cref="Sistran.Core.Framework.InvalidUseOfNullPropertyException">
		/// Si se intenta consultar el valor de la propiedad y ésta tiene
		/// asociado un valor nulo.
		/// </exception>
		[PersistentProperty(IsNullable = true)]
        public DateTime ExpirationDate
	    {
		    get
		    {
				if(this._isExpirationDateNull)
				{
					throw new InvalidUseOfNullPropertyException(
						this.GetType().FullName, 
						"ExpirationDate");
				}
			    return this._expirationDate;
		    }
		    set
		    {
			    this._expirationDate = value;
				this._isExpirationDateNull = false;
			}
	    }

		/// <summary>
		/// La propiedad ExpirationDate puede tener un valor nulo. 
		/// Esta propiedad indica si el valor de ExpirationDate es nulo o no.
		/// </summary>
		/// <value>
		/// True : No tiene Fecha de expiración, False : El submódulo tiene 
		/// fecha de expiración.
		/// </value>
		/// <exception 
		/// cref="Sistran.Core.Framework.InvalidPropertyValueException">
		/// Si se intenta asignar False a esta propiedad, ya que el False se 
		/// establece automáticamente al asignar un valor no nulo a la propiedad
		/// ExpirationDate.
		/// </exception>
		public bool IsExpirationDateNull
		{
			get
			{
				return this._isExpirationDateNull;
			}
			set
			{
				if(!value)
				{
					throw new InvalidPropertyValueException(
						this.GetType().FullName, 
						"IsExpirationDateNull", 
						value);
				}
				this._isExpirationDateNull = true;
			}
		}

		/// <summary>
		/// Completar el estado de las propiedades clave del objeto.
		/// </summary>
		/// <remarks>
		/// La asociación de Perfiles a usuarios está determinada por un
		/// identificador de User (UserId) y otro de Profile (ProfileId), 
		/// de esta manera es posible asignar más de un perfil a un mismo
		/// usuario.
		/// </remarks>
		/// <param name="keys">
		/// Colección de propiedades que conforman el identificador de la
		/// entidad Submodule.
		/// </param>
		protected override void SetKeyPropertyValues(IDictionary keys)
		{
			this._userId = (int)keys["UserId"];
			this._profileId = (int)keys["ProfileId"];
		}

		/// <summary>
		/// Completar el estado de las propiedades no clave del objeto.
		/// </summary>
		/// <param name="values">
		/// Colección de valores que constituyen el estado de la entidad.
		/// </param>
		public override void SetPropertyValues(IDictionary values)
		{
			object value;
			value = values["ExpirationDate"];
			if(value == null)
			{
				this.IsExpirationDateNull = true;
			}
			else
			{
				this.ExpirationDate = (DateTime)value;
			}

		}

		/// <summary>
		/// Cargar el diccionario asociado al objeto a partir del estado
		/// del mismo.
		/// </summary>
		/// <returns>
		/// Colección con los pares de valores "Key" - "Value", para cada
		/// propiedad de la entidad, a partir del estado del objeto.
		/// </returns>
		public override IDictionary GetPropertyValues()
		{
			ListDictionary values = new ListDictionary();

			if(this.IsExpirationDateNull)
			{
				values.Add("ExpirationDate", null);
			}
			else
			{
				values.Add("ExpirationDate", this.ExpirationDate);
			}

			return values;
		}
		
    }
}