/******************************************
 * Code generated by GEB (Version: 2.2.0.0)
 * Template: Sistran.Core.Application.SecurityServices.EEProvider.UniqueUserLoginHistory.dict v1.0
 * FileSize=6938 Header=280 CRC=3717366325
 ******************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using Sistran.Core.Framework;
using Sistran.Core.Framework.DAF;

namespace Sistran.Core.Application.SecurityServices.EEProvider.Entities
{
    /// <summary>
    /// Definición de entidad UniqueUserLoginHistory.
    /// </summary>
    [
    PersistentClass("Sistran.Core.Application.SecurityServices.EEProvider.UniqueUserLoginHistory.dict"),
    Serializable(),
    DescriptionKey("UNIQUE_USER_LOGIN_HISTORY_ENTITY"),
    TableMap(TableName="UNIQUE_USER_LOGIN_HISTORY", Schema="UU"),
    ]
    public partial class UniqueUserLoginHistory :
        BusinessObject2
    {
#region static
		/// <summary>
		/// Propiedades públicas de la entidad.
		/// </summary>
		public static class Properties
		{
			public static readonly string UserId = "UserId";
			public static readonly string ChangeDate = "ChangeDate";
			public static readonly string Password = "Password";
			public static readonly string PasswordInitialized = "PasswordInitialized";
			public static readonly string Salt = "Salt";
			public static readonly string Ecryptedpassword = "Ecryptedpassword";
		}

		/// <summary>
		/// Crea una clave primaria para una clase concreta.
		/// </summary>
		/// <param name="concreteClass">Clase concreta.</param>
		/// <param name="userId">Propiedad clave UserId.</param>
		/// <param name="changeDate">Propiedad clave ChangeDate.</param>
		/// <returns>Clave primaria.</returns>
	    protected static PrimaryKey InternalCreatePrimaryKey<T>(int userId, DateTime changeDate)
	    {
		    Dictionary<string, object> keys = new Dictionary<string, object>();
		    keys.Add(Properties.UserId, userId);
		    keys.Add(Properties.ChangeDate, changeDate);

		    return new PrimaryKey<T>(keys);
	    }

		/// <summary>
		/// Crea una clave primaria para esta clase.
		/// </summary>
		/// <param name="userId">Propiedad clave UserId.</param>
		/// <param name="changeDate">Propiedad clave ChangeDate.</param>
		public static PrimaryKey CreatePrimaryKey(int userId, DateTime changeDate)
	    {
			return InternalCreatePrimaryKey<UniqueUserLoginHistory>(userId, changeDate);
		}
#endregion

	    //*** Object Attributes ********************************

		/// <summary>
		/// Atributo para la propiedad Password.
		/// </summary>
        private string _password = null;
		/// <summary>
		/// Atributo para la propiedad PasswordInitialized.
		/// </summary>
        private bool _passwordInitialized;
		/// <summary>
		/// Atributo para la propiedad Salt.
		/// </summary>
        private string _salt = null;
		/// <summary>
		/// Atributo para la propiedad Ecryptedpassword.
		/// </summary>
        private string _ecryptedpassword = null;
	    //*** Object Constructors ********************************

		/// <summary>
		/// Constructor de instancia de la clase en base a las propiedades claves.
		/// </summary>
		/// <param name="userId">UserId key property.</param>
		/// <param name="changeDate">ChangeDate key property.</param>
	    public UniqueUserLoginHistory(int userId, DateTime changeDate):
			this(UniqueUserLoginHistory.CreatePrimaryKey(userId, changeDate), null)
	    {
	    }

		/// <summary>
		/// Constructor de instancia de la clase en base a una clave primaria y a valores iniciales.
		/// </summary>
		/// <param name="key">
		/// Identificador de la instancia de la entidad.
		/// </param>
		/// <param name="initialValues">
		/// Valores para establecer el estado de la instancia.
		/// </param>
	    public UniqueUserLoginHistory(PrimaryKey key, IDictionary initialValues):
			base(key, initialValues)
	    {
	    }

	    /*** Object Properties ********************************/
		/// <summary>
		/// Devuelve o setea el valor de la propiedad UserId.
		/// </summary>
		/// <value>Propiedad UserId.</value>
	    [
		DescriptionKey("USER_ID_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="USER_ID", DbType=System.Data.DbType.String),
	    ]
        public int UserId
	    {
		    get
		    {
				return (int)this._primaryKey[Properties.UserId];
		    }
		    set
		    {
				this._primaryKey[Properties.UserId] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad ChangeDate.
		/// </summary>
		/// <value>Propiedad ChangeDate.</value>
	    [
		DescriptionKey("CHANGE_DATE_PROPERTY"),
		PersistentProperty(IsKey = true),
        ColumnMap(ColumnName="CHANGE_DATE", DbType=System.Data.DbType.String),
	    ]
        public DateTime ChangeDate
	    {
		    get
		    {
				return (DateTime)this._primaryKey[Properties.ChangeDate];
		    }
		    set
		    {
				this._primaryKey[Properties.ChangeDate] = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Password.
		/// </summary>
		/// <value>Propiedad Password.</value>
	    [
		DescriptionKey("PASSWORD_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="PASSWORD", DbType=System.Data.DbType.String),
	    ]
        public string Password
	    {
		    get
		    {
			    return this._password;
		    }
		    set
		    {
				if(value == null)
				{
					throw new PropertyNotNullableException(this.GetType().FullName, Properties.Password);
				}
				this._password = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad PasswordInitialized.
		/// </summary>
		/// <value>Propiedad PasswordInitialized.</value>
	    [
		DescriptionKey("PASSWORD_INITIALIZED_PROPERTY"),
		PersistentProperty(),
        ColumnMap(ColumnName="PASSWORD_INITIALIZED", DbType=System.Data.DbType.String),
	    ]
        public bool PasswordInitialized
	    {
		    get
		    {
			    return this._passwordInitialized;
		    }
		    set
		    {
				this._passwordInitialized = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Salt.
		/// </summary>
		/// <value>Propiedad Salt.</value>
	    [
		DescriptionKey("SALT_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="SALT", DbType=System.Data.DbType.String),
	    ]
        public string Salt
	    {
		    get
		    {
			    return this._salt;
		    }
		    set
		    {
				this._salt = value;
			}
	    }

		/// <summary>
		/// Devuelve o setea el valor de la propiedad Ecryptedpassword.
		/// </summary>
		/// <value>Propiedad Ecryptedpassword.</value>
	    [
		DescriptionKey("ECRYPTEDPASSWORD_PROPERTY"),
		PersistentProperty(IsNullable = true),
        ColumnMap(ColumnName="ECRYPTEDPASSWORD", DbType=System.Data.DbType.String),
	    ]
        public string Ecryptedpassword
	    {
		    get
		    {
			    return this._ecryptedpassword;
		    }
		    set
		    {
				this._ecryptedpassword = value;
			}
	    }

    }
}